<?xml version="1.0" encoding="UTF-8"?>
<TestScript xmlns="http://hl7.org/fhir" xmlns:nts="http://nictiz.nl/xsl/testscript">
   <id value="mp9-meddata-receive-3-x-json"/>
   <url value="http://nictiz.nl/fhir/TestScript/mp9-meddata-receive-3-x-json"/>
   <version value="r4-mp9-3.0.0-beta-patchlevel 2025.31"/>
   <name value="MP9 - Server - Scenario 3.x - Receive MedicationData - MA-Scenarioset3 - JSON Format"/>
   <status value="active"/>
   <publisher value="Nictiz"/>
   <contact>
      <name value="Nictiz"/>
      <telecom>
         <system value="email"/>
         <value value="kwalificatie@nictiz.nl"/>
         <use value="work"/>
      </telecom>
   </contact>
   <description value="Scenario 3.x - Receive MedicationData for C van de XXX_Voortman."/>
   <origin>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="false"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types"/>
         <code value="FHIR-Client"/>
      </profile>
   </origin>
   <destination>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="true"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types"/>
         <code value="FHIR-Server"/>
      </profile>
   </destination>
   <fixture id="mgsets-mp-smg-tst-MA-Scenarioset3-v30">
      <autocreate value="false"/>
      <autodelete value="false"/>
      <resource>
         <reference value="../../_reference/fixtures/mgsets-mp-smg-tst-MA-Scenarioset3-v30.json"/>
      </resource>
   </fixture>
   <profile id="Bundle-profile"
            value="http://hl7.org/fhir/StructureDefinition/Bundle"/>
   <variable>
      <name value="T"/>
      <defaultValue value="${CURRENTDATE}"/>
      <description value="Date that data and queries are expected to be relative to."/>
   </variable>
   <test id="scenario3-x-receive-meddata">
      <name value="Scenario 3.x"/>
      <description value="Receive MedicationData in a transaction Bundle"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="transaction"/>
            </type>
            <description value="Test server to handle a Bundle of type transaction."/>
            <accept value="json"/>
            <contentType value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <requestHeader>
               <field value="Prefer"/>
               <value value="return=representation"/>
            </requestHeader>
            <sourceId value="mgsets-mp-smg-tst-MA-Scenarioset3-v30"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is transaction-response."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="transaction-response"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 22 MedicationRequest resource(s). "/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(resource.is(MedicationRequest)).count() = 22"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 10 Medication resource(s). "/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(resource.is(Medication)).count() = 10"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="scenario3-x-receive-meddata-identification">
      <name value="Resource identification"/>
      <description value="Checks if all resources specified by the scenario can be identified unambiguously."/>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '68632') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '117145') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').exists().not()).count() = 2"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '68632') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '117145') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').value.coding.code = '410546004').count() = 2"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '5967') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '16810') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').exists().not()).where(reasonCode.exists().not()).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '5967') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '16810') ))).where(reasonCode.coding.code = '58848006').count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '5967') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '16810') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').value.coding.code = '410546004').count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '42293') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '15342') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').exists().not()).where(reasonCode.exists().not()).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '42293') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '15342') ))).where(reasonCode.coding.code = '112251000146103').count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '42293') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '15342') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').value.coding.code = '410546004').count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '17205') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '41092') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').exists().not()).count() = 2"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '17205') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '41092') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').value.coding.code = '385655000').count() = 2"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '43044') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '96938') ))).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '25410') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '66478') ))).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '105678') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '141992') ))).where(reasonCode.exists().not()).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '105678') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '141992') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').value.coding.code = '385655000').count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '105678') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '141992') ))).where(reasonCode.coding.code = '112261000146100').count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '43044') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '96938') ))).where(dosageInstruction.count() = 2).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '5738') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '16322') ))).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '123315') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '155616') ))).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '485') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '1341') ))).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '485') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '1341') ))).where(modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/ext-StopType').value.coding.code = '410546004').count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '485') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '1341') ))).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where((( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '43044') ) and ( (medication.where($this is CodeableConcept).coding | medication.where($this is Reference).resolve().code.coding).exists(code = '96938') ))).count() = 3"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '68632|urn:oid:2.16.840.1.113883.2.4.4.10' (ACETYLSALICYLZUUR DISPERTABLET 80MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '68632')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '485|urn:oid:2.16.840.1.113883.2.4.4.10' (AMANTADINE CAPSULE 100MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '485')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '123315|urn:oid:2.16.840.1.113883.2.4.4.10' (AMLODIPINE TABLET 5MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '123315')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '105678|urn:oid:2.16.840.1.113883.2.4.4.10' (APIXABAN TABLET 5MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '105678')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '17205|urn:oid:2.16.840.1.113883.2.4.4.10' (FENETICILLINE CAPSULE 500MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '17205')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '42293|urn:oid:2.16.840.1.113883.2.4.4.10' (FERROFUMARAAT TABLET 200MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '42293')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '5967|urn:oid:2.16.840.1.113883.2.4.4.10' (FUROSEMIDE 40MG TABLET)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '5967')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '25410|urn:oid:2.16.840.1.113883.2.4.4.10' (MEFLOQUINE TABLET 250MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '25410')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '43044|urn:oid:2.16.840.1.113883.2.4.4.10' (PANTOPRAZOL 40MG TABLET MSR)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '43044')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Medication resource that contains code '5738|urn:oid:2.16.840.1.113883.2.4.4.10' (PROPRANOLOL TABLET 80MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '5738')).count() = 1"/>
            <sourceId value="transaction-response"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
</TestScript>
