<?xml version="1.0" encoding="UTF-8"?>
<TestScript xmlns="http://hl7.org/fhir" xmlns:nts="http://nictiz.nl/xsl/testscript">
   <id value="mp9-meddata-send-6-x"/>
   <url value="http://nictiz.nl/fhir/TestScript/mp9-meddata-send-6-x"/>
   <version value="r4-mp9-3.0.0-beta-patchlevel 2025.31"/>
   <name value="MP9 - Client - Scenario 6.x - Send MedicationData - MA-Scenarioset6"/>
   <status value="active"/>
   <publisher value="Nictiz"/>
   <contact>
      <name value="Nictiz"/>
      <telecom>
         <system value="email"/>
         <value value="kwalificatie@nictiz.nl"/>
         <use value="work"/>
      </telecom>
   </contact>
   <description value="Scenario 6.x - Send MedicationData for G. XXX_Hemsbergen."/>
   <origin>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="true"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types"/>
         <code value="FHIR-Client"/>
      </profile>
   </origin>
   <destination>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="false"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types"/>
         <code value="FHIR-Server"/>
      </profile>
   </destination>
   <profile id="Bundle-profile"
            value="http://hl7.org/fhir/StructureDefinition/Bundle"/>
   <test id="scenario6-x-send-meddata">
      <name value="Scenario 6.x"/>
      <description value="Send MedicationData in a transaction Bundle"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="transaction"/>
            </type>
            <description value="Test client to POST a Bundle of type transaction."/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <responseId value="transaction-response-fixture"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that request Bundle is of type transaction."/>
            <direction value="request"/>
            <expression value="Bundle.type = 'transaction'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="request"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="request"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="request"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="request"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="request"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="request"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="request"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all resources that are updated contain a Resource.id and a fullUrl."/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(request.method='PUT').all( $this.fullUrl.exists() and $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all resources that are created don't contain a Resource.id. Warning only because it not forbidden, however, the resource does not need to have an id element. If an id is provided, the server SHALL ignore it."/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(request.method='POST').all($this.resource.id.exists().not())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all resources that are created don't have a RESTful fullUrl."/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(request.method='POST').all( $this.fullUrl.startsWith('http://').not() and $this.fullUrl.startsWith('https://').not() )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all resources that are created don't have a fullUrl or have a UUID or OID based fullUrl."/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(request.method='POST').fullUrl.all( exists().not or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all posted resources except Binary contain a meta.profile tag."/>
            <direction value="request"/>
            <expression value="Bundle.entry.resource.where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-stopTestOnFail">
               <valueBoolean value="true"/>
            </extension>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 18 MedicationRequest resource(s). "/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(resource.is(MedicationRequest)).count() = 18"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 17 Medication resource(s). "/>
            <direction value="request"/>
            <expression value="Bundle.entry.where(resource.is(Medication)).count() = 17"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="scenario6-x-send-meddata-identification">
      <name value="Resource identification"/>
      <description value="Checks if all resources specified by the scenario can be identified unambiguously."/>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '48291') and coding.exists(code = '102164'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '68519') and coding.exists(code = '117080'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '67903') and coding.exists(code = '2194'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '226866') and coding.exists(code = '195758'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '20850') and coding.exists(code = '51233'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '72664') and coding.exists(code = '119903'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '1090') and coding.exists(code = '3816'))).where(dosageInstruction.timing.repeat.extension.where(url = 'http://hl7.org/fhir/StructureDefinition/timing-exact').value = true).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '55050') and coding.exists(code = '109398'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '77038') and coding.exists(code = '123129'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '16292') and coding.exists(code = '39578'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '16705') and coding.exists(code = '73466'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '42773') and coding.exists(code = '23086'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '94692') and coding.exists(code = '134538'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '228427') and coding.exists(code = '196738'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '3956') and coding.exists(code = '12548'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '1090') and coding.exists(code = '3816'))).where(dosageInstruction.timing.repeat.extension.where(url = 'http://hl7.org/fhir/StructureDefinition/timing-exact').value = false).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '106720') and coding.exists(code = '142697'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.resolve().code.where(coding.exists(code = '8311') and coding.exists(code = '23817'))).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '3956|urn:oid:2.16.840.1.113883.2.4.4.10' (ACETYLSALICYLZUUR TABLET 100MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '3956')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '68519|urn:oid:2.16.840.1.113883.2.4.4.10' (AMOXICILLINE DISPERTABLET 500MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '68519')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '226866|urn:oid:2.16.840.1.113883.2.4.4.10' (Cetomacrogolcreme met vaseline 10%)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '226866')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '42773|urn:oid:2.16.840.1.113883.2.4.4.10' (CODEINE TABLET 10MG (FOSFAAT))"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '42773')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '16292|urn:oid:2.16.840.1.113883.2.4.4.10' (ETHINYLESTRADIOL/DESOGESTREL TABLET 30/150UG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '16292')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '77038|urn:oid:2.16.840.1.113883.2.4.4.10' (EZETIMIB/SIMVASTATINE 10/20)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '77038')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '16705|urn:oid:2.16.840.1.113883.2.4.4.10' (Fusidinezuur creme 20mg/g)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '16705')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '106720|urn:oid:2.16.840.1.113883.2.4.4.10' (FYTOMENADION TABLET 1MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '106720')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '55050|urn:oid:2.16.840.1.113883.2.4.4.10' (IMIQUIMOD 50MG/G CREME)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '55050')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '1090|urn:oid:2.16.840.1.113883.2.4.4.10' (METFORMINE 500MG TABLET)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '1090')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '48291|urn:oid:2.16.840.1.113883.2.4.4.10' (MIZOLASTINE TABLET MGA  10MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '48291')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '94692|urn:oid:2.16.840.1.113883.2.4.4.10' (MORFINE INFVLST 5MG/ML CAS 100ML)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '94692')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '20850|urn:oid:2.16.840.1.113883.2.4.4.10' (NAPROXEN 500MG TABLET)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '20850')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '228427|urn:oid:2.16.840.1.113883.2.4.4.10' (NITROGLYCERINE PLEISTER 5MG/24UUR (DEPONIT T))"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '228427')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '67903|urn:oid:2.16.840.1.113883.2.4.4.10' (PARACETAMOL 500MG TABLET)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '67903')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '72664|urn:oid:2.16.840.1.113883.2.4.4.10' (WATERSTOFPEROXIDE CONC VOOR MONDSPOELING 30MG/ML)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '72664')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the request Bundle contains 1 Medication resource that contains code '8311|urn:oid:2.16.840.1.113883.2.4.4.10' (PREDNISON TABLET 5MG)"/>
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.coding.exists(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '8311')).count() = 1"/>
            <sourceId value="transaction-request"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
</TestScript>
