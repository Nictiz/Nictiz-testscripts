<?xml version="1.0" encoding="UTF-8"?>
<TestScript xmlns="http://hl7.org/fhir" xmlns:nts="http://nictiz.nl/xsl/testscript">
   <id value="gbz-fhir3-0-2-ikz-xis-4-1-CheckContent-json"/>
   <meta>
      <profile value="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript"/>
   </meta>
   <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-rule">
      <extension url="ruleId">
         <valueId value="assert-response-queryParamsInSelfLink"/>
      </extension>
      <extension url="path">
         <valueString value="../_reference/rules/assert_response_queryParamsInSelfLink.groovy"/>
      </extension>
   </extension>
   <url value="http://nictiz.nl/fhir/TestScript/gbz-fhir3-0-2-ikz-xis-4-1-CheckContent-json"/>
   <version value="stu3-3.0-patchlevel 2025-02"/>
   <name value="Nictiz Geboortezorg - Server - Scenario 4.1 - Serve Integrale Zwangerschapskaart resources of fifth pregnancy of Maaike Ostendorf - target CheckContent - JSON Format"/>
   <status value="active"/>
   <publisher value="Nictiz"/>
   <contact>
      <name value="Nictiz"/>
      <telecom>
         <system value="email"/>
         <value value="kwalificatie@nictiz.nl"/>
         <use value="work"/>
      </telecom>
   </contact>
   <description value="Scenario 4.1: Serve Integrale Zwangerschapskaart resources of fifth pregnancy of Maaike Ostendorf"/>
   <origin>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="false"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types"/>
         <code value="FHIR-Client"/>
      </profile>
   </origin>
   <destination>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="true"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types"/>
         <code value="FHIR-Server"/>
      </profile>
   </destination>
   <profile id="Bundle-profile"
            value="http://hl7.org/fhir/StructureDefinition/Bundle"/>
   <variable>
      <name value="patient-token-id"/>
      <defaultValue value="Bearer 7f2b9c79-1c82-4883-aa93-5d0c7b1afd41"/>
      <description value="OAuth Token for current patient"/>
   </variable>
   <variable>
      <name value="episode-id"/>
      <description value="This variable needs to be filled with the following params. The name (the variable name), sourceId (id of the resource) and as resource EpisodeOfCare should be filled in"/>
      <expression value="Bundle.entry.where(resource.is(EpisodeOfCare)).resource.where(type.coding.code='364320009').id"/>
      <sourceId value="fixture-5-ServeMaternalRecord"/>
   </variable>
   <variable>
      <name value="T"/>
      <defaultValue value="${CURRENTDATE}"/>
   </variable>
   <variable>
      <name value="X-Correlation-ID"/>
      <defaultValue value="${UUID}"/>
      <description value="X-Correlation-ID, by default a UUID following the MedMij Afsprakenstelsel. Does not have to be edited, see https://nictiz.atlassian.net/browse/MM-5132 for more information"/>
   </variable>
   <variable>
      <name value="MAAIKE-M-XXX-OSTENDORF-id"/>
      <description value="Resource.id for Patient 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).id'-->
      <expression value="Bundle.entry.resource.where($this is Patient).id"/>
      <sourceId value="fixture-1-ServeWoman"/>
   </variable>
   <variable>
      <name value="f0eb00a7-6b73-11ec-0000-020000000000-id"/>
      <description value="Resource.id for EpisodeOfCare 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).id'-->
      <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).id"/>
      <sourceId value="fixture-5-ServeMaternalRecord"/>
   </variable>
   <variable>
      <name value="73009ab7-6b6e-11ec-2334-020000000000-id"/>
      <description value="Resource.id for Condition 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code=118185001))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code=118185001))).id"/>
      <sourceId value="fixture-6-ServeConditions"/>
   </variable>
   <variable>
      <name value="b645daeb-6b3a-11ec-2118-020000000000-id"/>
      <description value="Resource.id for Condition 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code=307534009))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code=307534009))).id"/>
      <sourceId value="fixture-6-ServeConditions"/>
   </variable>
   <variable>
      <name value="7b035f27-6b20-11ec-1275-020000000000-id"/>
      <description value="Resource.id for Encounter 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(type.where(coding.code=11429006)).id'-->
      <expression value="Bundle.entry.resource.where($this is Encounter).where(type.where(coding.code=11429006)).id"/>
      <sourceId value="fixture-7-ServeEncounters"/>
   </variable>
   <variable>
      <name value="31c97a0f-6b0f-11ec-1071-020000000000-id"/>
      <description value="Resource.id for Encounter 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(type.where(coding.code=236973005)).id'-->
      <expression value="Bundle.entry.resource.where($this is Encounter).where(type.where(coding.code=236973005)).id"/>
      <sourceId value="fixture-7-ServeEncounters"/>
   </variable>
   <variable>
      <name value="29075b0f-6b4e-11ec-2166-020000000000-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8302-2'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8302-2'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="1fe6b9a2-6b0b-11ec-2342-020000000000-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8302-2'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8302-2'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="e9364c2c-6aa1-11ec-1069-020000000000-id"/>
      <description value="Resource.id for Observation 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='57036006')) and value.where(value='279')).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='57036006')) and value.where(value='279')).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="2ea20e79-6b24-11ec-2702-020000000000-id"/>
      <description value="Resource.id for Observation 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code=57036006)) and value.where(value='59')).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code=57036006)) and value.where(value='59')).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="0b3cf52f-6abb-11ec-2334-020000000000-id"/>
      <description value="Resource.id for Observation 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code=57036006)) and value.where(value='99999')).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code=57036006)) and value.where(value='99999')).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="67c89ac3-6b0f-11ec-2334-020000000000-id"/>
      <description value="Resource.id for Observation 6"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='11977-6'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='11977-6'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="ba5d6097-6b0b-11ec-2334-020000000000-id"/>
      <description value="Resource.id for Observation 7"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='11996-6'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='11996-6'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="dbfceeb8-6b47-11ec-2334-020000000000-id"/>
      <description value="Resource.id for Observation 8"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='161714006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='161714006'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="3beb7505-6aef-11ec-2335-020000000000-id"/>
      <description value="Resource.id for Observation 9"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8665-2'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8665-2'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="9269ecf3-6b11-11ec-2222-020000000000-id"/>
      <description value="Resource.id for Observation 10"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='147781000146105'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='147781000146105'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="568b74ef-6b1b-11ec-2181-020000000000-id"/>
      <description value="Resource.id for Observation 11"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='16216731000119106'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='16216731000119106'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="c2371ac3-6b52-11ec-2173-020000000000-id"/>
      <description value="Resource.id for Observation 12"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='143881000146107'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='143881000146107'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="04851afc-6b40-11ec-2225-020000000000-id"/>
      <description value="Resource.id for Observation 13"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='142961000146102'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='142961000146102'))).id"/>
      <sourceId value="fixture-8a-ServeObservations"/>
   </variable>
   <variable>
      <name value="00b2da4e-6b30-11ec-1212-020000000000-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='228273003'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='228273003'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="edfa0f8f-6b43-11ec-2224-020000000000-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='365980008'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='365980008'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="f3ac1e80-6b09-11ec-1211-020000000000-id"/>
      <description value="Resource.id for Observation 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='228366006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='228366006'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="7365c49b-6ace-11ec-2107-020000000000-id"/>
      <description value="Resource.id for Observation 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='29463-7'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='29463-7'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="21f4f183-6aa4-11ec-2106-020000000000-id"/>
      <description value="Resource.id for Observation 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='85354-9'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='85354-9'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="79f3bfeb-6b1b-11ec-2410-020000000000-id"/>
      <description value="Resource.id for Observation 6"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='289251005'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='289251005'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="cd876e13-6ab8-11ec-2409-020000000000-id"/>
      <description value="Resource.id for Observation 7"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='160611000146102'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='160611000146102'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="454a2d13-6a9c-11ec-2408-020000000000-id"/>
      <description value="Resource.id for Observation 8"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='160621000146107'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='160621000146107'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="b3d83f0b-6b76-11ec-2412-020000000000-id"/>
      <description value="Resource.id for Observation 9"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='168089007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='168089007'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="70e3c65d-6ab9-11ec-2419-020000000000-id"/>
      <description value="Resource.id for Observation 10"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='366344009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='366344009'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="ad4eda44-6aa8-11ec-2414-020000000000-id"/>
      <description value="Resource.id for Observation 11"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364336006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364336006'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="2ed14cf4-6b34-11ec-2396-020000000000-id"/>
      <description value="Resource.id for Observation 12"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364332008'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364332008'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="61a43e0e-6b16-11ec-2416-020000000000-id"/>
      <description value="Resource.id for Observation 13"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='271692001'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='271692001'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="5f63630b-6b53-11ec-2413-020000000000-id"/>
      <description value="Resource.id for Observation 14"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='249163006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='249163006'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="684ffb15-6aaa-11ec-2395-020000000000-id"/>
      <description value="Resource.id for Observation 15"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='609625009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='609625009'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="2c9c7a0f-6add-11ec-2421-020000000000-id"/>
      <description value="Resource.id for Observation 16"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='236994008'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='236994008'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="d6fda78b-6aeb-11ec-2423-020000000000-id"/>
      <description value="Resource.id for Observation 17"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='136311000146100'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='136311000146100'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="b02d12f7-6b47-11ec-2424-020000000000-id"/>
      <description value="Resource.id for Observation 18"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364343000'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364343000'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="ea91873b-6b13-11ec-2427-020000000000-id"/>
      <description value="Resource.id for Observation 19"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364351002'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364351002'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="832a4629-6b23-11ec-2429-020000000000-id"/>
      <description value="Resource.id for Observation 20"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='249191003'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='249191003'))).id"/>
      <sourceId value="fixture-8b-ServeObservations"/>
   </variable>
   <variable>
      <name value="44fcd4ef-6b10-11ec-2123-020000000000-id"/>
      <description value="Resource.id for Procedure 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='236973005'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='236973005'))).id"/>
      <sourceId value="fixture-9-ServeProcedures"/>
   </variable>
   <variable>
      <name value="ddfa6a3f-6b07-11ec-2123-020000000000-id"/>
      <description value="Resource.id for Procedure 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='3950001'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='3950001'))).id"/>
      <sourceId value="fixture-9-ServeProcedures"/>
   </variable>
   <variable>
      <name value="7e6e4e27-6ae1-11ec-2154-020000000000-id"/>
      <description value="Resource.id for Procedure 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='236960006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='236960006'))).id"/>
      <sourceId value="fixture-9-ServeProcedures"/>
   </variable>
   <variable>
      <name value="07492dbf-6aa7-11ec-2108-020000000000-id"/>
      <description value="Resource.id for Procedure 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='112697007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='112697007'))).id"/>
      <sourceId value="fixture-9-ServeProcedures"/>
   </variable>
   <variable>
      <name value="dbfbda17-6ab3-11ec-2108-020000000000-id"/>
      <description value="Resource.id for Procedure 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='12658000'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='12658000'))).id"/>
      <sourceId value="fixture-9-ServeProcedures"/>
   </variable>
   <variable>
      <name value="relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id"/>
      <description value="Resource.id for RelatedPerson 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).id'-->
      <expression value="Bundle.entry.resource.where($this is RelatedPerson).id"/>
      <sourceId value="fixture-12-RelatedPerson"/>
   </variable>
   <test id="1-ServeWoman">
      <name value="1-ServeWoman"/>
      <description value="Query Patient resource for HCIM Patient"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Patient"/>
            <description value="Test XIS server to serve Patient resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-1-ServeWoman"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Patient resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Patient)).count() &gt;= 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="1-ServeWoman - Check Patient"/>
      <description value="Check if the previous operation results in a FHIR Patient that contains the values that are expected following Nictiz' materials (fixture .id: MAAIKE-M-XXX-OSTENDORF)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Patient"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Patient).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Patient resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-patient' and .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-Woman'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').meta.where(profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-patient') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-Woman')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').meta.where(profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-patient') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-Woman')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://fhir.nl/fhir/StructureDefinition/nl-core-preferred-pharmacy' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').extension('http://fhir.nl/fhir/StructureDefinition/nl-core-preferred-pharmacy').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').extension('http://fhir.nl/fhir/StructureDefinition/nl-core-preferred-pharmacy').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/bc-patient-ethnicity' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.13.28' and .code '12' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').extension('http://nictiz.nl/fhir/StructureDefinition/bc-patient-ethnicity').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.13.28' and code = '12' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').extension('http://nictiz.nl/fhir/StructureDefinition/bc-patient-ethnicity').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.13.28' and code = '12' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .name with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-assembly-order' with .valueCode 'NL1' and .text with a value, and .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value, and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.ofType(code) = 'NL1' and text.hasValue() and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.where($this is code) = 'NL1' and text.hasValue() and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-1"/>
            <description value="Contains .name.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-assembly-order' with .valueCode 'NL1'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.ofType(code) = 'NL1').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.where($this is code) = 'NL1').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-2"/>
            <description value="Contains .name.text with a value. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-3"/>
            <description value="Contains .name.family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-3-1"/>
            <description value="Contains .name.family with a value. This assert checks only one child. Assert 1-5-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(family.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(family.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-3-2"/>
            <description value="Contains .name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-5-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-4"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-4-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-5-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-4-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-5-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-5"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-5-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-5-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-5-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-5-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .telecom with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display and .system 'phone', and .value with a value, and .use 'home'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-1"/>
            <description value="Contains .telecom.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-2"/>
            <description value="Contains .telecom.system 'phone'. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(system = 'phone').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(system = 'phone').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-4"/>
            <description value="Contains .telecom.use 'home'. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .telecom with .system 'email', and .value with a value, and .use 'home'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(system = 'email' and value.hasValue() and use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(system = 'email' and value.hasValue() and use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .telecom.system 'email'. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(system = 'email').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(system = 'email').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-2"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-3"/>
            <description value="Contains .telecom.use 'home'. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').telecom.where(use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .gender 'female' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AdministrativeGender' and .code 'F' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').gender.where($this = 'female' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').gender.where($this = 'female' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .gender 'female'. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').gender = 'female''-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').gender = 'female'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .gender.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AdministrativeGender' and .code 'F' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').gender.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').gender.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .birthDate"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').birthDate.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').birthDate.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .address with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'PHYS' and .display and .use 'home', and .type 'physical', and .line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value, and .city with a value, and .district with a value, and .postalCode with a value, and .country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display) and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display) and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-1"/>
            <description value="Contains .address.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'PHYS' and .display. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-2"/>
            <description value="Contains .address.use 'home'. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-3"/>
            <description value="Contains .address.type 'physical'. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(type = 'physical').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(type = 'physical').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-4"/>
            <description value="Contains .address.line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-4-1"/>
            <description value="Contains .address.line with a value. This assert checks only one child. Assert 1-10-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-4-2"/>
            <description value="Contains .address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value. This assert checks only one child. Assert 1-10-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-4-3"/>
            <description value="Contains .address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-10-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-5"/>
            <description value="Contains .address.city with a value. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(city.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(city.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-6"/>
            <description value="Contains .address.district with a value. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(district.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(district.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-7"/>
            <description value="Contains .address.postalCode with a value. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(postalCode.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(postalCode.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-8"/>
            <description value="Contains .address.country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display)).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display)).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-8-1"/>
            <description value="Contains .address.country with a value. This assert checks only one child. Assert 1-10-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(country.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(country.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-8-2"/>
            <description value="Contains .address.country.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks only one child. Assert 1-10-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').address.where(country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11"/>
            <description value="Contains .generalPractitioner with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-1"/>
            <description value="Contains .generalPractitioner.extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-1"/>
            <description value="Contains .generalPractitioner with either .reference or .identifier and .display. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').generalPractitioner.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MAAIKE-M-XXX-OSTENDORF-id}').generalPractitioner.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="2-ServePayer">
      <name value="2-ServePayer"/>
      <description value="Query Coverage resource for HCIM Payer"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Coverage"/>
            <description value="Test XIS server to serve Coverage resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 0 Coverage resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Coverage)).count() &gt;= 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="4-ServeDeviceUseStatement">
      <name value="4-ServeDeviceUseStatement"/>
      <description value="Query DeviceUseStatement resource for HCIM BladderFunction-UrineCatheter"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="DeviceUseStatement"/>
            <description value="Test XIS server to serve DeviceUseStatement resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_include=DeviceUseStatement:device"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 0 DeviceUseStatement resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(DeviceUseStatement)).count() &gt;= 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="5-ServeMaternalRecord">
      <name value="5-ServeMaternalRecord"/>
      <description value="Test Server query operation for MaternalRecord (EpisodeOfCare) including managing organization (Organization) and care manager (Practitioner)"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="EpisodeOfCare"/>
            <description value="Test XIS server to serve EpisodeOfCare resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?type=http://snomed.info/sct|364320009&amp;_include=EpisodeOfCare:organization&amp;_include=EpisodeOfCare:care-manager"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-5-ServeMaternalRecord"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 EpisodeOfCare resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(EpisodeOfCare)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Organization resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Organization)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Practitioner resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Practitioner)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="5-ServeMaternalRecord - Check EpisodeOfCare"/>
      <description value="Check if the previous operation results in a FHIR EpisodeOfCare that contains the values that are expected following Nictiz' materials (fixture .id: f0eb00a7-6b73-11ec-0000-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 EpisodeOfCare"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="EpisodeOfCare resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-episodeofcare' and .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalRecord'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').meta.where(profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-episodeofcare') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalRecord')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').meta.where(profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-episodeofcare') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalRecord')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with . and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').identifier.where({$_EXPR}).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').identifier.where({$_EXPR}).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'finished'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').status = 'finished''-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').status = 'finished'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .type with .coding with .system 'http://snomed.info/sct' and .code '364320009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').type.where(coding.where(system = 'http://snomed.info/sct' and code = '364320009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').type.where(coding.where(system = 'http://snomed.info/sct' and code = '364320009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .diagnosis with .condition with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .managingOrganization with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').managingOrganization.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').managingOrganization.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .period with .start and .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').period.where(start and end).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').period.where(start and end).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .careManager with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').careManager.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').careManager.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-1"/>
            <description value="Contains .careManager.extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').careManager.extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').careManager.extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-1"/>
            <description value="Contains .careManager with either .reference or .identifier and .display. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').careManager.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is EpisodeOfCare).where(id = '${f0eb00a7-6b73-11ec-0000-020000000000-id}').careManager.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="6-ServeConditions">
      <name value="6-ServeConditions"/>
      <description value="Test Server query operation for Conditions (including Pregnancy)"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Condition"/>
            <description value="Test XIS server to serve Condition resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?context=EpisodeOfCare/${episode-id}"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-6-ServeConditions"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <!-- Zwangerschap -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Condition resource(s) with code http://snomed.info/sct | 118185001. (Zwangerschap)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Condition)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '118185001').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--Urineweginfectie-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 2 Condition resource(s) with code http://snomed.info/sct | 307534009. (urineweginfectie)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Condition)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '307534009').count()=2).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: maar 1 gevonden -->
      <!--      <nts:contentAsserts href="mm-gbz-zib-Problem-307534009-15d62dff-ce82-441b-a869-fff08072e790.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code=307534009))</nts:discriminator>
         <nts:discriminator>category.where(coding.code=404684003)</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- TODO: onderstaande niet gevonden -->
      <!-- eerstegraads perineumruptuur durante partu -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Condition resource(s) with code http://snomed.info/sct | 199916005. (eerstegraads perineumruptuur durante partu)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Condition)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '199916005').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--      <nts:contentAsserts href="mm-gbz-bc-DisorderOfLaborAndDelivery-199916005-ad8b1fbe-0c97-4672-86e4-84e9184ca0da.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code=199916005))</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- toestand van patiënt verslechterd -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Condition resource(s) with code http://snomed.info/sct | 271299001. (toestand van patiënt verslechterd)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Condition)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '271299001').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--      <nts:contentAsserts href="mm-gbz-bc-DisorderOfLaborAndDelivery-271299001-ad8b1fbe-0c97-4672-86e4-84e9184ca0da00000.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code=271299001))</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- TODO: onderstaande niet gevonden -->
      <!-- Asthma -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Condition resource(s) with code http://snomed.info/sct | 195967001. (asthma)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Condition)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '195967001').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--      <nts:contentAsserts href="mm-gbz-zib-Problem-195967001-ed1da260-caf2-4a32-9eec-bee070246239.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code=195967001))</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- pyelonephritis -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Condition resource(s) with code http://snomed.info/sct | 45816000. (pyelonephritis)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Condition)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '45816000').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--      <nts:contentAsserts href="mm-gbz-zib-Problem-45816000-7d594516-c33f-4cb3-80c8-5e74c8a5bf68.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code=45816000))</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- colitis ulcerosa -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Condition resource(s) with code http://snomed.info/sct | 64766004. (colitis ulcerosa)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Condition)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '64766004').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--      <nts:contentAsserts href="mm-gbz-zib-Problem-64766004-7e958633-3ac4-4742-9968-c7d3b52f21e9.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code=64766004))</nts:discriminator>
      </nts:contentAsserts>-->
   </test>
   <test>
      <name value="6-ServeConditions - Check Condition 1"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: 73009ab7-6b6e-11ec-2334-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code=118185001))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code=118185001))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code=118185001))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code=118185001))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .clinicalStatus 'inactive'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').clinicalStatus = 'inactive''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').clinicalStatus = 'inactive'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '118185001' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '118185001' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '118185001' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${73009ab7-6b6e-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="6-ServeConditions - Check Condition 2"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: b645daeb-6b3a-11ec-2118-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code=307534009))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code=307534009))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code=307534009))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code=307534009))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem' and .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DisorderOfPregnancy'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DisorderOfPregnancy')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DisorderOfPregnancy')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .extension with url 'http://hl7.org/fhir/StructureDefinition/condition-partOf' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').extension('http://hl7.org/fhir/StructureDefinition/condition-partOf').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').extension('http://hl7.org/fhir/StructureDefinition/condition-partOf').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .clinicalStatus 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '173300003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '173300003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '173300003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${b645daeb-6b3a-11ec-2118-020000000000-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="7-ServeEncounters">
      <name value="7-ServeEncounters"/>
      <description value="Test Server query operation for Encounters"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Encounter"/>
            <description value="Test XIS server to serve Encounter resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?episodeofcare=${episode-id}&amp;_include=Encounter:practitioner"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-7-ServeEncounters"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 2 Encounter resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Encounter)).count() = 2"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Practitioner resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Practitioner)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- Prenatale controle -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Encounter resource(s) that contains type.coding.code = 11429006. (ContactSoort)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.select(resource as Encounter).where(type.coding.code.where($this='11429006').exists()).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- patusassistentie-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Encounter resource(s) that contains type.coding.code = 236973005. (ContactSoort)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.select(resource as Encounter).where(type.coding.code.where($this='236973005').exists()).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="7-ServeEncounters - Check Encounter 1"/>
      <description value="Check if the previous operation results in a FHIR Encounter that contains the values that are expected following Nictiz' materials (fixture .id: 7b035f27-6b20-11ec-1275-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Encounter"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(type.where(coding.code=11429006)).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(type.where(coding.code=11429006)).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Encounter resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(type.where(coding.code=11429006)).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(type.where(coding.code=11429006)).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter' and .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-Encounter'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-Encounter')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-Encounter')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'finished'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').status = 'finished''-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').status = 'finished'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .class with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display and .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').class.where(extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display) and system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').class.where(extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display) and system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-1"/>
            <description value="Contains .class.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').class.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').class.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-1"/>
            <description value="Contains .class with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .type with .coding with .system 'http://snomed.info/sct' and .code '11429006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').type.where(coding.where(system = 'http://snomed.info/sct' and code = '11429006' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').type.where(coding.where(system = 'http://snomed.info/sct' and code = '11429006' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .episodeOfCare with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').episodeOfCare.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').episodeOfCare.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .participant with .type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .individual with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .participant.type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .participant.type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-3"/>
            <description value="Contains .participant.individual with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-3-1"/>
            <description value="Contains .participant.individual.extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display. This assert checks only one child. Assert 1-8-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(individual.extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(individual.extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-3-2"/>
            <description value="Contains .participant.individual with either .reference or .identifier and .display. This assert checks only one child. Assert 1-8-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(individual.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').participant.where(individual.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .period with .start and .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').period.where(start and end).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').period.where(start and end).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .reason with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/bc-encounter-reasonreference' with .valueReference with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').reason.where(extension('http://nictiz.nl/fhir/StructureDefinition/bc-encounter-reasonreference').value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').reason.where(extension('http://nictiz.nl/fhir/StructureDefinition/bc-encounter-reasonreference').value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11"/>
            <description value="Contains .diagnosis with .condition with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${7b035f27-6b20-11ec-1275-020000000000-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="7-ServeEncounters - Check Encounter 2"/>
      <description value="Check if the previous operation results in a FHIR Encounter that contains the values that are expected following Nictiz' materials (fixture .id: 31c97a0f-6b0f-11ec-1071-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Encounter"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(type.where(coding.code=236973005)).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(type.where(coding.code=236973005)).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Encounter resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(type.where(coding.code=236973005)).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(type.where(coding.code=236973005)).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter' and .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-ChildBirthAssistance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-ChildBirthAssistance')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-ChildBirthAssistance')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .status 'finished'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').status = 'finished''-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').status = 'finished'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .class with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'SS' and .display and .system 'http://hl7.org/fhir/v3/ActCode' and .code 'SS' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').class.where(extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display) and system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').class.where(extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display) and system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4-1"/>
            <description value="Contains .class.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'SS' and .display. This assert checks only one child. Assert 2-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').class.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').class.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4-1"/>
            <description value="Contains .class with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'SS' and .display. This assert checks only one child. Assert 2-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'SS' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .type with .coding with .system 'http://snomed.info/sct' and .code '236973005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').type.where(coding.where(system = 'http://snomed.info/sct' and code = '236973005' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').type.where(coding.where(system = 'http://snomed.info/sct' and code = '236973005' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .episodeOfCare with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').episodeOfCare.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').episodeOfCare.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .participant with .type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .individual with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-1"/>
            <description value="Contains .participant.type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 2-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-2"/>
            <description value="Contains .participant.type with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 2-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(type.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-3"/>
            <description value="Contains .participant.individual with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display. This assert checks only one child. Assert 2-8 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(individual.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-3-1"/>
            <description value="Contains .participant.individual.extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display. This assert checks only one child. Assert 2-8-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(individual.extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(individual.extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-3-2"/>
            <description value="Contains .participant.individual with either .reference or .identifier and .display. This assert checks only one child. Assert 2-8-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(individual.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${31c97a0f-6b0f-11ec-1071-020000000000-id}').participant.where(individual.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="8a-ServeObservations">
      <name value="8a-ServeObservations"/>
      <description value="Test Server query operation for Observations"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test XIS server to serve Observation resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?context=EpisodeOfCare/${episode-id}"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-8a-ServeObservations"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <!-- lichaamslengte -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 8302-2. (lichaamslengte)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '8302-2').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- bmi -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 39156-5. (lichaamslengte)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '39156-5').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- pregnancy duration -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 3 Observation resource(s) with code http://snomed.info/sct | 57036006. (pregnancy duration)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '57036006').count()=3).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- pariteit-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 11977-6. (parity)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '11977-6').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- Graviditeit -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 11996-6. (gravidity)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '11996-6').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- a terme datum -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 161714006. (a terme datum)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '161714006').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- datum laatste menstruatie -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 8665-2. (datum laatste menstruatie)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '8665-2').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- definitieve a terme datum -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 147781000146105. (definitieve a terme datum)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '147781000146105').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- voorgeschiedenis intrauteriene foetale dood -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 16216731000119106. (voorgeschiedenis intrauteriene foetale dood)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '16216731000119106').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- aantal levende nakomelingen -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 143881000146107. (aantal levende nakomelingen)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '143881000146107').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- datum einde zwangerschap -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 118951000146109. (datum einde zwangerschap)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '118951000146109').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: niet gevonden -->
      <!--      <nts:contentAsserts href="mm-gbz-bc-PregnancyObservation-118951000146109-85071e45-6439-4214-9b38-9738bb21891b.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code='118951000146109'))</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- voorkeur plaats bevalling -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 142961000146102. (voorkeur plaats bevalling)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '142961000146102').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--perinatale sterfte -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 276507005. (perinatale sterfte)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '276507005').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: perinatale sterfte niet gevonden -->
      <!--rhesus C-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 1159-3. (rhesus c)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '1159-3').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: niet gevonden -->
      <!--      <nts:contentAsserts href="mm-gbz-zib-LaboratoryTestResult-Observation-1159-3-73e45b34-0fc7-4dae-b0f5-271a4fda7b53.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code='1159-3'))</nts:discriminator>
      </nts:contentAsserts>-->
      <!--Rhesus D-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 1305-2. (rhesus d)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '1305-2').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: niet gevonden -->
      <!--      <nts:contentAsserts href="mm-gbz-zib-LaboratoryTestResult-Observation-1305-2-df436146-56f2-4717-8797-70ed7686a04a.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code='1305-2'))</nts:discriminator>
      </nts:contentAsserts>-->
      <!--bloedgroep-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 883-9. (bloedgroep)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '883-9').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: niet gevonden -->
      <!--      <nts:contentAsserts href="mm-gbz-zib-LaboratoryTestResult-Observation-883-9-dcfa568d-c18d-428c-a71e-dd7924f22c65.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code='883-9'))</nts:discriminator>
      </nts:contentAsserts>-->
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 29075b0f-6b4e-11ec-2166-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8302-2'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8302-2'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8302-2'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8302-2'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').code.coding.where(system = 'http://loinc.org' and code = '8302-2' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').code.coding.where(system = 'http://loinc.org' and code = '8302-2' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .valueQuantity with .value '170' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').value.ofType(Quantity).where(value = 170 and unit and system = 'http://unitsofmeasure.org' and code = 'cm').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${29075b0f-6b4e-11ec-2166-020000000000-id}').value.where($this is Quantity).where(value = 170 and unit and system = 'http://unitsofmeasure.org' and code = 'cm').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 1fe6b9a2-6b0b-11ec-2342-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8302-2'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8302-2'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8302-2'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8302-2'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '39156-5' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').code.coding.where(system = 'http://loinc.org' and code = '39156-5' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').code.coding.where(system = 'http://loinc.org' and code = '39156-5' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .valueQuantity with .value '24.2' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg/m2'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').value.ofType(Quantity).where(value = 24.2 and unit and system = 'http://unitsofmeasure.org' and code = 'kg/m2').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${1fe6b9a2-6b0b-11ec-2342-020000000000-id}').value.where($this is Quantity).where(value = 24.2 and unit and system = 'http://unitsofmeasure.org' and code = 'kg/m2').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 3"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: e9364c2c-6aa1-11ec-1069-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='57036006')) and value.where(value='279')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='57036006')) and value.where(value='279')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='57036006')) and value.where(value='279')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='57036006')) and value.where(value='279')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-9"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-11"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-12"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-13"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-14"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-15"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-16"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-17"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-18"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-19"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-20"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-21"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-22"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '57036006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '57036006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '57036006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-23"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-24"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-25"/>
            <description value="Contains .valueQuantity with .value '279' and .unit and .system 'http://unitsofmeasure.org' and .code 'd'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').value.ofType(Quantity).where(value = 279 and unit and system = 'http://unitsofmeasure.org' and code = 'd').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${e9364c2c-6aa1-11ec-1069-020000000000-id}').value.where($this is Quantity).where(value = 279 and unit and system = 'http://unitsofmeasure.org' and code = 'd').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 4"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 2ea20e79-6b24-11ec-2702-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code=57036006)) and value.where(value='59')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code=57036006)) and value.where(value='59')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code=57036006)) and value.where(value='59')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code=57036006)) and value.where(value='59')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-9"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '57036006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '57036006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '57036006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-11"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-12"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-13"/>
            <description value="Contains .valueQuantity with .value '59' and .unit and .system 'http://unitsofmeasure.org' and .code 'd'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').value.ofType(Quantity).where(value = 59 and unit and system = 'http://unitsofmeasure.org' and code = 'd').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ea20e79-6b24-11ec-2702-020000000000-id}').value.where($this is Quantity).where(value = 59 and unit and system = 'http://unitsofmeasure.org' and code = 'd').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 5"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 0b3cf52f-6abb-11ec-2334-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code=57036006)) and value.where(value='99999')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code=57036006)) and value.where(value='99999')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code=57036006)) and value.where(value='99999')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code=57036006)) and value.where(value='99999')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Duration').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/workflow-supportingInfoSTU3').where(value.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-8"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-9"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '57036006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '57036006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '57036006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-10"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-11"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-12"/>
            <description value="Contains .valueQuantity with .value '99999' and .unit and .system 'http://unitsofmeasure.org' and .code 'd'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').value.ofType(Quantity).where(value = 99999 and unit and system = 'http://unitsofmeasure.org' and code = 'd').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${0b3cf52f-6abb-11ec-2334-020000000000-id}').value.where($this is Quantity).where(value = 99999 and unit and system = 'http://unitsofmeasure.org' and code = 'd').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 6"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 67c89ac3-6b0f-11ec-2334-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='11977-6'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='11977-6'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='11977-6'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='11977-6'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Parity'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Parity').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Parity').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '11977-6' and .display and .coding with .system 'http://snomed.info/sct' and .code '364325004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '11977-6' and display) and coding.where(system = 'http://snomed.info/sct' and code = '364325004' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '11977-6' and display) and coding.where(system = 'http://snomed.info/sct' and code = '364325004' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-8"/>
            <description value="Contains .valueString with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${67c89ac3-6b0f-11ec-2334-020000000000-id}').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 7"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: ba5d6097-6b0b-11ec-2334-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='11996-6'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='11996-6'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='11996-6'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='11996-6'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Gravidity'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Gravidity').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-Gravidity').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '11996-6' and .display and .coding with .system 'http://snomed.info/sct' and .code '161732006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '11996-6' and display) and coding.where(system = 'http://snomed.info/sct' and code = '161732006' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '11996-6' and display) and coding.where(system = 'http://snomed.info/sct' and code = '161732006' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-8"/>
            <description value="Contains .valueString with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ba5d6097-6b0b-11ec-2334-020000000000-id}').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 8"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: dbfceeb8-6b47-11ec-2334-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='161714006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='161714006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='161714006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='161714006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '161714006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '161714006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '161714006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-9"/>
            <description value="Contains .valueDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-10"/>
            <description value="Contains .method with .coding with .system 'http://snomed.info/sct' and .code '31541000146106' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').method.coding.where(system = 'http://snomed.info/sct' and code = '31541000146106' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${dbfceeb8-6b47-11ec-2334-020000000000-id}').method.coding.where(system = 'http://snomed.info/sct' and code = '31541000146106' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 9"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 3beb7505-6aef-11ec-2335-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8665-2'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8665-2'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='8665-2'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='8665-2'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-DateLastMenstruation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-DateLastMenstruation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Pregnancy-DateLastMenstruation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '8665-2' and .display and .coding with .system 'http://snomed.info/sct' and .code '21840007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '8665-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '21840007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '8665-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '21840007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-8"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-9"/>
            <description value="Contains .valueDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${3beb7505-6aef-11ec-2335-020000000000-id}').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 10"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 9269ecf3-6b11-11ec-2222-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='147781000146105'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='147781000146105'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='147781000146105'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='147781000146105'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '147781000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '147781000146105' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '147781000146105' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-8"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-9"/>
            <description value="Contains .valueDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-10"/>
            <description value="Contains .method with .coding with .system 'http://snomed.info/sct' and .code '278292003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').method.coding.where(system = 'http://snomed.info/sct' and code = '278292003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${9269ecf3-6b11-11ec-2222-020000000000-id}').method.coding.where(system = 'http://snomed.info/sct' and code = '278292003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 11"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 568b74ef-6b1b-11ec-2181-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='16216731000119106'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='16216731000119106'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='16216731000119106'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='16216731000119106'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '16216731000119106' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '16216731000119106' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '16216731000119106' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-8"/>
            <description value="Contains .valueQuantity with .value '0'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').value.ofType(Quantity).value = 0'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${568b74ef-6b1b-11ec-2181-020000000000-id}').value.where($this is Quantity).value = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 12"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: c2371ac3-6b52-11ec-2173-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='143881000146107'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='143881000146107'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='143881000146107'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='143881000146107'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PregnancyObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '143881000146107' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '143881000146107' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '143881000146107' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-8"/>
            <description value="Contains .valueQuantity with .value '1'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').value.ofType(Quantity).value = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${c2371ac3-6b52-11ec-2173-020000000000-id}').value.where($this is Quantity).value = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8a-ServeObservations - Check Observation 13"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 04851afc-6b40-11ec-2225-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='142961000146102'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='142961000146102'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='142961000146102'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='142961000146102'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-MaternalObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '142961000146102' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '142961000146102' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '142961000146102' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-8"/>
            <description value="Contains .valueCodeableConcept with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/bc-observation-valuereference' with .valueReference with either .reference or .identifier and .display and .coding with .system 'http://snomed.info/sct' and .code '264362003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').value.ofType(CodeableConcept).where(extension('http://nictiz.nl/fhir/StructureDefinition/bc-observation-valuereference').value.ofType(Reference).where((reference or identifier) and display) and coding.where(system = 'http://snomed.info/sct' and code = '264362003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').value.where($this is CodeableConcept).where(extension('http://nictiz.nl/fhir/StructureDefinition/bc-observation-valuereference').value.where($this is Reference).where((reference or identifier) and display) and coding.where(system = 'http://snomed.info/sct' and code = '264362003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-8-1"/>
            <description value="Contains .valueCodeableConcept.extension with url 'http://nictiz.nl/fhir/StructureDefinition/bc-observation-valuereference' with .valueReference with either .reference or .identifier and .display. This assert checks only one child. Assert 13-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').value.ofType(CodeableConcept).extension('http://nictiz.nl/fhir/StructureDefinition/bc-observation-valuereference').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').value.where($this is CodeableConcept).extension('http://nictiz.nl/fhir/StructureDefinition/bc-observation-valuereference').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-8-1"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '264362003' and .display. This assert checks only one child. Assert 13-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').value.ofType(CodeableConcept).where(coding.where(system = 'http://snomed.info/sct' and code = '264362003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${04851afc-6b40-11ec-2225-020000000000-id}').value.where($this is CodeableConcept).where(coding.where(system = 'http://snomed.info/sct' and code = '264362003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="8b-ServeObservations">
      <name value="8b-ServeObservations"/>
      <description value="Test Server query operation for Observations"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test XIS server to serve Observation resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?context:Encounter.episodeofcare=EpisodeOfCare/${episode-id}"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-8b-ServeObservations"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <!-- alcoholgebruik -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 228273003. (alcohol use)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '228273003').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- tabak -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 365980008. (tobacco use)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '365980008').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- drugs -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 228366006. (drug use)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '228366006').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- pregnancy duration-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 57036006. (pregnancy duration)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '57036006').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: geen zwangerschapsduur gevonden gekoppeld aan Encounter -->
      <!--      <nts:contentAsserts href="mm-gbz-zib-Pregnancy-PregnancyDuration-57036006-fddae8ee-be6a-4b2f-83a1-ac0c55fd96ae.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code='57036006'))</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- foetale beweging -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 364618000. (foetale beweging)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '364618000').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: niet gevonden -->
      <!--      <nts:contentAsserts href="mm-gbz-bc-PregnancyObservation-364618000-35a5aaa2-2359-474a-974d-e0e775ad415c.xml"
                          nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code='364618000'))</nts:discriminator>
      </nts:contentAsserts>-->
      <!-- lichaamsgewicht-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 29463-7. (lichaamsgewicht)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '29463-7').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- bloeddruk -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://loinc.org | 85354-9. (bloeddruk)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://loinc.org' and code = '85354-9').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- tijdstip breken vliezen -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 289251005. (tijdstip breken vliezen)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '289251005').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- wijze Begin Baring -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 160611000146102. (wijze Begin Baring)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '160611000146102').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- datum begin actieve ontsluiting -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 160621000146107. (datum begin actieve ontsluiting)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '160621000146107').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- aard vruchtwater -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 168089007. (aard vruchtwater)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '168089007').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- geboorteplaats-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 366344009. (geboorteplaats)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '366344009').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- type partus -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 364336006. (type partus)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '364336006').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- bloedverlies -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 364332008. (bloedverlies)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '364332008').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- ligging kind bij geboorte -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 271692001. (ligging kind bij geboorte)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '271692001').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- tijdstip actief meepersen -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 249163006. (tijdstip actief meepersen)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '249163006').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- conditie perineum-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 609625009. (conditie perineum)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '609625009').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- geboorte placenta -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 236994008. (geboorte placenta)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '236994008').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- datum en tijd geboorte placenta -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 136311000146100. (datum en tijd geboorte placenta)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '136311000146100').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- compleetheid placenta -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 364343000. (datum en tijd geboorte placenta)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '364343000').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- compleetheid vruchtvliezen -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 364351002. (datum en tijd geboorte placenta)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '364351002').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- compleetheid vruchtvliezen -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Observation resource(s) with code http://snomed.info/sct | 249191003. (datum en tijd geboorte placenta)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Observation)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '249191003').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 00b2da4e-6b30-11ec-1212-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='228273003'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='228273003'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='228273003'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='228273003'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228273003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '105542008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '105542008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${00b2da4e-6b30-11ec-1212-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '105542008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: edfa0f8f-6b43-11ec-2224-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='365980008'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='365980008'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='365980008'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='365980008'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '365980008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '266919005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '266919005' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${edfa0f8f-6b43-11ec-2224-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '266919005' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 3"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: f3ac1e80-6b09-11ec-1211-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='228366006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='228366006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='228366006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='228366006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228366006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '228367002' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '228367002' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${f3ac1e80-6b09-11ec-1211-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '228367002' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 4"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 7365c49b-6ace-11ec-2107-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='29463-7'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='29463-7'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='29463-7'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='29463-7'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '29463-7' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-9"/>
            <description value="Contains .valueQuantity with .value '70' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').value.ofType(Quantity).where(value = 70 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${7365c49b-6ace-11ec-2107-020000000000-id}').value.where($this is Quantity).where(value = 70 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 5"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 21f4f183-6aa4-11ec-2106-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='85354-9'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='85354-9'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='85354-9'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='85354-9'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '85354-9' and .display and .coding with .system 'http://loinc.org' and .code '55284-4' and .display and .coding with .system 'http://snomed.info/sct' and .code '46973005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '85354-9' and display) and coding.where(system = 'http://loinc.org' and code = '55284-4' and display) and coding.where(system = 'http://snomed.info/sct' and code = '46973005' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').code.where(coding.where(system = 'http://loinc.org' and code = '85354-9' and display) and coding.where(system = 'http://loinc.org' and code = '55284-4' and display) and coding.where(system = 'http://snomed.info/sct' and code = '46973005' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-8"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-9"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8480-6' and .display, and .valueString with a value. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display) and value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display) and value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-9-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8480-6' and .display. This assert checks only one child. Assert 5-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-9-2"/>
            <description value="Contains .component.valueString with a value. This assert checks only one child. Assert 5-9 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-10"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8462-4' and .display, and .valueString with a value. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display) and value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display) and value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-10-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8462-4' and .display. This assert checks only one child. Assert 5-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-10-2"/>
            <description value="Contains .component.valueString with a value. This assert checks only one child. Assert 5-10 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${21f4f183-6aa4-11ec-2106-020000000000-id}').component.where(value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 6"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 79f3bfeb-6b1b-11ec-2410-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='289251005'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='289251005'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='289251005'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='289251005'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '289251005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '289251005' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '289251005' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-8"/>
            <description value="Contains .valueDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${79f3bfeb-6b1b-11ec-2410-020000000000-id}').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 7"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: cd876e13-6ab8-11ec-2409-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='160611000146102'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='160611000146102'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='160611000146102'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='160611000146102'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '160611000146102' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '160611000146102' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '160611000146102' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '236958009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '236958009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${cd876e13-6ab8-11ec-2409-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '236958009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 8"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 454a2d13-6a9c-11ec-2408-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='160621000146107'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='160621000146107'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='160621000146107'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='160621000146107'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '160621000146107' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '160621000146107' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '160621000146107' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-9"/>
            <description value="Contains .valuePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').value.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${454a2d13-6a9c-11ec-2408-020000000000-id}').value.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 9"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: b3d83f0b-6b76-11ec-2412-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='168089007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='168089007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='168089007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='168089007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '168089007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '168089007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '168089007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '168090003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '168090003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b3d83f0b-6b76-11ec-2412-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '168090003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 10"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 70e3c65d-6ab9-11ec-2419-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='366344009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='366344009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='366344009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='366344009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '366344009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '366344009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '366344009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '56311000146108' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '56311000146108' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${70e3c65d-6ab9-11ec-2419-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '56311000146108' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 11"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: ad4eda44-6aa8-11ec-2414-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364336006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364336006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364336006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364336006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '364336006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364336006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364336006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '48782003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '48782003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ad4eda44-6aa8-11ec-2414-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '48782003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 12"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 2ed14cf4-6b34-11ec-2396-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364332008'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364332008'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364332008'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364332008'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '364332008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364332008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364332008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-8"/>
            <description value="Contains .valueQuantity with .value '615' and .unit and .system 'http://unitsofmeasure.org' and .code 'ml'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').value.ofType(Quantity).where(value = 615 and unit and system = 'http://unitsofmeasure.org' and code = 'ml').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2ed14cf4-6b34-11ec-2396-020000000000-id}').value.where($this is Quantity).where(value = 615 and unit and system = 'http://unitsofmeasure.org' and code = 'ml').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 13"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 61a43e0e-6b16-11ec-2416-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='271692001'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='271692001'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='271692001'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='271692001'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-FetusObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-FetusObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-FetusObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '271692001' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '271692001' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '271692001' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '37235006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '37235006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${61a43e0e-6b16-11ec-2416-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '37235006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 14"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 5f63630b-6b53-11ec-2413-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='249163006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='249163006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='249163006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='249163006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-BirthObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '249163006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '249163006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '249163006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-8"/>
            <description value="Contains .valueDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${5f63630b-6b53-11ec-2413-020000000000-id}').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 15"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 684ffb15-6aaa-11ec-2395-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='609625009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='609625009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='609625009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='609625009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-PerinealAssessment' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PerinealAssessment') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-PerinealAssessment') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '609625009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '609625009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '609625009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-8"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '364297003' and .display, and .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '57759005' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '364297003' and display) and value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '57759005' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '364297003' and display) and value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '57759005' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-8-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '364297003' and .display. This assert checks only one child. Assert 15-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '364297003' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '364297003' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-8-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '57759005' and .display. This assert checks only one child. Assert 15-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '57759005' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${684ffb15-6aaa-11ec-2395-020000000000-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '57759005' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 16"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 2c9c7a0f-6add-11ec-2421-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='236994008'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='236994008'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='236994008'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='236994008'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '236994008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '236994008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '236994008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="16-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '408819007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '408819007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${2c9c7a0f-6add-11ec-2421-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '408819007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 17"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: d6fda78b-6aeb-11ec-2423-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='136311000146100'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='136311000146100'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='136311000146100'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='136311000146100'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '136311000146100' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '136311000146100' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '136311000146100' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="17-8"/>
            <description value="Contains .valueDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${d6fda78b-6aeb-11ec-2423-020000000000-id}').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 18"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: b02d12f7-6b47-11ec-2424-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364343000'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364343000'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364343000'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364343000'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '364343000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364343000' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364343000' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="18-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '249170006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '249170006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b02d12f7-6b47-11ec-2424-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '249170006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 19"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: ea91873b-6b13-11ec-2427-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364351002'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364351002'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='364351002'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='364351002'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '364351002' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364351002' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '364351002' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="19-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '249181009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '249181009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${ea91873b-6b13-11ec-2427-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '249181009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="8b-ServeObservations - Check Observation 20"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: 832a4629-6b23-11ec-2429-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='249191003'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='249191003'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code='249191003'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code='249191003'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation' and .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryObservation') and profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-observation')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').extension('http://nictiz.nl/fhir/StructureDefinition/observation-focusSTU3').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-4"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '249191003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '249191003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '249191003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="20-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '29691000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '29691000146104' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${832a4629-6b23-11ec-2429-020000000000-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '29691000146104' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="9-ServeProcedures">
      <name value="9-ServeProcedures"/>
      <description value="Test Server query operation for (Obstetric) Procedures"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Procedure"/>
            <description value="Test XIS server to serve Procedure resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?context=EpisodeOfCare/${episode-id}&amp;_include=Procedure:performer&amp;_include=Procedure:based-on"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-9-ServeProcedures"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 5 Procedure resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Procedure)).count() = 5"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 0 Organization resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Organization)).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 0 ProcedureRequest resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(ProcedureRequest)).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- Verrichting (Bevalling) -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Procedure resource(s) with code http://snomed.info/sct | 236973005. (Bevalling)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Procedure)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '236973005').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!--geboorte -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Procedure resource(s) with code http://snomed.info/sct | 3950001. (Geboorte)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Procedure)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '3950001').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: deze observatie is gekoppeld aan Encounter verlossing, extra request nodig om Procedures gekoppeld aan Encounter op te halen -->
      <!-- strippen vliezen -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Procedure resource(s) with code http://snomed.info/sct | 236960006. (Strippen vliezen)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Procedure)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '236960006').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- operatie van bewegingsaparaat -->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Procedure resource(s) with code http://snomed.info/sct | 112697007. (Operatie van bewegingsapparaat)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Procedure)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '112697007').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- operatie vrouwelijk geslachtsorgaan-->
      <action>
         <assert>
            <description value="Confirm that the returned searchset Bundle contains 1 Procedure resource(s) with code http://snomed.info/sct | 12658000. (Operatie van vrouwelijk geslachtsorgaan)"/>
            <direction value="response"/>
            <expression value="Bundle.where(entry.where(resource.is(Procedure)).resource.code.coding.where(system = 'http://snomed.info/sct' and code = '12658000').count()=1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- echografie foetus -->
      <!-- TODO: checken of deze wel klopt, komt uit ADA 2 FHIR, maar niet verwacht? -->
      <!--      <nts:include value="gbz-assert-returnCountWithCode">
         <nts:with-parameter name="additionalDescription"
            value="(Operatie van vrouwelijk geslachtsorgaan)"/>
         <nts:with-parameter name="resource" value="Procedure"/>
         <nts:with-parameter name="count" value="1"/>
         <nts:with-parameter name="code" value="241491007"/>
         <nts:with-parameter name="system" value="http://snomed.info/sct"/>
      </nts:include>
      <nts:contentAsserts href="mm-gbz-bc-ObstetricProcedure241491007-4303593f-6aec-11ec-2119-020000000000.xml"
         nts:in-targets="CheckContent">
         <nts:discriminator>code.where(coding.where(code='241491007'))</nts:discriminator>
      </nts:contentAsserts>-->
   </test>
   <test>
      <name value="9-ServeProcedures - Check Procedure 1"/>
      <description value="Check if the previous operation results in a FHIR Procedure that contains the values that are expected following Nictiz' materials (fixture .id: 44fcd4ef-6b10-11ec-2123-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Procedure"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='236973005'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='236973005'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Procedure resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='236973005'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='236973005'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryProcedure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryProcedure').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-DeliveryProcedure').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '386637004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '236973005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '236973005' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '236973005' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .reasonReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').reasonReference.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${44fcd4ef-6b10-11ec-2123-020000000000-id}').reasonReference.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="9-ServeProcedures - Check Procedure 2"/>
      <description value="Check if the previous operation results in a FHIR Procedure that contains the values that are expected following Nictiz' materials (fixture .id: ddfa6a3f-6b07-11ec-2123-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Procedure"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='3950001'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='3950001'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Procedure resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='3950001'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='3950001'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-Birth'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-Birth').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-Birth').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .partOf with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').partOf.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').partOf.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '386637004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '3950001' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '3950001' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '3950001' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Contains .reasonReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').reasonReference.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${ddfa6a3f-6b07-11ec-2123-020000000000-id}').reasonReference.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="9-ServeProcedures - Check Procedure 3"/>
      <description value="Check if the previous operation results in a FHIR Procedure that contains the values that are expected following Nictiz' materials (fixture .id: 7e6e4e27-6ae1-11ec-2154-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Procedure"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='236960006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='236960006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Procedure resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='236960006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='236960006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure' and .profile 'http://nictiz.nl/fhir/StructureDefinition/bc-ObstetricProcedure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-ObstetricProcedure')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/bc-ObstetricProcedure')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .partOf with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').partOf.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').partOf.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '386637004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '236960006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '236960006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '236960006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-9"/>
            <description value="Contains .reasonReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').reasonReference.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${7e6e4e27-6ae1-11ec-2154-020000000000-id}').reasonReference.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="9-ServeProcedures - Check Procedure 4"/>
      <description value="Check if the previous operation results in a FHIR Procedure that contains the values that are expected following Nictiz' materials (fixture .id: 07492dbf-6aa7-11ec-2108-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Procedure"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='112697007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='112697007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Procedure resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='112697007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='112697007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure' and .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .partOf with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').partOf.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').partOf.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '386637004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '112697007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '112697007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '112697007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${07492dbf-6aa7-11ec-2108-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="9-ServeProcedures - Check Procedure 5"/>
      <description value="Check if the previous operation results in a FHIR Procedure that contains the values that are expected following Nictiz' materials (fixture .id: dbfbda17-6ab3-11ec-2108-020000000000)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Procedure"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='12658000'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='12658000'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Procedure resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code='12658000'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code='12658000'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure' and .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').meta.where(profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .partOf with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').partOf.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').partOf.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '386637004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '386637004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '12658000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '12658000' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '12658000' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-8"/>
            <description value="Contains .context with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').context.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${dbfbda17-6ab3-11ec-2108-020000000000-id}').context.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="10-ServeCareTeam">
      <name value="10-ServeCareTeam"/>
      <description value="Test Server query operation for CareTeam"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="CareTeam"/>
            <description value="Test XIS server to serve CareTeam resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?context=EpisodeOfCare/${episode-id}"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 0 CareTeam resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(CareTeam)).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="11-ServeConsent">
      <name value="11-ServeConsent"/>
      <description value="Test Server query operation for Consent"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Consent"/>
            <description value="Test XIS server to serve Consent resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Consent resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Consent)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <!-- TODO: niet gevonden -->
      <!--      <nts:contentAsserts href="mm-gbz-zib-TreatmentDirective-4ddf57ee-8093-4ec4-bf78-857f40965d53.xml"
         nts:in-targets="CheckContent"/>-->
   </test>
   <test id="12-RelatedPerson">
      <name value="12-RelatedPerson"/>
      <description value="Test Server query operation for RelatedPerson"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="RelatedPerson"/>
            <description value="Test XIS server to serve RelatedPerson resources."/>
            <accept value="json"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <requestHeader>
               <field value="MedMij-Request-ID"/>
               <value value="${UUID}"/>
            </requestHeader>
            <requestHeader>
               <field value="X-Correlation-ID"/>
               <value value="${X-Correlation-ID}"/>
            </requestHeader>
            <responseId value="fixture-12-RelatedPerson"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) anywhere."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().select(identifier.where(system = 'http://fhir.nl/fhir/NamingSystem/bsn').where(value.empty().not() and value.extension.exists().not())).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that Bundle does not use Burgerservicenummer (BSN) in the self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.url.contains('http://fhir.nl/fhir/NamingSystem/bsn') = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 RelatedPerson resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(RelatedPerson)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="12-RelatedPerson - Check RelatedPerson"/>
      <description value="Check if the previous operation results in a FHIR RelatedPerson that contains the values that are expected following Nictiz' materials (fixture .id: relatedperson-mm-gbz-MOHAMMEDMELKADDOURI)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 RelatedPerson"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="RelatedPerson resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-relatedperson'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-relatedperson').exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-relatedperson').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/bc-patient-ethnicity' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.13.28' and .code '5' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').extension('http://nictiz.nl/fhir/StructureDefinition/bc-patient-ethnicity').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.13.28' and code = '5' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').extension('http://nictiz.nl/fhir/StructureDefinition/bc-patient-ethnicity').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.13.28' and code = '5' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .relationship with .coding with .system 'http://hl7.org/fhir/v3/RoleCode' and .code 'DOMPART' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').relationship.coding.where(system = 'http://hl7.org/fhir/v3/RoleCode' and code = 'DOMPART' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').relationship.coding.where(system = 'http://hl7.org/fhir/v3/RoleCode' and code = 'DOMPART' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .name with .text with a value, and .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-prefix' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value, and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(text.hasValue() and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-prefix').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(text.hasValue() and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-prefix').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-1"/>
            <description value="Contains .name.text with a value. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-2"/>
            <description value="Contains .name.family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-prefix' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-prefix').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-prefix').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-2-1"/>
            <description value="Contains .name.family with a value. This assert checks only one child. Assert 1-6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-2-2"/>
            <description value="Contains .name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-prefix' with .valueString with a value. This assert checks only one child. Assert 1-6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-prefix').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-prefix').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-2-3"/>
            <description value="Contains .name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-6-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-6-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-4"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-4-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-6-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-4-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-6-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .telecom with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display and .system 'phone', and .value with a value, and .use 'mobile'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'mobile').exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'mobile').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .telecom.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-2"/>
            <description value="Contains .telecom.system 'phone'. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(system = 'phone').exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(system = 'phone').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-3"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-4"/>
            <description value="Contains .telecom.use 'mobile'. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(use = 'mobile').exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(use = 'mobile').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .telecom with .system 'email', and .value with a value. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(system = 'email' and value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(system = 'email' and value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .telecom.system 'email'. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(system = 'email').exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(system = 'email').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is RelatedPerson).where(id = '${relatedperson-mm-gbz-MOHAMMEDMELKADDOURI-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
</TestScript>
