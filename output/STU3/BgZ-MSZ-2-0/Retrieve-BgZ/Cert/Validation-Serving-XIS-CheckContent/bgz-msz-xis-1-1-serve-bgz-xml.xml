<?xml version="1.0" encoding="UTF-8"?>
<TestScript xmlns="http://hl7.org/fhir" xmlns:nts="http://nictiz.nl/xsl/testscript">
   <id value="bgz-msz-xis-1-1-serve-bgz-CheckContent-xml"/>
   <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-rule">
      <extension url="ruleId">
         <valueId value="assert-response-queryParamsInSelfLink"/>
      </extension>
      <extension url="path">
         <valueString value="../_reference/rules/assert_response_queryParamsInSelfLink.groovy"/>
      </extension>
   </extension>
   <url value="http://nictiz.nl/fhir/TestScript/bgz-msz-xis-1-1-serve-bgz-CheckContent-xml"/>
   <version value="stu3-3.0-patchlevel 2025.35"/>
   <name value="BgZ MSZ - Serving XIS - Scenario 1.1 - Serve BgZ resources of AST - target CheckContent - XML Format"/>
   <status value="active"/>
   <publisher value="Nictiz"/>
   <contact>
      <name value="Nictiz"/>
      <telecom>
         <system value="email"/>
         <value value="kwalificatie@nictiz.nl"/>
         <use value="work"/>
      </telecom>
   </contact>
   <description value="Scenario 1.1 - Serve BgZ resources of AST"/>
   <origin>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="false"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types"/>
         <code value="FHIR-Client"/>
      </profile>
   </origin>
   <destination>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="true"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types"/>
         <code value="FHIR-Server"/>
      </profile>
   </destination>
   <profile id="Bundle-profile"
            value="http://hl7.org/fhir/StructureDefinition/Bundle"/>
   <variable>
      <name value="patient-token-id"/>
      <defaultValue value="Bearer f1e2ccd9-ad09-4961-aeb3-5222b63b6128"/>
      <description value="OAuth Token for current patient"/>
   </variable>
   <variable>
      <name value="AST-id"/>
      <description value="Resource.id for Patient 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).id'-->
      <expression value="Bundle.entry.resource.where($this is Patient).id"/>
      <sourceId value="fixture-01-serve-Patient"/>
   </variable>
   <variable>
      <name value="zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id"/>
      <description value="Resource.id for Coverage 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).id'-->
      <expression value="Bundle.entry.resource.where($this is Coverage).id"/>
      <sourceId value="fixture-02-serve-Payer"/>
   </variable>
   <variable>
      <name value="nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906-id"/>
      <description value="Resource.id for Organization 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).id'-->
      <expression value="Bundle.entry.resource.where($this is Organization).id"/>
      <sourceId value="fixture-02-serve-Payer"/>
   </variable>
   <variable>
      <name value="zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).id"/>
      <sourceId value="fixture-03-serve-TreatmentDirective"/>
   </variable>
   <variable>
      <name value="zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).id"/>
      <sourceId value="fixture-04-serve-AdvanceDirective"/>
   </variable>
   <variable>
      <name value="zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '48867003'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '48867003'))).id"/>
      <sourceId value="fixture-06-serve-Problem"/>
   </variable>
   <variable>
      <name value="zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '399322006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '399322006'))).id"/>
      <sourceId value="fixture-06-serve-Problem"/>
   </variable>
   <variable>
      <name value="zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).id"/>
      <sourceId value="fixture-07-serve-LivingSituation"/>
   </variable>
   <variable>
      <name value="zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '228367002'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '228367002'))).id"/>
      <sourceId value="fixture-08-serve-DrugUse"/>
   </variable>
   <variable>
      <name value="zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '82581004'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '82581004'))).id"/>
      <sourceId value="fixture-09-serve-AlcoholUse"/>
   </variable>
   <variable>
      <name value="zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '266919005'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '266919005'))).id"/>
      <sourceId value="fixture-10-serve-TobaccoUse"/>
   </variable>
   <variable>
      <name value="zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id"/>
      <description value="Resource.id for NutritionOrder 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'koemelkvrij dieet'))).id'-->
      <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'koemelkvrij dieet'))).id"/>
      <sourceId value="fixture-11-serve-NutritionAdvice"/>
   </variable>
   <variable>
      <name value="zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id"/>
      <description value="Resource.id for Flag 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = 'OTH'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = 'OTH'))).id"/>
      <sourceId value="fixture-12-serve-Alert"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '143491000146106'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '143491000146106'))).id"/>
      <sourceId value="fixture-13-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationStatement 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id"/>
      <sourceId value="fixture-14-serve-MedicationUse"/>
   </variable>
   <variable>
      <name value="zib-Product-msz-2-16-840-1-113883-2-4-4-10-67903-id"/>
      <description value="Resource.id for Medication 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '2194')) and code.where(coding.where(code = '67903'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '2194')) and code.where(coding.where(code = '67903'))).id"/>
      <sourceId value="fixture-14-serve-MedicationUse"/>
   </variable>
   <variable>
      <name value="zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationRequest 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id"/>
      <sourceId value="fixture-15-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationDispense 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(medication.reference.resolve().where(code.coding.code = '2456451')).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(medication.reference.resolve().where(code.coding.code = '2456451')).id"/>
      <sourceId value="fixture-16-serve-AdministrationAgreement"/>
   </variable>
   <variable>
      <name value="zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id"/>
      <description value="Resource.id for DeviceUseStatement 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(device.resolve().type.where(coding.where(code = '706004007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(device.resolve().type.where(coding.where(code = '706004007'))).id"/>
      <sourceId value="fixture-17-serve-MedicalDevice"/>
   </variable>
   <variable>
      <name value="zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id"/>
      <description value="Resource.id for Device 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(type.where(coding.where(code = '706004007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Device).where(type.where(coding.where(code = '706004007'))).id"/>
      <sourceId value="fixture-17-serve-MedicalDevice"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BB02'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BB02'))).id"/>
      <sourceId value="fixture-18-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).id"/>
      <sourceId value="fixture-19-serve-BloodPressure"/>
   </variable>
   <variable>
      <name value="zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).id"/>
      <sourceId value="fixture-20-serve-BodyWeight"/>
   </variable>
   <variable>
      <name value="zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).id"/>
      <sourceId value="fixture-21-serve-BodyHeight"/>
   </variable>
   <variable>
      <name value="b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(related.target.resolve().where(code.coding.code = '2947-0')).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(related.target.resolve().where(code.coding.code = '2947-0')).id"/>
      <sourceId value="fixture-22-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '2947-0')) and value.ofType(Quantity).value = 138).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '2947-0')) and value.where($this is Quantity).value = 138).id"/>
      <sourceId value="fixture-22-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id"/>
      <description value="Resource.id for Procedure 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code = '307280005'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code = '307280005'))).id"/>
      <sourceId value="fixture-23-serve-Procedure"/>
   </variable>
   <variable>
      <name value="zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id"/>
      <description value="Resource.id for Encounter 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'AMB').id'-->
      <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'AMB').id"/>
      <sourceId value="fixture-24-serve-Contact"/>
   </variable>
   <test id="01-serve-Patient">
      <name value="Scenario 1.1 - Patient"/>
      <description value="Serve Patient resource including the patient's general practitioner for HCIM Patient"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Patient"/>
            <description value="Test Server to serve Patient resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;_include=Patient:general-practitioner"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-01-serve-Patient"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Patient - Check Patient"/>
      <description value="Check if the previous operation results in a FHIR Patient that contains the values that are expected following Nictiz' materials (fixture .id: AST)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Patient"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Patient).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Patient resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-patient' and .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Patient'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').meta.where(profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-patient') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Patient')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').meta.where(profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-patient') and profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Patient')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .name with .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .gender 'female' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AdministrativeGender' and .code 'F' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').gender.where($this = 'female' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').gender.where($this = 'female' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-1"/>
            <description value="Contains .gender 'female'. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').gender = 'female''-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').gender = 'female'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-2"/>
            <description value="Contains .gender.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AdministrativeGender' and .code 'F' and .display. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').gender.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').gender.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .birthDate"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').birthDate.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').birthDate.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .contact with .name with .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${AST-id}').contact.where(name.family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${AST-id}').contact.where(name.family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="02-serve-Payer">
      <name value="Scenario 1.1 - Payer"/>
      <description value="Serve Coverage resource(s) including the insurer for HCIM Payer"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Coverage"/>
            <description value="Test Server to serve Coverage resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;beneficiary.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;_include=Coverage:payor"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-02-serve-Payer"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Payer - Check Coverage"/>
      <description value="Check if the previous operation results in a FHIR Coverage that contains the values that are expected following Nictiz' materials (fixture .id: zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Coverage"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Coverage resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Payer'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Payer').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Payer').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .type with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.101.5.1' and .code 'B' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').type.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.101.5.1' and code = 'B' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').type.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.101.5.1' and code = 'B' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .subscriber with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').subscriber.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').subscriber.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subscriberId with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').subscriberId.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').subscriberId.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .beneficiary with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').beneficiary.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').beneficiary.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .period with .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').period.end.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').period.end.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .payor with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').payor.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-ec7b30d9-6b36-11ec-0000-2-1-id}').payor.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Payer - Check Organization"/>
      <description value="Check if the previous operation results in a FHIR Organization that contains the values that are expected following Nictiz' materials (fixture .id: nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Organization"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Organization).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Organization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-organization'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-organization').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-organization').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .name with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906-id}').name.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1906-id}').name.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test id="03-serve-TreatmentDirective">
      <name value="Scenario 1.1 - TreatmentDirective"/>
      <description value="Serve Consent resource(s) for HCIM TreatmentDirective"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Consent"/>
            <description value="Test Server to serve Consent resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=http://snomed.info/sct|11291000146105"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-03-serve-TreatmentDirective"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - TreatmentDirective - Check Consent"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification' with .extension with url 'Verified' with .valueBoolean with .extension with url 'http://hl7.org/fhir/StructureDefinition/data-absent-reason' with .valueCode 'unknown'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.ofType(boolean).where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.ofType(code) = 'unknown').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.where($this is boolean).where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.where($this is code) = 'unknown').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .modifierExtension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and .code 'JA' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11291000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-65a4134a-6b4f-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="04-serve-AdvanceDirective">
      <name value="Scenario 1.1 - AdvanceDirective"/>
      <description value="Serve Consent resource(s) for HCIM AdvanceDirective"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Consent"/>
            <description value="Test Server to serve Consent resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=http://snomed.info/sct|11341000146107"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-04-serve-AdvanceDirective"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - AdvanceDirective - Check Consent"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11341000146107' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11341000146107' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11341000146107' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and .code 'VOL' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and code = 'VOL' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and code = 'VOL' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .dateTime with .extension with url 'http://hl7.org/fhir/StructureDefinition/data-absent-reason' with .valueCode 'unknown'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').dateTime.where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.ofType(code) = 'unknown').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').dateTime.where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.where($this is code) = 'unknown').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b97764f-6b58-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="05-serve-FunctionalOrMentalStatus">
      <name value="Scenario 1.1 - FunctionalOrMentalStatus"/>
      <description value="Serve Observation resource(s) for BgZ FunctionalOrMentalStatus"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=http://snomed.info/sct|118228005,http://snomed.info/sct|384821006"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test id="06-serve-Problem">
      <name value="Scenario 1.1 - Problem"/>
      <description value="Serve Condition resource(s) for BgZ Problem"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Condition"/>
            <description value="Test Server to serve Condition resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-06-serve-Problem"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Provenance resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Provenance)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Problem - Check Condition 1"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '48867003'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '48867003'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '48867003'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '48867003'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '48867003'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '48867003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '48867003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '48867003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-c9462cf9-6aaf-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Problem - Check Condition 2"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: zib-Problem-msz-39e5b3af-6b12-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '399322006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '399322006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '399322006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '399322006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '399322006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .clinicalStatus 'inactive' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '73425007' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').clinicalStatus.where($this = 'inactive' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').clinicalStatus.where($this = 'inactive' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-1"/>
            <description value="Contains .clinicalStatus 'inactive'. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').clinicalStatus = 'inactive''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').clinicalStatus = 'inactive'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '73425007' and .display. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '399322006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '399322006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '399322006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${zib-Problem-msz-39e5b3af-6b12-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="07-serve-LivingSituation">
      <name value="Scenario 1.1 - LivingSituation"/>
      <description value="Serve Observation resource(s) for last known HCIM LivingSituation"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;code=http://snomed.info/sct|365508006"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-07-serve-LivingSituation"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - LivingSituation - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '365508006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365508006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365508006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and .code 'WOONB' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and code = 'WOONB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-fd26a70f-6b4b-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and code = 'WOONB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="08-serve-DrugUse">
      <name value="Scenario 1.1 - DrugUse"/>
      <description value="Serve Observation resource(s) for HCIM DrugUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;code=http://snomed.info/sct|228366006"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-08-serve-DrugUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - DrugUse - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '228367002'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '228367002'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '228367002'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '228367002'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '228367002'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228366006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '228367002' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '228367002' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-2799f0af-6b29-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '228367002' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="09-serve-AlcoholUse">
      <name value="Scenario 1.1 - AlcoholUse"/>
      <description value="Serve Observation resource(s) for HCIM AlcoholUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;code=http://snomed.info/sct|228273003"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-09-serve-AlcoholUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - AlcoholUse - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '82581004'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '82581004'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '82581004'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '82581004'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '82581004'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228273003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '82581004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '82581004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-c72585f9-6aa6-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '82581004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="10-serve-TobaccoUse">
      <name value="Scenario 1.1 - TobaccoUse"/>
      <description value="Serve Observation resource(s) for HCIM TobaccoUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;code=http://snomed.info/sct|365980008"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-10-serve-TobaccoUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - TobaccoUse - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '266919005'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '266919005'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '266919005'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(value.ofType(CodeableConcept).where(coding.where(code = '266919005'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(value.where($this is CodeableConcept).where(coding.where(code = '266919005'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '365980008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '266919005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '266919005' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-141b58af-6ad1-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '266919005' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="11-serve-NutritionAdvice">
      <name value="Scenario 1.1 - NutritionAdvice"/>
      <description value="Serve NutritionOrder resource(s) for HCIM NutritionAdvice"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="NutritionOrder"/>
            <description value="Test Server to serve NutritionOrder resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-11-serve-NutritionAdvice"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 NutritionOrder resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(NutritionOrder)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - NutritionAdvice - Check NutritionOrder"/>
      <description value="Check if the previous operation results in a FHIR NutritionOrder that contains the values that are expected following Nictiz' materials (fixture .id: zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 NutritionOrder with properties: contains .oralDiet.type.text = 'koemelkvrij dieet'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'koemelkvrij dieet'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'koemelkvrij dieet'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="NutritionOrder resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'koemelkvrij dieet'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'koemelkvrij dieet'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice').exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .dateTime with .extension with url 'http://hl7.org/fhir/StructureDefinition/data-absent-reason' with .valueCode 'unknown'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').dateTime.where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.ofType(code) = 'unknown').exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').dateTime.where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.where($this is code) = 'unknown').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .oralDiet with .type with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').oralDiet.type.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-29c694b1-6b09-11ec-0000-2-id}').oralDiet.type.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="12-serve-Alert">
      <name value="Scenario 1.1 - Alert"/>
      <description value="Serve Flag resource(s) for HCIM Alert"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Flag"/>
            <description value="Test Server to serve Flag resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-12-serve-Alert"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Alert - Check Flag"/>
      <description value="Check if the previous operation results in a FHIR Flag that contains the values that are expected following Nictiz' materials (fixture .id: zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Flag with properties: contains .code.coding.code = 'OTH'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = 'OTH'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = 'OTH'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Flag resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = 'OTH'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = 'OTH'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://hl7.org/fhir/StructureDefinition/flag-detail' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').extension('http://hl7.org/fhir/StructureDefinition/flag-detail').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').extension('http://hl7.org/fhir/StructureDefinition/flag-detail').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').code.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').code.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94d95bcd-6ab7-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="13-serve-AllergyIntolerance">
      <name value="Scenario 1.1 - AllergyIntolerance"/>
      <description value="Serve AllergyIntolerance resource(s) for HCIM AllergyIntolerance"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="AllergyIntolerance"/>
            <description value="Test Server to serve AllergyIntolerance resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-13-serve-AllergyIntolerance"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - AllergyIntolerance - Check AllergyIntolerance"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '143491000146106'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '143491000146106'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '143491000146106'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '143491000146106'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '143491000146106'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '143491000146106' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '143491000146106' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '143491000146106' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .reaction with .manifestation with .coding with .system 'http://snomed.info/sct' and .code '126485001' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').reaction.where(manifestation.where(coding.where(system = 'http://snomed.info/sct' and code = '126485001' and display))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-49fd084f-6aec-11ec-0000-2-id}').reaction.where(manifestation.where(coding.where(system = 'http://snomed.info/sct' and code = '126485001' and display))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="14-serve-MedicationUse">
      <name value="Scenario 1.1 - MedicationUse"/>
      <description value="Serve MedicationStatement resource(s) including the medication for HCIM MedicationUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="MedicationStatement"/>
            <description value="Test Server to serve MedicationStatement resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3|6&amp;_include=MedicationStatement:medication"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-14-serve-MedicationUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - MedicationUse - Check MedicationStatement"/>
      <description value="Check if the previous operation results in a FHIR MedicationStatement that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationStatement with properties: contains .medicationReference with reference to medication with code.coding.code = '2194' and .code.coding.code = '67903'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationStatement resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-AsAgreedIndicator' with .valueBoolean 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-AsAgreedIndicator').value.ofType(boolean) = false'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-AsAgreedIndicator').value.where($this is boolean) = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Author' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Author').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Author').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .category with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3' and .code '6' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3' and code = '6' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3' and code = '6' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .dateAsserted"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dateAsserted.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dateAsserted.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .taken 'n'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').taken = 'n''-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').taken = 'n'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .dosage with .text with a value, and .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dosage.where(text.hasValue() and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dosage.where(text.hasValue() and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-1"/>
            <description value="Contains .dosage.text with a value. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dosage.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dosage.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-2"/>
            <description value="Contains .dosage.route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dosage.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-9b391c89-6b6a-11ec-0000-2-id}').dosage.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - MedicationUse - Check Medication"/>
      <description value="Check if the previous operation results in a FHIR Medication that contains the values that are expected following Nictiz' materials (fixture .id: zib-Product-msz-2-16-840-1-113883-2-4-4-10-67903)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Medication with properties: contains .code.coding.code = '2194' and .code.coding.code = '67903'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '2194')) and code.where(coding.where(code = '67903'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '2194')) and code.where(coding.where(code = '67903'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Medication resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '2194')) and code.where(coding.where(code = '67903'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '2194')) and code.where(coding.where(code = '67903'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Product'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-2-16-840-1-113883-2-4-4-10-67903-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-2-16-840-1-113883-2-4-4-10-67903-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .code with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.1' and .code '2194' and .display and .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.10' and .code '67903' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-2-16-840-1-113883-2-4-4-10-67903-id}').code.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.1' and code = '2194' and display) and coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '67903' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-2-16-840-1-113883-2-4-4-10-67903-id}').code.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.1' and code = '2194' and display) and coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '67903' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="15-serve-MedicationAgreement">
      <name value="Scenario 1.1 - MedicationAgreement"/>
      <description value="Serve MedicationRequest resource(s) including the medication for HCIM MedicationAgreement"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="MedicationRequest"/>
            <description value="Test Server to serve MedicationRequest resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=http://snomed.info/sct|16076005&amp;_include=MedicationRequest:medication"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-15-serve-MedicationAgreement"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - MedicationAgreement - Check MedicationRequest"/>
      <description value="Check if the previous operation results in a FHIR MedicationRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationRequest with properties: contains .medicationReference with reference to medication with code.coding.code = '2194' and .code.coding.code = '67903'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medication.reference.resolve().code.where(coding.where(code = '2194')) and medication.reference.resolve().code.where(coding.where(code = '67903'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .intent 'order'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').intent = 'order''-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').intent = 'order'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '16076005' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .authoredOn"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').authoredOn.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').authoredOn.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .requester with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement-RequesterRole' with .valueReference with either .reference or .identifier and .display and .agent with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').requester.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement-RequesterRole').value.ofType(Reference).where((reference or identifier) and display) and agent.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').requester.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement-RequesterRole').value.where($this is Reference).where((reference or identifier) and display) and agent.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .requester.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement-RequesterRole' with .valueReference with either .reference or .identifier and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').requester.extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement-RequesterRole').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').requester.extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement-RequesterRole').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-2"/>
            <description value="Contains .requester.agent with either .reference or .identifier and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').requester.agent.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').requester.agent.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .dosageInstruction with .text with a value, and .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').dosageInstruction.where(text.hasValue() and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').dosageInstruction.where(text.hasValue() and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .dosageInstruction.text with a value. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').dosageInstruction.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').dosageInstruction.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .dosageInstruction.route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-67f4f20f-6aa0-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="16-serve-AdministrationAgreement">
      <name value="Scenario 1.1 - AdministrationAgreement"/>
      <description value="Serve MedicationDispense resource(s) including the medication for HCIM AdministrationAgreement"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="MedicationDispense"/>
            <description value="Test Server to serve MedicationDispense resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=http://snomed.info/sct|422037009&amp;_include=MedicationDispense:medication"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-16-serve-AdministrationAgreement"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - AdministrationAgreement - Check MedicationDispense"/>
      <description value="Check if the previous operation results in a FHIR MedicationDispense that contains the values that are expected following Nictiz' materials (fixture .id: zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationDispense with properties: contains .medicationReference with reference to medication with code.coding.code = '2456451'."/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(medication.reference.resolve().where(code.coding.code = '2456451')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(medication.reference.resolve().where(code.coding.code = '2456451')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationDispense resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(medication.reference.resolve().where(code.coding.code = '2456451')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(medication.reference.resolve().where(code.coding.code = '2456451')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement-AuthoredOn' with .valueDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement-AuthoredOn').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement-AuthoredOn').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '422037009' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '422037009' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '422037009' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .performer with .actor with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').performer.where(actor.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').performer.where(actor.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .dosageInstruction with .text with a value, and .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').dosageInstruction.where(text.hasValue() and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').dosageInstruction.where(text.hasValue() and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .dosageInstruction.text with a value. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').dosageInstruction.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').dosageInstruction.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-2"/>
            <description value="Contains .dosageInstruction.route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-8dc29dcf-6ac3-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="17-serve-MedicalDevice">
      <name value="Scenario 1.1 - MedicalDevice"/>
      <description value="Serve DeviceUseStatement resource(s) including the device for HCIM MedicalDevice"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="DeviceUseStatement"/>
            <description value="Test Server to serve DeviceUseStatement resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;_include=DeviceUseStatement:device"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-17-serve-MedicalDevice"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - MedicalDevice - Check DeviceUseStatement"/>
      <description value="Check if the previous operation results in a FHIR DeviceUseStatement that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 DeviceUseStatement with properties: contains .device with reference to Device with type.coding.code = '706004007'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(device.resolve().type.where(coding.where(code = '706004007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(device.resolve().type.where(coding.where(code = '706004007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="DeviceUseStatement resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(device.resolve().type.where(coding.where(code = '706004007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(device.resolve().type.where(coding.where(code = '706004007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice').exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .device with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').device.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-8e797d2f-6b7b-11ec-0000-2-id}').device.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - MedicalDevice - Check Device"/>
      <description value="Check if the previous operation results in a FHIR Device that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Device with properties: contains .type.coding.code = '706004007'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(type.where(coding.where(code = '706004007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(type.where(coding.where(code = '706004007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Device resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(type.where(coding.where(code = '706004007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(type.where(coding.where(code = '706004007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDeviceProduct'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDeviceProduct').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDeviceProduct').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .type with .coding with .system 'http://snomed.info/sct' and .code '706004007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').type.coding.where(system = 'http://snomed.info/sct' and code = '706004007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').type.coding.where(system = 'http://snomed.info/sct' and code = '706004007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-8e797d2f-6b7b-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="18-serve-Vaccination">
      <name value="Scenario 1.1 - Vaccination"/>
      <description value="Serve Immunization resource(s) for HCIM Vaccination"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Immunization"/>
            <description value="Test Server to serve Immunization resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;status=completed"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-18-serve-Vaccination"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Vaccination - Check Immunization"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07BB02'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BB02'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BB02'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BB02'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BB02'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07BB02' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BB02' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BB02' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .doseQuantity with .value '0.5' and .unit and .system 'http://unitsofmeasure.org' and .code 'mL'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').doseQuantity.where(value = 0.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c9bc6ce9-6b62-11ec-0000-2-id}').doseQuantity.where(value = 0.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="19-serve-BloodPressure">
      <name value="Scenario 1.1 - BloodPressure"/>
      <description value="Serve Observation resource(s) for HCIM BloodPressure"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="/$lastn?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;code=http://loinc.org|85354-9"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-19-serve-BloodPressure"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - BloodPressure - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '85354-9' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '85354-9' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '85354-9' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8480-6' and .display, and .valueQuantity with .value '119' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display) and value.ofType(Quantity).where(value = 119 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display) and value.where($this is Quantity).where(value = 119 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8480-6' and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-2"/>
            <description value="Contains .component.valueQuantity with .value '119' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(value.ofType(Quantity).where(value = 119 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(value.where($this is Quantity).where(value = 119 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8462-4' and .display, and .valueQuantity with .value '89' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display) and value.ofType(Quantity).where(value = 89 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display) and value.where($this is Quantity).where(value = 89 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8462-4' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .component.valueQuantity with .value '89' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(value.ofType(Quantity).where(value = 89 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-07b43e36-6a96-11ec-0000-2-id}').component.where(value.where($this is Quantity).where(value = 89 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="20-serve-BodyWeight">
      <name value="Scenario 1.1 - BodyWeight"/>
      <description value="Serve Observation resource(s) for last known HCIM BodyWeight"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;code=http://loinc.org|29463-7"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-20-serve-BodyWeight"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Observation resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Observation)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - BodyWeight - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '29463-7' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .valueQuantity with .value '99' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').value.ofType(Quantity).where(value = 99 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-905129ef-6b2b-11ec-0000-2-id}').value.where($this is Quantity).where(value = 99 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="21-serve-BodyHeight">
      <name value="Scenario 1.1 - BodyHeight"/>
      <description value="Serve Observation resource(s) for last known HCIM BodyHeight"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;code=http://loinc.org|8302-2,http://loinc.org|8306-3,http://loinc.org|8308-9"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-21-serve-BodyHeight"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Observation resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Observation)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - BodyHeight - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '8302-2' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '8302-2' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .valueQuantity with .value '170' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').value.ofType(Quantity).where(value = 170 and unit and system = 'http://unitsofmeasure.org' and code = 'cm').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-3c194b3e-6a97-11ec-0000-2-id}').value.where($this is Quantity).where(value = 170 and unit and system = 'http://unitsofmeasure.org' and code = 'cm').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="22-serve-LaboratoryTestResult">
      <name value="Scenario 1.1 - LaboratoryTestResult"/>
      <description value="Serve Observation resource(s) for HCIM LaboratoryTestResult"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=http://snomed.info/sct|49581000146104&amp;_include=Observation:related-target"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-22-serve-LaboratoryTestResult"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - LaboratoryTestResult - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .target with reference to Observation with code.coding.code = '2947-0'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(related.target.resolve().where(code.coding.code = '2947-0')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(related.target.resolve().where(code.coding.code = '2947-0')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(related.target.resolve().where(code.coding.code = '2947-0')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(related.target.resolve().where(code.coding.code = '2947-0')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'laboratory' and .display and .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'laboratory' and display) and coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'laboratory' and display) and coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '275711006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '275711006' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '275711006' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .code with .extension with url 'http://hl7.org/fhir/StructureDefinition/data-absent-reason' with .valueCode 'unknown'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.ofType(code) = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.where($this is code) = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-9a6d96ee-6a98-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - LaboratoryTestResult - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '2947-0' and .valueQuantity.value = '138'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '2947-0')) and value.ofType(Quantity).value = 138).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '2947-0')) and value.where($this is Quantity).value = 138).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '2947-0')) and value.ofType(Quantity).value = 138).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '2947-0')) and value.where($this is Quantity).value = 138).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'laboratory' and .display and .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'laboratory' and display) and coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'laboratory' and display) and coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '275711006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '275711006' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '275711006' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '2947-0' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '2947-0' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '2947-0' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .valueQuantity with .value '138' and .unit and .system 'http://unitsofmeasure.org' and .code 'mmol/L'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').value.ofType(Quantity).where(value = 138 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${b-LaboratoryTestResult-Observation-msz-fc34d19c-6b25-11ec-0000-2-id}').value.where($this is Quantity).where(value = 138 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="23-serve-Procedure">
      <name value="Scenario 1.1 - Procedure"/>
      <description value="Serve Procedure resource(s) for BgZ Procedure"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Procedure"/>
            <description value="Test Server to serve Procedure resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;category=http://snomed.info/sct|387713003,http://snomed.info/sct|258174001"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-23-serve-Procedure"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Procedure - Check Procedure"/>
      <description value="Check if the previous operation results in a FHIR Procedure that contains the values that are expected following Nictiz' materials (fixture .id: zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Procedure with properties: contains .code.coding.code = '307280005'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code = '307280005'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code = '307280005'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Procedure resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(code.where(coding.where(code = '307280005'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(code.where(coding.where(code = '307280005'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Procedure').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'in-progress'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').status = 'in-progress''-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').status = 'in-progress'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '387713003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '387713003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').category.coding.where(system = 'http://snomed.info/sct' and code = '387713003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '307280005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '307280005' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '307280005' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Procedure).where(id = '${zib-Procedure-msz-d68a912f-6b5e-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="24-serve-Contact">
      <name value="Scenario 1.1 - Contact"/>
      <description value="Serve Encounter resource(s) for HCIM Contact"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Encounter"/>
            <description value="Test Server to serve Encounter resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-24-serve-Contact"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Contact - Check Encounter"/>
      <description value="Check if the previous operation results in a FHIR Encounter that contains the values that are expected following Nictiz' materials (fixture .id: zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Encounter with properties: contains .class.code = 'AMB'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'AMB').count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'AMB').count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Encounter resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'AMB').id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'AMB').id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'unknown'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').status = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').status = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .class with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display and .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').class.where(extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display) and system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').class.where(extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display) and system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-1"/>
            <description value="Contains .class.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').class.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').class.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-1"/>
            <description value="Contains .class with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .diagnosis with .condition with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-BGZ-MSZ-PATE-ENCOUNTER1T-44D-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="25-serve-ProcedureRequest">
      <name value="Scenario 1.1 - ProcedureRequest"/>
      <description value="Serve ProcedureRequest resource(s) for HCIM Procedure"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="ProcedureRequest"/>
            <description value="Test Server to serve ProcedureRequest resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;status=active"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test id="26-serve-Careteam">
      <name value="Scenario 1.1 - Careteam"/>
      <description value="Serve Careteam resource(s)"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="CareTeam"/>
            <description value="Test Server to serve CareTeam resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?_revinclude=Provenance:target&amp;patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999906276&amp;status=active&amp;_include=CareTeam:participant"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 0 CareTeam resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(CareTeam)).count() = 0"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
</TestScript>
