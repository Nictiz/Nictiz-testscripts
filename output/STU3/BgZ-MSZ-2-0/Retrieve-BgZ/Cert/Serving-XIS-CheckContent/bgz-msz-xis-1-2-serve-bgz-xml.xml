<?xml version="1.0" encoding="UTF-8"?>
<TestScript xmlns="http://hl7.org/fhir" xmlns:nts="http://nictiz.nl/xsl/testscript">
   <id value="bgz-msz-xis-1-2-serve-bgz-CheckContent-xml"/>
   <meta>
      <profile value="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript"/>
   </meta>
   <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-rule">
      <extension url="ruleId">
         <valueId value="assert-response-queryParamsInSelfLink"/>
      </extension>
      <extension url="path">
         <valueString value="../_reference/rules/assert_response_queryParamsInSelfLink.groovy"/>
      </extension>
   </extension>
   <url value="http://nictiz.nl/fhir/TestScript/bgz-msz-xis-1-2-serve-bgz-CheckContent-xml"/>
   <version value="stu3-3.0-patchlevel 2025-02"/>
   <name value="BgZ MSZ - Serving XIS - Scenario 1.2 - Serve BgZ resources of M B Bergzoon-Verheul - target CheckContent - XML Format"/>
   <status value="active"/>
   <publisher value="Nictiz"/>
   <contact>
      <name value="Nictiz"/>
      <telecom>
         <system value="email"/>
         <value value="kwalificatie@nictiz.nl"/>
         <use value="work"/>
      </telecom>
   </contact>
   <description value="Scenario 1.2 - Serve BgZ resources of M B Bergzoon-Verheul"/>
   <origin>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="false"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types"/>
         <code value="FHIR-Client"/>
      </profile>
   </origin>
   <destination>
      <extension url="http://fhir.interoplab.eu/fhir/StructureDefinition/Interoplab-CL-ext-SUT">
         <valueBoolean value="true"/>
      </extension>
      <index value="1"/>
      <profile>
         <system value="http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types"/>
         <code value="FHIR-Server"/>
      </profile>
   </destination>
   <profile id="Bundle-profile"
            value="http://hl7.org/fhir/StructureDefinition/Bundle"/>
   <variable>
      <name value="patient-token-id"/>
      <defaultValue value="Bearer 9a472b6d-da84-4e4c-9ab5-9bab46aad0e7"/>
      <description value="OAuth Token for current patient"/>
   </variable>
   <variable>
      <name value="MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id"/>
      <description value="Resource.id for Patient 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).id'-->
      <expression value="Bundle.entry.resource.where($this is Patient).id"/>
      <sourceId value="fixture-01-serve-Patient"/>
   </variable>
   <variable>
      <name value="nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id"/>
      <description value="Resource.id for Practitioner 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).id'-->
      <expression value="Bundle.entry.resource.where($this is Practitioner).id"/>
      <sourceId value="fixture-01-serve-Patient"/>
   </variable>
   <variable>
      <name value="zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id"/>
      <description value="Resource.id for Coverage 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).id'-->
      <expression value="Bundle.entry.resource.where($this is Coverage).id"/>
      <sourceId value="fixture-02-serve-Payer"/>
   </variable>
   <variable>
      <name value="nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id"/>
      <description value="Resource.id for Organization 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).id'-->
      <expression value="Bundle.entry.resource.where($this is Organization).id"/>
      <sourceId value="fixture-02-serve-Payer"/>
   </variable>
   <variable>
      <name value="zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '89666000')))).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '89666000')))).id"/>
      <sourceId value="fixture-03-serve-TreatmentDirective"/>
   </variable>
   <variable>
      <name value="zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = 'OTH')))).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = 'OTH')))).id"/>
      <sourceId value="fixture-03-serve-TreatmentDirective"/>
   </variable>
   <variable>
      <name value="zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2007-07-07')).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2007-07-07')).id"/>
      <sourceId value="fixture-03-serve-TreatmentDirective"/>
   </variable>
   <variable>
      <name value="zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '40617009')))).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '40617009')))).id"/>
      <sourceId value="fixture-03-serve-TreatmentDirective"/>
   </variable>
   <variable>
      <name value="zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '305351004')))).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '305351004')))).id"/>
      <sourceId value="fixture-03-serve-TreatmentDirective"/>
   </variable>
   <variable>
      <name value="zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(category.where(coding.where(code = 'VOL'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).where(category.where(coding.where(code = 'VOL'))).id"/>
      <sourceId value="fixture-04-serve-AdvanceDirective"/>
   </variable>
   <variable>
      <name value="zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id"/>
      <description value="Resource.id for Consent 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(category.where(coding.where(code = 'LW'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Consent).where(category.where(coding.where(code = 'LW'))).id"/>
      <sourceId value="fixture-04-serve-AdvanceDirective"/>
   </variable>
   <variable>
      <name value="BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '713512009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '713512009'))).id"/>
      <sourceId value="fixture-06-serve-FunctionalOrMentalStatus"/>
   </variable>
   <variable>
      <name value="BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '425131000'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '425131000'))).id"/>
      <sourceId value="fixture-06-serve-FunctionalOrMentalStatus"/>
   </variable>
   <variable>
      <name value="BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '129006008'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '129006008'))).id"/>
      <sourceId value="fixture-06-serve-FunctionalOrMentalStatus"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '266287006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '266287006'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '409586006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '409586006'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '230690007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '230690007'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '266588002'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '266588002'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '40275004'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '40275004'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 6"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '64859006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '64859006'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 7"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '412734009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '412734009'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 8"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '254837009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '254837009'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 9"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '58126003'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '58126003'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 10"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(valueCode = 'OTH'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(valueCode = 'OTH'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 11"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '233604007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '233604007'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 12"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '13644009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '13644009'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 13"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '108691000119102'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '108691000119102'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 14"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '44054006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '44054006'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id"/>
      <description value="Resource.id for Condition 15"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '250731000146107'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '250731000146107'))).id"/>
      <sourceId value="fixture-07-serve-Problem"/>
   </variable>
   <variable>
      <name value="zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'BENEDENW'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'BENEDENW'))).id"/>
      <sourceId value="fixture-08-serve-LivingSituation"/>
   </variable>
   <variable>
      <name value="zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'FLATW'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'FLATW'))).id"/>
      <sourceId value="fixture-08-serve-LivingSituation"/>
   </variable>
   <variable>
      <name value="zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '44870007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '44870007'))).id"/>
      <sourceId value="fixture-09-serve-DrugUse"/>
   </variable>
   <variable>
      <name value="zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'OTH'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'OTH'))).id"/>
      <sourceId value="fixture-09-serve-DrugUse"/>
   </variable>
   <variable>
      <name value="zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '82581004'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '82581004'))).id"/>
      <sourceId value="fixture-10-serve-AlcoholUse"/>
   </variable>
   <variable>
      <name value="zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '219006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '219006'))).id"/>
      <sourceId value="fixture-10-serve-AlcoholUse"/>
   </variable>
   <variable>
      <name value="zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '449868002'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '449868002'))).id"/>
      <sourceId value="fixture-11-serve-TobaccoUse"/>
   </variable>
   <variable>
      <name value="zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '8517006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '8517006'))).id"/>
      <sourceId value="fixture-11-serve-TobaccoUse"/>
   </variable>
   <variable>
      <name value="zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id"/>
      <description value="Resource.id for NutritionOrder 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'Vezelrijk'))).id'-->
      <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'Vezelrijk'))).id"/>
      <sourceId value="fixture-12-serve-NutritionAdvice"/>
   </variable>
   <variable>
      <name value="zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id"/>
      <description value="Resource.id for NutritionOrder 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'eiwitrijk'))).id'-->
      <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'eiwitrijk'))).id"/>
      <sourceId value="fixture-12-serve-NutritionAdvice"/>
   </variable>
   <variable>
      <name value="zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id"/>
      <description value="Resource.id for Flag 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = '432415000'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = '432415000'))).id"/>
      <sourceId value="fixture-13-serve-Alert"/>
   </variable>
   <variable>
      <name value="zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id"/>
      <description value="Resource.id for Flag 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = 'OTH'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = 'OTH'))).id"/>
      <sourceId value="fixture-13-serve-Alert"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '468950001'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '468950001'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372687004'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372687004'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372567009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372567009'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '764146007'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '764146007'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '256440004'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '256440004'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 6"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372666009'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372666009'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 7"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').where(valueCode.where($this = 'OTH')))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').where(valueCode.where($this = 'OTH')))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 8"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '44588005'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '44588005'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 9"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '260171000146104'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '260171000146104'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id"/>
      <description value="Resource.id for AllergyIntolerance 10"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372786004'))).id'-->
      <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372786004'))).id"/>
      <sourceId value="fixture-14-serve-AllergyIntolerance"/>
   </variable>
   <variable>
      <name value="zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationStatement 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationStatement).id"/>
      <sourceId value="fixture-15-serve-MedicationUse"/>
   </variable>
   <variable>
      <name value="zib-Product-msz-445bf61a-6b38-11ec-0000-2-id"/>
      <description value="Resource.id for Medication 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).id'-->
      <expression value="Bundle.entry.resource.where($this is Medication).id"/>
      <sourceId value="fixture-15-serve-MedicationUse"/>
   </variable>
   <variable>
      <name value="zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationRequest 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129933'))).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129933'))).id"/>
      <sourceId value="fixture-16-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationRequest 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '5274'))).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '5274'))).id"/>
      <sourceId value="fixture-16-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationRequest 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129224'))).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129224'))).id"/>
      <sourceId value="fixture-16-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationRequest 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '58807'))).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '58807'))).id"/>
      <sourceId value="fixture-16-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-Product-msz-dd3ff04f-6b55-11ec-0000-2-id"/>
      <description value="Resource.id for Medication 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '129933'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '129933'))).id"/>
      <sourceId value="fixture-16-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-Product-msz-6150d14f-6aa4-11ec-0000-2-id"/>
      <description value="Resource.id for Medication 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '129224'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '129224'))).id"/>
      <sourceId value="fixture-16-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-Product-msz-65a08885-6abd-11ec-0000-2-id"/>
      <description value="Resource.id for Medication 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '58807'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '58807'))).id"/>
      <sourceId value="fixture-16-serve-MedicationAgreement"/>
   </variable>
   <variable>
      <name value="zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id"/>
      <description value="Resource.id for MedicationDispense 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).id'-->
      <expression value="Bundle.entry.resource.where($this is MedicationDispense).id"/>
      <sourceId value="fixture-17-serve-AdministrationAgreement"/>
   </variable>
   <variable>
      <name value="zib-Product-msz-81f63c4f-6ac8-11ec-0000-2-id"/>
      <description value="Resource.id for Medication 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).id'-->
      <expression value="Bundle.entry.resource.where($this is Medication).id"/>
      <sourceId value="fixture-17-serve-AdministrationAgreement"/>
   </variable>
   <variable>
      <name value="zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id"/>
      <description value="Resource.id for DeviceUseStatement 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).id'-->
      <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).id"/>
      <sourceId value="fixture-18-serve-MedicalDevice"/>
   </variable>
   <variable>
      <name value="zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id"/>
      <description value="Resource.id for Device 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).id'-->
      <expression value="Bundle.entry.resource.where($this is Device).id"/>
      <sourceId value="fixture-18-serve-MedicalDevice"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2024-10-02')).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2024-10-02')).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07AL01'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07AL01'))).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2022-10-01')).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2022-10-01')).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-05-20')).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-05-20')).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2023-10-03')).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2023-10-03')).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 6"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BC02'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BC02'))).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 7"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07AM01'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07AM01'))).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id"/>
      <description value="Resource.id for Immunization 8"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-07-03')).id'-->
      <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-07-03')).id"/>
      <sourceId value="fixture-19-serve-Vaccination"/>
   </variable>
   <variable>
      <name value="zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).id"/>
      <sourceId value="fixture-20-serve-BloodPressure"/>
   </variable>
   <variable>
      <name value="zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).id"/>
      <sourceId value="fixture-21-serve-BodyWeight"/>
   </variable>
   <variable>
      <name value="zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).id"/>
      <sourceId value="fixture-22-serve-BodyHeight"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '789-8')) and value.ofType(Quantity).value = 5.1).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '789-8')) and value.where($this is Quantity).value = 5.1).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59467-1')) and value.ofType(Quantity).value = 22).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59467-1')) and value.where($this is Quantity).value = 22).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '6690-2')) and value.ofType(Quantity).value = 10.6).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '6690-2')) and value.where($this is Quantity).value = 10.6).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59260-0')) and value.ofType(Quantity).value = 8.20).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59260-0')) and value.where($this is Quantity).value = 8.20).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '787-2')) and value.ofType(Quantity).value = 90).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '787-2')) and value.where($this is Quantity).value = 90).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 6"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59468-9')) and value.ofType(Quantity).value = 1.8).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59468-9')) and value.where($this is Quantity).value = 1.8).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 7"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '4544-3')) and value.ofType(Quantity).value = 0.42).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '4544-3')) and value.where($this is Quantity).value = 0.42).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 8"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '777-3')) and value.ofType(Quantity).value = 170).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '777-3')) and value.where($this is Quantity).value = 170).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 9"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Positief')).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Positief')).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 10"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '58410-2'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '58410-2'))).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id"/>
      <description value="Resource.id for Observation 11"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Negatief')).id'-->
      <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Negatief')).id"/>
      <sourceId value="fixture-23-serve-LaboratoryTestResult"/>
   </variable>
   <variable>
      <name value="zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id"/>
      <description value="Resource.id for ProcedureRequest 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(bodySite.where(coding.where(code = '6007000'))).id'-->
      <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(bodySite.where(coding.where(code = '6007000'))).id"/>
      <sourceId value="fixture-24-serve-ProcedureRequest"/>
   </variable>
   <variable>
      <name value="zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id"/>
      <description value="Resource.id for ProcedureRequest 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '172043006'))).id'-->
      <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '172043006'))).id"/>
      <sourceId value="fixture-24-serve-ProcedureRequest"/>
   </variable>
   <variable>
      <name value="zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id"/>
      <description value="Resource.id for ProcedureRequest 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '126071000146105'))).id'-->
      <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '126071000146105'))).id"/>
      <sourceId value="fixture-24-serve-ProcedureRequest"/>
   </variable>
   <variable>
      <name value="zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id"/>
      <description value="Resource.id for ProcedureRequest 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '102161000146108'))).id'-->
      <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '102161000146108'))).id"/>
      <sourceId value="fixture-24-serve-ProcedureRequest"/>
   </variable>
   <variable>
      <name value="zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id"/>
      <description value="Resource.id for ProcedureRequest 5"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '77381000146102'))).id'-->
      <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '77381000146102'))).id"/>
      <sourceId value="fixture-24-serve-ProcedureRequest"/>
   </variable>
   <variable>
      <name value="zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id"/>
      <description value="Resource.id for Encounter 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'AMB').id'-->
      <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'AMB').id"/>
      <sourceId value="fixture-25-serve-Contact"/>
   </variable>
   <variable>
      <name value="zib-Encounter-msz-db354652-6a95-11ec-0000-2-id"/>
      <description value="Resource.id for Encounter 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'EMER').id'-->
      <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'EMER').id"/>
      <sourceId value="fixture-25-serve-Contact"/>
   </variable>
   <variable>
      <name value="nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id"/>
      <description value="Resource.id for CareTeam 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(managingOrganization.resolve().where(identifier = '20000002')).id'-->
      <expression value="Bundle.entry.resource.where($this is CareTeam).where(managingOrganization.resolve().where(identifier = '20000002')).id"/>
      <sourceId value="fixture-26-serve-Careteam"/>
   </variable>
   <variable>
      <name value="nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id"/>
      <description value="Resource.id for CareTeam 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(managingOrganization.resolve().where(identifier = '20000007')).id'-->
      <expression value="Bundle.entry.resource.where($this is CareTeam).where(managingOrganization.resolve().where(identifier = '20000007')).id"/>
      <sourceId value="fixture-26-serve-Careteam"/>
   </variable>
   <variable>
      <name value="BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id"/>
      <description value="Resource.id for Provenance 1"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '85354-9'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '85354-9'))).id"/>
      <sourceId value="fixture-27-serve-Provenance"/>
   </variable>
   <variable>
      <name value="BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id"/>
      <description value="Resource.id for Provenance 2"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '29463-7'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '29463-7'))).id"/>
      <sourceId value="fixture-27-serve-Provenance"/>
   </variable>
   <variable>
      <name value="BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id"/>
      <description value="Resource.id for Provenance 3"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().valueCodeableConcept.where(coding.where(code = 'OTH'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().valueCodeableConcept.where(coding.where(code = 'OTH'))).id"/>
      <sourceId value="fixture-27-serve-Provenance"/>
   </variable>
   <variable>
      <name value="BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id"/>
      <description value="Resource.id for Provenance 4"/>
      <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '8302-2'))).id'-->
      <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '8302-2'))).id"/>
      <sourceId value="fixture-27-serve-Provenance"/>
   </variable>
   <test id="01-serve-Patient">
      <name value="Scenario 1.2 - Patient"/>
      <description value="Serve Patient resource including the patient's general practitioner for HCIM Patient"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Patient"/>
            <description value="Test Server to serve Patient resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;_include=Patient:general-practitioner"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-01-serve-Patient"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Patient - Check Patient"/>
      <description value="Check if the previous operation results in a FHIR Patient that contains the values that are expected following Nictiz' materials (fixture .id: MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Patient"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Patient).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Patient resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Patient'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Patient').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Patient').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .name with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-assembly-order' with .valueCode 'NL4' and .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-partner-name' with .valueString with a value, and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.ofType(code) = 'NL4' and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.ofType(string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.where($this is code) = 'NL4' and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.where($this is string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-1"/>
            <description value="Contains .name.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-assembly-order' with .valueCode 'NL4'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.ofType(code) = 'NL4').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.where($this is code) = 'NL4').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-2"/>
            <description value="Contains .name.family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-partner-name' with .valueString with a value. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-2-1"/>
            <description value="Contains .name.family with a value. This assert checks only one child. Assert 1-3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-2-2"/>
            <description value="Contains .name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-2-3"/>
            <description value="Contains .name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-partner-name' with .valueString with a value. This assert checks only one child. Assert 1-3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-3"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-3-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-3-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-4"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-4-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-3-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-4-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-3-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-5"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-5-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-3-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-5-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks only one child. Assert 1-3-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .telecom with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display and .system 'phone', and .value with a value, and .use 'home'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-1"/>
            <description value="Contains .telecom.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-2"/>
            <description value="Contains .telecom.system 'phone'. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(system = 'phone').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(system = 'phone').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-3"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-4"/>
            <description value="Contains .telecom.use 'home'. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .telecom with .system 'email', and .value with a value, and .use 'home'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(system = 'email' and value.hasValue() and use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(system = 'email' and value.hasValue() and use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-1"/>
            <description value="Contains .telecom.system 'email'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(system = 'email').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(system = 'email').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-2"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-3"/>
            <description value="Contains .telecom.use 'home'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').telecom.where(use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .gender 'female' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AdministrativeGender' and .code 'F' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').gender.where($this = 'female' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').gender.where($this = 'female' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-1"/>
            <description value="Contains .gender 'female'. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').gender = 'female''-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').gender = 'female'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-2"/>
            <description value="Contains .gender.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AdministrativeGender' and .code 'F' and .display. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').gender.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').gender.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AdministrativeGender' and code = 'F' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .birthDate"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').birthDate.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').birthDate.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .deceasedBoolean 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').deceased.ofType(boolean) = false'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').deceased.where($this is boolean) = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .address with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'PHYS' and .display and .use 'home', and .type 'physical', and .line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value, and .city with a value, and .district with a value, and .postalCode with a value, and .country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display) and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display) and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-1"/>
            <description value="Contains .address.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'PHYS' and .display. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'PHYS' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-2"/>
            <description value="Contains .address.use 'home'. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-3"/>
            <description value="Contains .address.type 'physical'. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(type = 'physical').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(type = 'physical').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-4"/>
            <description value="Contains .address.line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-4-1"/>
            <description value="Contains .address.line with a value. This assert checks only one child. Assert 1-9-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-4-2"/>
            <description value="Contains .address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value. This assert checks only one child. Assert 1-9-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-4-3"/>
            <description value="Contains .address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-9-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-5"/>
            <description value="Contains .address.city with a value. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(city.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(city.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-6"/>
            <description value="Contains .address.district with a value. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(district.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(district.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-7"/>
            <description value="Contains .address.postalCode with a value. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(postalCode.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(postalCode.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-8"/>
            <description value="Contains .address.country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display)).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display)).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-8-1"/>
            <description value="Contains .address.country with a value. This assert checks only one child. Assert 1-9-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(country.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(country.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-8-2"/>
            <description value="Contains .address.country.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks only one child. Assert 1-9-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').address.where(country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').address.where(country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .multipleBirthBoolean 'true'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').multipleBirth.ofType(boolean) = true'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').multipleBirth.where($this is boolean) = true"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11"/>
            <description value="Contains .contact with .relationship with .coding with .system 'http://hl7.org/fhir/v3/RoleCode' and .code 'DOMPART' and .display, and .relationship with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.22.472' and .code '1' and .display, and .name with .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-partner-name' with .valueString with a value and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR' and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN' and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL', and .telecom with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display and .system 'phone' and .value with a value and .use 'home', and .telecom with .system 'email' and .value with a value and .use 'home', and .address with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'HP' and .display and .extension with url 'http://fhir.nl/fhir/StructureDefinition/nl-core-address-official' with .valueBoolean 'true' and .use 'home' and .type 'physical' and .line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value and .city with a value and .district with a value and .postalCode with a value and .country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and .version and .code '6030' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(relationship.where(coding.where(system = 'http://hl7.org/fhir/v3/RoleCode' and code = 'DOMPART' and display)) and relationship.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.22.472' and code = '1' and display)) and name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.ofType(string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL')) and telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home') and telecom.where(system = 'email' and value.hasValue() and use = 'home') and address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'HP' and display) and extension('http://fhir.nl/fhir/StructureDefinition/nl-core-address-official').value.ofType(boolean) = true and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display)))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(relationship.where(coding.where(system = 'http://hl7.org/fhir/v3/RoleCode' and code = 'DOMPART' and display)) and relationship.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.22.472' and code = '1' and display)) and name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.where($this is string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL')) and telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home') and telecom.where(system = 'email' and value.hasValue() and use = 'home') and address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'HP' and display) and extension('http://fhir.nl/fhir/StructureDefinition/nl-core-address-official').value.where($this is boolean) = true and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display)))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-1"/>
            <description value="Contains .contact.relationship with .coding with .system 'http://hl7.org/fhir/v3/RoleCode' and .code 'DOMPART' and .display. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(relationship.where(coding.where(system = 'http://hl7.org/fhir/v3/RoleCode' and code = 'DOMPART' and display)).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(relationship.where(coding.where(system = 'http://hl7.org/fhir/v3/RoleCode' and code = 'DOMPART' and display)).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-2"/>
            <description value="Contains .contact.relationship with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.22.472' and .code '1' and .display. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(relationship.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.22.472' and code = '1' and display)).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(relationship.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.22.472' and code = '1' and display)).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3"/>
            <description value="Contains .contact.name with .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-partner-name' with .valueString with a value, and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.ofType(string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL')).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.where($this is string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL')).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-1"/>
            <description value="Contains .contact.name.family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-partner-name' with .valueString with a value. This assert checks only one child. Assert 1-11-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-1-1"/>
            <description value="Contains .contact.name.family with a value. This assert checks only one child. Assert 1-11-3-1 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-1-2"/>
            <description value="Contains .contact.name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-11-3-1 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-1-3"/>
            <description value="Contains .contact.name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-partner-name' with .valueString with a value. This assert checks only one child. Assert 1-11-3-1 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.family.extension('http://hl7.org/fhir/StructureDefinition/humanname-partner-name').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-2"/>
            <description value="Contains .contact.name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-11-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-2-1"/>
            <description value="Contains .contact.name.given with a value. This assert checks only one child. Assert 1-11-3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-2-2"/>
            <description value="Contains .contact.name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-11-3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-3"/>
            <description value="Contains .contact.name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-11-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-3-1"/>
            <description value="Contains .contact.name.given with a value. This assert checks only one child. Assert 1-11-3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-3-2"/>
            <description value="Contains .contact.name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-11-3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-4"/>
            <description value="Contains .contact.name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks only one child. Assert 1-11-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-4-1"/>
            <description value="Contains .contact.name.given with a value. This assert checks only one child. Assert 1-11-3-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-3-4-2"/>
            <description value="Contains .contact.name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks only one child. Assert 1-11-3-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(name.given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-4"/>
            <description value="Contains .contact.telecom with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display and .system 'phone', and .value with a value, and .use 'home'. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display) and system = 'phone' and value.hasValue() and use = 'home').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-4-1"/>
            <description value="Contains .contact.telecom.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'MC' and .display. This assert checks only one child. Assert 1-11-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'MC' and display).exists())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-4-2"/>
            <description value="Contains .contact.telecom.system 'phone'. This assert checks only one child. Assert 1-11-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(system = 'phone')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(system = 'phone')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-4-3"/>
            <description value="Contains .contact.telecom.value with a value. This assert checks only one child. Assert 1-11-4 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(value.hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(value.hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-4-4"/>
            <description value="Contains .contact.telecom.use 'home'. This assert checks only one child. Assert 1-11-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(use = 'home')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(use = 'home')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-5"/>
            <description value="Contains .contact.telecom with .system 'email', and .value with a value, and .use 'home'. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(system = 'email' and value.hasValue() and use = 'home').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(system = 'email' and value.hasValue() and use = 'home').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-5-1"/>
            <description value="Contains .contact.telecom.system 'email'. This assert checks only one child. Assert 1-11-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(system = 'email')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(system = 'email')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-5-2"/>
            <description value="Contains .contact.telecom.value with a value. This assert checks only one child. Assert 1-11-5 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(value.hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(value.hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-5-3"/>
            <description value="Contains .contact.telecom.use 'home'. This assert checks only one child. Assert 1-11-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(use = 'home')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(telecom.where(use = 'home')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6"/>
            <description value="Contains .contact.address with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'HP' and .display and .extension with url 'http://fhir.nl/fhir/StructureDefinition/nl-core-address-official' with .valueBoolean 'true' and .use 'home', and .type 'physical', and .line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value, and .city with a value, and .district with a value, and .postalCode with a value, and .country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and .version and .code '6030' and .display. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'HP' and display) and extension('http://fhir.nl/fhir/StructureDefinition/nl-core-address-official').value.ofType(boolean) = true and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display))).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'HP' and display) and extension('http://fhir.nl/fhir/StructureDefinition/nl-core-address-official').value.where($this is boolean) = true and use = 'home' and type = 'physical' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display))).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-1"/>
            <description value="Contains .contact.address.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'HP' and .display. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'HP' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'HP' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-2"/>
            <description value="Contains .contact.address.extension with url 'http://fhir.nl/fhir/StructureDefinition/nl-core-address-official' with .valueBoolean 'true'. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.extension('http://fhir.nl/fhir/StructureDefinition/nl-core-address-official').value.ofType(boolean) = true).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.extension('http://fhir.nl/fhir/StructureDefinition/nl-core-address-official').value.where($this is boolean) = true).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-3"/>
            <description value="Contains .contact.address.use 'home'. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.use = 'home').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.use = 'home').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-4"/>
            <description value="Contains .contact.address.type 'physical'. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.type = 'physical').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.type = 'physical').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-5"/>
            <description value="Contains .contact.address.line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-5-1"/>
            <description value="Contains .contact.address.line with a value. This assert checks only one child. Assert 1-11-6-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-5-2"/>
            <description value="Contains .contact.address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value. This assert checks only one child. Assert 1-11-6-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-5-3"/>
            <description value="Contains .contact.address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-11-6-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-6"/>
            <description value="Contains .contact.address.city with a value. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.city.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.city.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-7"/>
            <description value="Contains .contact.address.district with a value. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.district.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.district.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-8"/>
            <description value="Contains .contact.address.postalCode with a value. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.postalCode.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.postalCode.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-9"/>
            <description value="Contains .contact.address.country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and .version and .code '6030' and .display. This assert checks only one child. Assert 1-11-6 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display)).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display)).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-9-1"/>
            <description value="Contains .contact.address.country with a value. This assert checks only one child. Assert 1-11-6-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.country.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.country.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-6-9-2"/>
            <description value="Contains .contact.address.country.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and .version and .code '6030' and .display. This assert checks only one child. Assert 1-11-6-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').contact.where(address.country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.16.34' and version and code = '6030' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12"/>
            <description value="Contains .generalPractitioner with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12-1"/>
            <description value="Contains .generalPractitioner.extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display. This assert checks only one child. Assert 1-12 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').generalPractitioner.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12-1"/>
            <description value="Contains .generalPractitioner with either .reference or .identifier and .display. This assert checks only one child. Assert 1-12 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Patient).where(id = '${MICHELLE-M-B- -MICHELLE-BERGZOON-VERHEUL-id}').generalPractitioner.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Patient).where(id = '${MICHELLE-M-B--MICHELLE-BERGZOON-VERHEUL-id}').generalPractitioner.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Patient - Check Practitioner"/>
      <description value="Check if the previous operation results in a FHIR Practitioner that contains the values that are expected following Nictiz' materials (fixture .id: nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Practitioner"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Practitioner resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-practitioner'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-practitioner').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-practitioner').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .name with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-assembly-order' with .valueCode 'NL1' and .family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value, and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN', and .given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.ofType(code) = 'NL1' and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.where($this is code) = 'NL1' and family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()) and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN') and given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-1"/>
            <description value="Contains .name.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-assembly-order' with .valueCode 'NL1'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.ofType(code) = 'NL1').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(extension('http://hl7.org/fhir/StructureDefinition/humanname-assembly-order').value.where($this is code) = 'NL1').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-2"/>
            <description value="Contains .name.family with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(family.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-2-1"/>
            <description value="Contains .name.family with a value. This assert checks only one child. Assert 1-3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(family.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(family.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-2-2"/>
            <description value="Contains .name.family.extension with url 'http://hl7.org/fhir/StructureDefinition/humanname-own-name' with .valueString with a value. This assert checks only one child. Assert 1-3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(family.extension('http://hl7.org/fhir/StructureDefinition/humanname-own-name').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-3"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-3-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-3-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'BR'. This assert checks only one child. Assert 1-3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'BR')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'BR')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-4"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-4-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-3-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-4-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'IN'. This assert checks only one child. Assert 1-3-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'IN')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'IN')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-5"/>
            <description value="Contains .name.given with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks only one child. Assert 1-3 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-5-1"/>
            <description value="Contains .name.given with a value. This assert checks only one child. Assert 1-3-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3-5-2"/>
            <description value="Contains .name.given.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier' with .valueCode 'CL'. This assert checks only one child. Assert 1-3-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.ofType(code) = 'CL')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').name.where(given.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier').value.where($this is code) = 'CL')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .telecom with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and .code 'LL' and .display and .system 'phone', and .value with a value, and .use 'work'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display) and system = 'phone' and value.hasValue() and use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display) and system = 'phone' and value.hasValue() and use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-1"/>
            <description value="Contains .telecom.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and .code 'LL' and .display. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-2"/>
            <description value="Contains .telecom.system 'phone'. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(system = 'phone').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(system = 'phone').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-3"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-4"/>
            <description value="Contains .telecom.use 'work'. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .telecom with .system 'email', and .value with a value, and .use 'work'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(system = 'email' and value.hasValue() and use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(system = 'email' and value.hasValue() and use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-1"/>
            <description value="Contains .telecom.system 'email'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(system = 'email').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(system = 'email').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-2"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-3"/>
            <description value="Contains .telecom.use 'work'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').telecom.where(use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .address with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'WP' and .display and .use 'work', and .line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value, and .city with a value, and .district with a value, and .postalCode with a value, and .country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'WP' and display) and use = 'work' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'WP' and display) and use = 'work' and line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()) and city.hasValue() and district.hasValue() and postalCode.hasValue() and country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-1"/>
            <description value="Contains .address.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/AddressUse' and .code 'WP' and .display. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'WP' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-AddressInformation-AddressType').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/AddressUse' and code = 'WP' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-2"/>
            <description value="Contains .address.use 'work'. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3"/>
            <description value="Contains .address.line with a value and with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value and .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where($this.hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue() and extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3-1"/>
            <description value="Contains .address.line with a value. This assert checks only one child. Assert 1-6-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where($this.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where($this.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3-2"/>
            <description value="Contains .address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName' with .valueString with a value. This assert checks only one child. Assert 1-6-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-3-3"/>
            <description value="Contains .address.line.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber' with .valueString with a value. This assert checks only one child. Assert 1-6-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.ofType(string).hasValue())).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(line.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber').value.where($this is string).hasValue())).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-4"/>
            <description value="Contains .address.city with a value. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(city.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(city.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-5"/>
            <description value="Contains .address.district with a value. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(district.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(district.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-6"/>
            <description value="Contains .address.postalCode with a value. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(postalCode.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(postalCode.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-7"/>
            <description value="Contains .address.country with a value and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks only one child. Assert 1-6 checks if all children are present in the same parent. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display)).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(country.where($this.hasValue() and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display)).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-7-1"/>
            <description value="Contains .address.country with a value. This assert checks only one child. Assert 1-6-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(country.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(country.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6-7-2"/>
            <description value="Contains .address.country.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:iso:std:iso:3166' and .version and .code 'NL' and .display. This assert checks only one child. Assert 1-6-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Practitioner).where(id = '${nl-core-practitioner-msz-2-16-840-1-113883-2-4-6-1-00131313-id}').address.where(country.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:iso:std:iso:3166' and version and code = 'NL' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test id="02-serve-Payer">
      <name value="Scenario 1.2 - Payer"/>
      <description value="Serve Coverage resource(s) including the insurer for HCIM Payer"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Coverage"/>
            <description value="Test Server to serve Coverage resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?beneficiary.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;_include=Coverage:payor:Patient&amp;_include=Coverage:payor:Organization"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-02-serve-Payer"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Payer - Check Coverage"/>
      <description value="Check if the previous operation results in a FHIR Coverage that contains the values that are expected following Nictiz' materials (fixture .id: zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Coverage"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Coverage resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Payer'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Payer').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Payer').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .type with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.101.5.1' and .code 'B' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').type.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.101.5.1' and code = 'B' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').type.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.101.5.1' and code = 'B' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .subscriber with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').subscriber.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').subscriber.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subscriberId with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').subscriberId.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').subscriberId.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .beneficiary with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').beneficiary.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').beneficiary.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .period with .start and .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').period.where(start and end).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').period.where(start and end).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .payor with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').payor.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Coverage).where(id = '${zib-Payer-msz-9d4cf685-6b38-11ec-0000-2-1-id}').payor.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Payer - Check Organization"/>
      <description value="Check if the previous operation results in a FHIR Organization that contains the values that are expected following Nictiz' materials (fixture .id: nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Organization"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Organization).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Organization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-organization'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-organization').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-organization').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').identifier.where(system and value).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').identifier.where(system and value).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .name with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').name.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').name.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .telecom with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and .code 'LL' and .display and .system 'phone', and .value with a value, and .use 'work'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display) and system = 'phone' and value.hasValue() and use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display) and system = 'phone' and value.hasValue() and use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-1"/>
            <description value="Contains .telecom.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and .code 'LL' and .display. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-ContactInformation-TelecomType').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.22.1' and code = 'LL' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-2"/>
            <description value="Contains .telecom.system 'phone'. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(system = 'phone').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(system = 'phone').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-3"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4-4"/>
            <description value="Contains .telecom.use 'work'. This assert checks only one child. Assert 1-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .telecom with .system 'email', and .value with a value, and .use 'work'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(system = 'email' and value.hasValue() and use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(system = 'email' and value.hasValue() and use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-1"/>
            <description value="Contains .telecom.system 'email'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(system = 'email').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(system = 'email').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-2"/>
            <description value="Contains .telecom.value with a value. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(value.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(value.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5-3"/>
            <description value="Contains .telecom.use 'work'. This assert checks only one child. Assert 1-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(use = 'work').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Organization).where(id = '${nl-core-organization-msz-2-16-840-1-113883-2-4-6-4-1901-id}').telecom.where(use = 'work').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="03-serve-TreatmentDirective">
      <name value="Scenario 1.2 - TreatmentDirective"/>
      <description value="Serve Consent resource(s) for HCIM TreatmentDirective"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Consent"/>
            <description value="Test Server to serve Consent resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;category=http://snomed.info/sct|11291000146105"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-03-serve-TreatmentDirective"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - TreatmentDirective - Check Consent 1"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent with properties: contains .period.start = '2024-06-26' extension.valueCodeableConcept.coding.code = '89666000'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '89666000')))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '89666000')))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '89666000')))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '89666000')))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification' with .extension with url 'Verified' with .valueBoolean 'true' and .extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '116154003' and .display and .extension with url 'VerificationDate' with .valueDateTime. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.ofType(boolean) = true and extension('VerifiedWith').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display) and extension('VerificationDate').value.ofType(dateTime)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.where($this is boolean) = true and extension('VerifiedWith').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display) and extension('VerificationDate').value.where($this is dateTime)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-1"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'Verified' with .valueBoolean 'true'. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.ofType(boolean) = true'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.where($this is boolean) = true"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-2"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '116154003' and .display. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-3"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerificationDate' with .valueDateTime. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '89666000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '89666000' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '89666000' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .modifierExtension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and .code 'JA' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11291000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-5ee22d26-6aaa-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - TreatmentDirective - Check Consent 2"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent with properties: contains .period.start = '2024-06-26' and extension.valueCodeableConcept.coding.code = 'OTH'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = 'OTH')))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = 'OTH')))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = 'OTH')))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = 'OTH')))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification' with .extension with url 'Verified' with .valueBoolean 'true' and .extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '8601000146109' and .display and .extension with url 'VerificationDate' with .valueDateTime. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.ofType(boolean) = true and extension('VerifiedWith').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '8601000146109' and display) and extension('VerificationDate').value.ofType(dateTime)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.where($this is boolean) = true and extension('VerifiedWith').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '8601000146109' and display) and extension('VerificationDate').value.where($this is dateTime)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-1"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'Verified' with .valueBoolean 'true'. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.ofType(boolean) = true'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.where($this is boolean) = true"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-2"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '8601000146109' and .display. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '8601000146109' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '8601000146109' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-3"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerificationDate' with .valueDateTime. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.ofType(CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.where($this is CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .modifierExtension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and .code 'JA' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11291000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-25ba1455-6b28-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - TreatmentDirective - Check Consent 3"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent with properties: contains .period.start = '2007-07-07'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2007-07-07')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2007-07-07')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2007-07-07')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2007-07-07')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification' with .extension with url 'Verified' with .valueBoolean 'false'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.ofType(boolean) = false'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.where($this is boolean) = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.ofType(CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.where($this is CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .modifierExtension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and .code 'NEE' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'NEE' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'NEE' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11291000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-9"/>
            <description value="Contains .sourceReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').source.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').source.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-086ed24f-6b24-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - TreatmentDirective - Check Consent 4"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent with properties: contains .period.start = '2024-06-26' extension.valueCodeableConcept.coding.code = '40617009'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '40617009')))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '40617009')))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '40617009')))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '40617009')))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification' with .extension with url 'Verified' with .valueBoolean 'true' and .extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value and .extension with url 'VerificationDate' with .valueDateTime. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.ofType(boolean) = true and extension('VerifiedWith').value.ofType(CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and extension('VerificationDate').value.ofType(dateTime)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.where($this is boolean) = true and extension('VerifiedWith').value.where($this is CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and extension('VerificationDate').value.where($this is dateTime)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-1"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'Verified' with .valueBoolean 'true'. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.ofType(boolean) = true'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.where($this is boolean) = true"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-2"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.ofType(CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.where($this is CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-3"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerificationDate' with .valueDateTime. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '40617009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '40617009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '40617009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .modifierExtension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and .code 'JA_MAAR' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA_MAAR' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA_MAAR' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11291000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-9"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10"/>
            <description value="Contains .except with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Restrictions' with .valueString with a value and .type 'deny'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').except.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Restrictions').value.ofType(string).hasValue() and type = 'deny').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').except.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Restrictions').value.where($this is string).hasValue() and type = 'deny').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10-1"/>
            <description value="Contains .except.extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Restrictions' with .valueString with a value. This assert checks only one child. Assert 4-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').except.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Restrictions').value.ofType(string).hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').except.where(extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Restrictions').value.where($this is string).hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10-2"/>
            <description value="Contains .except.type 'deny'. This assert checks only one child. Assert 4-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').except.where(type = 'deny').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-499dc566-6ad1-11ec-0000-2-id}').except.where(type = 'deny').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - TreatmentDirective - Check Consent 5"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent with properties: contains .period.start = '2024-06-26' and extension.valueCodeableConcept.coding.code = '305351004'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '305351004')))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '305351004')))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(period.where(start = '2024-06-26')                 and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '305351004')))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(period.where(start = '2024-06-26') and extension.where(url='http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').where(valueCodeableConcept.where(coding.where(code = '305351004')))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification' with .extension with url 'Verified' with .valueBoolean 'true' and .extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '116154003' and .display and .extension with url 'VerificationDate' with .valueDateTime. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.ofType(boolean) = true and extension('VerifiedWith').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display) and extension('VerificationDate').value.ofType(dateTime)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').where(extension('Verified').value.where($this is boolean) = true and extension('VerifiedWith').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display) and extension('VerificationDate').value.where($this is dateTime)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-1"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'Verified' with .valueBoolean 'true'. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.ofType(boolean) = true'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('Verified').value.where($this is boolean) = true"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-2"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerifiedWith' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '116154003' and .display. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerifiedWith').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '116154003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-3"/>
            <description value="Contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension with url 'VerificationDate' with .valueDateTime. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Verification').extension('VerificationDate').value.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '305351004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '305351004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-Treatment').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '305351004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .modifierExtension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and .code 'JA_MAAR' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA_MAAR' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').modifierExtension.where(url = 'http://nictiz.nl/fhir/StructureDefinition/zib-TreatmentDirective-TreatmentPermitted').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4' and code = 'JA_MAAR' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11291000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11291000146105' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-8"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-9"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-10"/>
            <description value="Contains .except with .type 'deny'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').except.where(type = 'deny').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-TreatmentDirective-msz-86948146-6aa2-11ec-0000-2-id}').except.where(type = 'deny').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="04-serve-AdvanceDirective">
      <name value="Scenario 1.2 - AdvanceDirective"/>
      <description value="Serve Consent resource(s) for HCIM AdvanceDirective"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Consent"/>
            <description value="Test Server to serve Consent resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;category=http://snomed.info/sct|11341000146107"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-04-serve-AdvanceDirective"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
        "</test>
   <test>
      <name value="Scenario 1.2 - AdvanceDirective - Check Consent 1"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent with properties: contains .category.coding.code = 'VOL'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(category.where(coding.where(code = 'VOL'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(category.where(coding.where(code = 'VOL'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(category.where(coding.where(code = 'VOL'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(category.where(coding.where(code = 'VOL'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/Comment' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/Comment').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/Comment').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11341000146107' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11341000146107' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11341000146107' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .category with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and .code 'VOL' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and code = 'VOL' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and code = 'VOL' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .dateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').dateTime.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').dateTime.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-6b7d6b0f-6aa5-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AdvanceDirective - Check Consent 2"/>
      <description value="Check if the previous operation results in a FHIR Consent that contains the values that are expected following Nictiz' materials (fixture .id: zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Consent with properties: contains .category.coding.code = 'LW'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(category.where(coding.where(code = 'LW'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(category.where(coding.where(code = 'LW'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Consent resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(category.where(coding.where(code = 'LW'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(category.where(coding.where(code = 'LW'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdvanceDirective').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '11341000146107' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11341000146107' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '11341000146107' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .category with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and .code 'NR' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and code = 'NR' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.14.1' and code = 'NR' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .dateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').dateTime.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').dateTime.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .sourceAttachment with .contentType and with either .data or .url"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').source.ofType(Attachment).where(contentType and (data or url)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').source.where($this is Attachment).where(contentType and (data or url)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .policy with .uri"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').policy.where(uri).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Consent).where(id = '${zib-AdvanceDirective-msz-bdea798d-6b5d-11ec-0000-2-id}').policy.where(uri).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="05-serve-ContactPerson">
      <name value="Scenario 1.2 - ContactPerson"/>
      <description value="Serve Patient resource (which contains the patient's first contact person) for HCIM ContactPerson"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Patient"/>
            <description value="Test Server to serve Patient resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 Patient resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Patient)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="06-serve-FunctionalOrMentalStatus">
      <name value="Scenario 1.2 - FunctionalOrMentalStatus"/>
      <description value="Serve Observation resource(s) for HCIM FunctionalOrMentalStatus"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;category=http://snomed.info/sct|118228005,http://snomed.info/sct|384821006"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-06-serve-FunctionalOrMentalStatus"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - FunctionalOrMentalStatus - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '713512009'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '713512009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '713512009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '713512009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '713512009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-FunctionalOrMentalStatus-MedicalDevice' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-FunctionalOrMentalStatus-MedicalDevice').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-FunctionalOrMentalStatus-MedicalDevice').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '118228005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '118228005' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '118228005' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '713512009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '713512009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '713512009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .effectivePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').effective.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').effective.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '6736007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '6736007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '6736007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-8fa9c16d-6b31-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - FunctionalOrMentalStatus - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '425131000'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '425131000'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '425131000'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '425131000'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '425131000'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '384821006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '384821006' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '384821006' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '425131000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '425131000' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '425131000' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '24484000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24484000' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24484000' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-13a18ed2-6b69-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - FunctionalOrMentalStatus - Check Observation 3"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '129006008'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '129006008'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '129006008'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '129006008'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '129006008'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-FunctionalOrMentalStatus').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '118228005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '118228005' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '118228005' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '129006008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '129006008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '129006008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .effectivePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').effective.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').effective.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '260413007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '260413007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '260413007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${BgZ-FuncMentStat-msz-50fc09cf-6ab0-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test id="07-serve-Problem">
      <name value="Scenario 1.2 - Problem"/>
      <description value="Serve Condition resource(s) for HCIM Problem"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Condition"/>
            <description value="Test Server to serve Condition resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-07-serve-Problem"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 1"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '266287006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '266287006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '266287006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '266287006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '266287006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '266287006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '266287006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '266287006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-f6e41f8e-6b5f-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 2"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '409586006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '409586006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '409586006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '409586006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '409586006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '409586006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '409586006' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '409586006' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .code with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor' with .valueCode 'OTH' and .text with a value. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').code.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.ofType(code) = 'OTH' and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').code.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.where($this is code) = 'OTH' and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4-1"/>
            <description value="Contains .code.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor' with .valueCode 'OTH'. This assert checks only one child. Assert 2-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.ofType(code) = 'OTH''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.where($this is code) = 'OTH'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4-1"/>
            <description value="Contains .code with .text with a value. This assert checks only one child. Assert 2-4 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').code.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').code.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-4e9a4ade-6b36-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 3"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '230690007'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '230690007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '230690007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '230690007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '230690007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .verificationStatus 'confirmed' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '410605003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').verificationStatus.where($this = 'confirmed' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').verificationStatus.where($this = 'confirmed' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3-1"/>
            <description value="Contains .verificationStatus 'confirmed'. This assert checks only one child. Assert 3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3-2"/>
            <description value="Contains .verificationStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '410605003' and .display. This assert checks only one child. Assert 3-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').verificationStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').verificationStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '282291009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '230690007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '230690007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '230690007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .bodySite with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '7771000' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '7771000' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '7771000' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-5b64cf75-6b76-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 4"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '266588002'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '266588002'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '266588002'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '266588002'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '266588002'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '266588002' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '266588002' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '266588002' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8ffe2b02-6b7d-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 5"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '40275004'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '40275004'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '40275004'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '40275004'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '40275004'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .code with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with and .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with and .coding with .system 'http://snomed.info/sct' and .code '40275004' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').code.where( and  and coding.where(system = 'http://snomed.info/sct' and code = '40275004' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').code.where( and and coding.where(system = 'http://snomed.info/sct' and code = '40275004' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3-2"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '40275004' and .display. This assert checks only one child. Assert 5-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').code.where(coding.where(system = 'http://snomed.info/sct' and code = '40275004' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').code.where(coding.where(system = 'http://snomed.info/sct' and code = '40275004' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-9bd3ddcf-6b5e-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 6"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '64859006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '64859006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '64859006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '64859006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '64859006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '282291009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '64859006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '64859006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '64859006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-31bf4dcf-6b18-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 7"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '412734009'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '412734009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '412734009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '412734009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '412734009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 7-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 7-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '412734009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '412734009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '412734009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-5"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39addcda-6b3b-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 8"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '254837009'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '254837009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '254837009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '254837009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '254837009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 8-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 8-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3"/>
            <description value="Contains .verificationStatus 'confirmed' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '410605003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').verificationStatus.where($this = 'confirmed' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').verificationStatus.where($this = 'confirmed' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3-1"/>
            <description value="Contains .verificationStatus 'confirmed'. This assert checks only one child. Assert 8-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3-2"/>
            <description value="Contains .verificationStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '410605003' and .display. This assert checks only one child. Assert 8-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').verificationStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').verificationStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '282291009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-5"/>
            <description value="Contains .code with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with and .coding with .system 'http://snomed.info/sct' and .code '254837009' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').code.where( and coding.where(system = 'http://snomed.info/sct' and code = '254837009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').code.where( and coding.where(system = 'http://snomed.info/sct' and code = '254837009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-5-1"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '254837009' and .display. This assert checks only one child. Assert 8-5 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').code.where(coding.where(system = 'http://snomed.info/sct' and code = '254837009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').code.where(coding.where(system = 'http://snomed.info/sct' and code = '254837009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-6"/>
            <description value="Contains .bodySite with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '24028007' and .display and .coding with .system 'http://snomed.info/sct' and .code '76752008' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display) and coding.where(system = 'http://snomed.info/sct' and code = '76752008' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display) and coding.where(system = 'http://snomed.info/sct' and code = '76752008' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-6-1"/>
            <description value="Contains .bodySite.extension with url 'http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '24028007' and .display. This assert checks only one child. Assert 8-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-6-1"/>
            <description value="Contains .bodySite with .coding with .system 'http://snomed.info/sct' and .code '76752008' and .display. This assert checks only one child. Assert 8-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '76752008' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '76752008' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-74fb0875-6b10-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 9"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '58126003'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '58126003'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '58126003'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '58126003'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '58126003'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 9-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 9-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '116223007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '116223007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '116223007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '58126003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '58126003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '58126003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-5"/>
            <description value="Contains .bodySite with .coding with .system 'http://snomed.info/sct' and .code '73056007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '73056007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '73056007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-7"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-8"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-8292b2ca-6b5b-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 10"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-490501cf-6abc-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.extension.valueCode = 'OTH'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(valueCode = 'OTH'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(valueCode = 'OTH'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(valueCode = 'OTH'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(valueCode = 'OTH'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 10-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 10-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-3"/>
            <description value="Contains .code with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor' with .valueCode 'OTH' and .text with a value. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').code.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.ofType(code) = 'OTH' and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').code.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.where($this is code) = 'OTH' and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-3-1"/>
            <description value="Contains .code.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor' with .valueCode 'OTH'. This assert checks only one child. Assert 10-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.ofType(code) = 'OTH''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.where($this is code) = 'OTH'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-3-1"/>
            <description value="Contains .code with .text with a value. This assert checks only one child. Assert 10-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').code.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').code.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-5"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-490501cf-6abc-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 11"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-774419cf-6a96-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '233604007'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '233604007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '233604007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '233604007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '233604007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2"/>
            <description value="Contains .clinicalStatus 'inactive' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '73425007' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').clinicalStatus.where($this = 'inactive' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').clinicalStatus.where($this = 'inactive' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2-1"/>
            <description value="Contains .clinicalStatus 'inactive'. This assert checks only one child. Assert 11-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').clinicalStatus = 'inactive''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').clinicalStatus = 'inactive'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '73425007' and .display. This assert checks only one child. Assert 11-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '73425007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '282291009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '233604007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '233604007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '233604007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-7"/>
            <description value="Contains .abatementDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').abatement.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').abatement.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-8"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-774419cf-6a96-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 12"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-39835696-6b0d-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '13644009'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '13644009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '13644009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '13644009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '13644009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 12-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 12-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '13644009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '13644009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '13644009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="12-5"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-39835696-6b0d-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 13"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '108691000119102'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '108691000119102'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '108691000119102'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '108691000119102'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '108691000119102'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 13-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 13-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-3"/>
            <description value="Contains .verificationStatus 'confirmed' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '410605003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').verificationStatus.where($this = 'confirmed' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').verificationStatus.where($this = 'confirmed' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-3-1"/>
            <description value="Contains .verificationStatus 'confirmed'. This assert checks only one child. Assert 13-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-3-2"/>
            <description value="Contains .verificationStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '410605003' and .display. This assert checks only one child. Assert 13-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').verificationStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').verificationStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '410605003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '248536006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '248536006' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '248536006' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-5"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '108691000119102' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '108691000119102' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '108691000119102' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-6"/>
            <description value="Contains .bodySite with .coding with .system 'http://snomed.info/sct' and .code '6921000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '6921000' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '6921000' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-8"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="13-9"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-cef4f3cf-6b67-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 14"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '44054006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '44054006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '44054006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '44054006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '44054006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 14-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 14-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '44054006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '44054006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '44054006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="14-5"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d2f616ba-6ae5-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Problem - Check Condition 15"/>
      <description value="Check if the previous operation results in a FHIR Condition that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Condition with properties: contains .code.coding.code = '250731000146107'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '250731000146107'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '250731000146107'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Condition resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(code.where(coding.where(code = '250731000146107'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(code.where(coding.where(code = '250731000146107'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Problem').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 15-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '55561003' and .display. This assert checks only one child. Assert 15-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '55561003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '282291009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '282291009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '250731000146107' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '250731000146107' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '250731000146107' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="15-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Condition).where(id = '${BgZ-Problem-msz-d537a572-6b4b-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="08-serve-LivingSituation">
      <name value="Scenario 1.2 - LivingSituation"/>
      <description value="Serve Observation resource(s) for last known HCIM LivingSituation"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;code=http://snomed.info/sct|365508006"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-08-serve-LivingSituation"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LivingSituation - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = 'BENEDENW'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'BENEDENW'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'BENEDENW'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'BENEDENW'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'BENEDENW'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '365508006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365508006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365508006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and .code 'BENEDENW' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and code = 'BENEDENW' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and code = 'BENEDENW' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-1fcbd981-6ae5-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LivingSituation - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = 'FLATW'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'FLATW'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'FLATW'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'FLATW'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'FLATW'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LivingSituation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '365508006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365508006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365508006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and .code 'FLATW' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and code = 'FLATW' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.13.1' and code = 'FLATW' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LivingSituation-msz-caec806a-6b73-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test id="09-serve-DrugUse">
      <name value="Scenario 1.2 - DrugUse"/>
      <description value="Serve Observation resource(s) for HCIM DrugUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;code=http://snomed.info/sct|228366006"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-09-serve-DrugUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - DrugUse - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '44870007'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '44870007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '44870007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '44870007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '44870007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228366006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '44870007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '44870007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '44870007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '410942007' and .display, and .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '398705004' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display) and value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '398705004' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display) and value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '398705004' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '410942007' and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '398705004' and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '398705004' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '398705004' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '410675002' and .display, and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '62' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410675002' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '62' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410675002' and display) and value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '62' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '410675002' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410675002' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410675002' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '62' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '62' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-4d519fa2-6b44-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '62' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - DrugUse - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = 'OTH'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'OTH'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'OTH'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = 'OTH'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = 'OTH'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-DrugUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228366006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228366006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .effectivePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').effective.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').effective.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').value.ofType(CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').value.where($this is CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '410942007' and .display, and .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '372800002' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display) and value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '372800002' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display) and value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '372800002' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '410942007' and .display. This assert checks only one child. Assert 2-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '410942007' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '372800002' and .display. This assert checks only one child. Assert 2-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '372800002' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-DrugUse-msz-9de5b8a5-6b4e-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '372800002' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="10-serve-AlcoholUse">
      <name value="Scenario 1.2 - AlcoholUse"/>
      <description value="Serve Observation resource(s) for HCIM AlcoholUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;code=http://snomed.info/sct|228273003"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-10-serve-AlcoholUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AlcoholUse - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '82581004'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '82581004'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '82581004'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '82581004'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '82581004'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228273003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '82581004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '82581004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '82581004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-22ab8d5a-6af2-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AlcoholUse - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '219006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '219006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '219006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '219006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '219006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AlcoholUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '228273003' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '228273003' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .effectivePeriod with .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').effective.ofType(Period).end.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').effective.where($this is Period).end.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '219006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '219006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '219006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '160573003' and .display, and .valueQuantity with .value '2' and .unit and .system 'http://unitsofmeasure.org' and .code matching regex '^\\{.+\\}/d$'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '160573003' and display) and value.ofType(Quantity).where(value = 2 and unit and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}/d$'))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '160573003' and display) and value.where($this is Quantity).where(value = 2 and unit and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}/d$'))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '160573003' and .display. This assert checks only one child. Assert 2-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '160573003' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '160573003' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-2"/>
            <description value="Contains .component.valueQuantity with .value '2' and .unit and .system 'http://unitsofmeasure.org' and .code matching regex '^\\{.+\\}/d$'. This assert checks only one child. Assert 2-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').component.where(value.ofType(Quantity).where(value = 2 and unit and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}/d$')).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-AlcoholUse-msz-acf5b365-6a9d-11ec-0000-2-id}').component.where(value.where($this is Quantity).where(value = 2 and unit and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}/d$')).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="11-serve-TobaccoUse">
      <name value="Scenario 1.2 - TobaccoUse"/>
      <description value="Serve Observation resource(s) for HCIM TobaccoUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;code=http://snomed.info/sct|365980008"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-11-serve-TobaccoUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - TobaccoUse - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '449868002'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '449868002'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '449868002'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '449868002'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '449868002'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '365980008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .effectivePeriod with .start and .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').effective.ofType(Period).where(start and end).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').effective.where($this is Period).where(start and end).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '449868002' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '449868002' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '449868002' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '53661000146106' and .display, and .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '65568007' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display) and value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display) and value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '53661000146106' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '65568007' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '266918002' and .display, and .valueQuantity with .value '30' and .unit and .system 'http://unitsofmeasure.org' and .code '/d'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '266918002' and display) and value.ofType(Quantity).where(value = 30 and unit and system = 'http://unitsofmeasure.org' and code = '/d')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '266918002' and display) and value.where($this is Quantity).where(value = 30 and unit and system = 'http://unitsofmeasure.org' and code = '/d')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '266918002' and .display. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '266918002' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '266918002' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-2"/>
            <description value="Contains .component.valueQuantity with .value '30' and .unit and .system 'http://unitsofmeasure.org' and .code '/d'. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(value.ofType(Quantity).where(value = 30 and unit and system = 'http://unitsofmeasure.org' and code = '/d').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(value.where($this is Quantity).where(value = 30 and unit and system = 'http://unitsofmeasure.org' and code = '/d').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '401201003' and .display, and .valueQuantity with .value '15' and .system 'http://unitsofmeasure.org' and .code matching regex '^\\{.+\\}$'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '401201003' and display) and value.ofType(Quantity).where(value = 15 and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}$'))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '401201003' and display) and value.where($this is Quantity).where(value = 15 and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}$'))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '401201003' and .display. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '401201003' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '401201003' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-2"/>
            <description value="Contains .component.valueQuantity with .value '15' and .system 'http://unitsofmeasure.org' and .code matching regex '^\\{.+\\}$'. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(value.ofType(Quantity).where(value = 15 and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}$')).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-ca9a1af5-6a98-11ec-0000-2-id}').component.where(value.where($this is Quantity).where(value = 15 and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}$')).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - TobaccoUse - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .valueCodeableConcept.coding.code = '8517006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '8517006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '8517006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(valueCodeableConcept.where(coding.where(code = '8517006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(valueCodeableConcept.where(coding.where(code = '8517006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-TobaccoUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '365980008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '365980008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .effectivePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').effective.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').effective.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '8517006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '8517006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '8517006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '53661000146106' and .display, and .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '65568007' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display) and value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display) and value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '53661000146106' and .display. This assert checks only one child. Assert 2-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '53661000146106' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '65568007' and .display. This assert checks only one child. Assert 2-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-TobaccoUse-msz-f5593e6a-6b0f-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '65568007' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="12-serve-NutritionAdvice">
      <name value="Scenario 1.2 - NutritionAdvice"/>
      <description value="Serve NutritionOrder resource(s) for HCIM NutritionAdvice"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="NutritionOrder"/>
            <description value="Test Server to serve NutritionOrder resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-12-serve-NutritionAdvice"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - NutritionAdvice - Check NutritionOrder 1"/>
      <description value="Check if the previous operation results in a FHIR NutritionOrder that contains the values that are expected following Nictiz' materials (fixture .id: zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 NutritionOrder with properties: contains .oralDiet.type.text = 'Vezelrijk'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'Vezelrijk'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'Vezelrijk'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="NutritionOrder resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'Vezelrijk'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'Vezelrijk'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice').exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice-Explanation' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice-Explanation').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice-Explanation').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .dateTime with .extension with url 'http://hl7.org/fhir/StructureDefinition/data-absent-reason' with .valueCode 'unknown'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').dateTime.where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.ofType(code) = 'unknown').exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').dateTime.where(extension('http://hl7.org/fhir/StructureDefinition/data-absent-reason').value.where($this is code) = 'unknown').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .oralDiet with .type with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').oralDiet.type.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-0b97398f-6b5b-11ec-0000-2-id}').oralDiet.type.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - NutritionAdvice - Check NutritionOrder 2"/>
      <description value="Check if the previous operation results in a FHIR NutritionOrder that contains the values that are expected following Nictiz' materials (fixture .id: zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 NutritionOrder with properties: contains .oralDiet.type.text = 'eiwitrijk'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'eiwitrijk'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'eiwitrijk'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="NutritionOrder resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(oralDiet.where(type.where(text = 'eiwitrijk'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(oralDiet.where(type.where(text = 'eiwitrijk'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice').exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice-Explanation' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice-Explanation').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-NutritionAdvice-Explanation').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .dateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').dateTime.exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').dateTime.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .oralDiet with .type with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').oralDiet.type.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is NutritionOrder).where(id = '${zib-NutritionAdvice-msz-4ab1421a-6b6d-11ec-0000-2-id}').oralDiet.type.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="13-serve-Alert">
      <name value="Scenario 1.2 - Alert"/>
      <description value="Serve Flag resource(s) for HCIM Alert"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Flag"/>
            <description value="Test Server to serve Flag resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-13-serve-Alert"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Alert - Check Flag 1"/>
      <description value="Check if the previous operation results in a FHIR Flag that contains the values that are expected following Nictiz' materials (fixture .id: zib-Alert-msz-b24d27e6-6b49-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Flag with properties: contains .code.coding.code = '432415000'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = '432415000'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = '432415000'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Flag resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = '432415000'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = '432415000'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://loinc.org' and .code '74018-3' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').category.coding.where(system = 'http://loinc.org' and code = '74018-3' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').category.coding.where(system = 'http://loinc.org' and code = '74018-3' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '432415000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '432415000' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '432415000' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-b24d27e6-6b49-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Alert - Check Flag 2"/>
      <description value="Check if the previous operation results in a FHIR Flag that contains the values that are expected following Nictiz' materials (fixture .id: zib-Alert-msz-94097b01-6ab2-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Flag with properties: contains .code.coding.code = 'OTH'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = 'OTH'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = 'OTH'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Flag resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(code.where(coding.where(code = 'OTH'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(code.where(coding.where(code = 'OTH'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Alert').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .category with .coding with .system 'http://loinc.org' and .code '75323-6' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').category.coding.where(system = 'http://loinc.org' and code = '75323-6' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').category.coding.where(system = 'http://loinc.org' and code = '75323-6' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .code with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').code.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').code.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Flag).where(id = '${zib-Alert-msz-94097b01-6ab2-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="14-serve-AllergyIntolerance">
      <name value="Scenario 1.2 - AllergyIntolerance"/>
      <description value="Serve AllergyIntolerance resource(s) for HCIM AllergyIntolerance"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="AllergyIntolerance"/>
            <description value="Test Server to serve AllergyIntolerance resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-14-serve-AllergyIntolerance"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 1"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '468950001'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '468950001'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '468950001'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '468950001'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '468950001'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '468950001' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '468950001' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '468950001' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cce5a80f-6af3-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 2"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '372687004'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372687004'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372687004'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372687004'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372687004'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '372687004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372687004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372687004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-35a50d62-6aae-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 3"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '372567009'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372567009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372567009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372567009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372567009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks only one child. Assert 3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '372567009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372567009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372567009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-c177b40f-6a98-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 4"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '764146007'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '764146007'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '764146007'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '764146007'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '764146007'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '764146007' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '764146007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '764146007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-cab1d20f-6acd-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 5"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '256440004'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '256440004'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '256440004'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '256440004'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '256440004'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .clinicalStatus 'resolved' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'completed' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').clinicalStatus.where($this = 'resolved' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'completed' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').clinicalStatus.where($this = 'resolved' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'completed' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-1"/>
            <description value="Contains .clinicalStatus 'resolved'. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').clinicalStatus = 'resolved''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').clinicalStatus = 'resolved'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'completed' and .display. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'completed' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'completed' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '256440004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '256440004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '256440004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-8863e60f-6adb-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 6"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '372666009'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372666009'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372666009'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372666009'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372666009'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks only one child. Assert 6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '372666009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372666009' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372666009' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-7"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-233aa475-6af5-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 7"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = 'OTH'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').where(valueCode.where($this = 'OTH')))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').where(valueCode.where($this = 'OTH')))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').where(valueCode.where($this = 'OTH')))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').where(valueCode.where($this = 'OTH')))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3"/>
            <description value="Contains .code with .extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor' with .valueCode 'OTH' and .text with a value. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').code.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.ofType(code) = 'OTH' and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').code.where(extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.where($this is code) = 'OTH' and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3-1"/>
            <description value="Contains .code.extension with url 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor' with .valueCode 'OTH'. This assert checks only one child. Assert 7-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.ofType(code) = 'OTH''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').code.extension('http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').value.where($this is code) = 'OTH'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3-1"/>
            <description value="Contains .code with .text with a value. This assert checks only one child. Assert 7-3 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').code.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').code.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-5"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-2c594e0f-6ad0-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 8"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '44588005'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '44588005'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '44588005'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '44588005'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '44588005'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2"/>
            <description value="Contains .verificationStatus 'entered-in-error'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').verificationStatus = 'entered-in-error''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').verificationStatus = 'entered-in-error'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '44588005' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '44588005' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '44588005' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-5"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-a17e9a9d-6ae7-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 9"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '260171000146104'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '260171000146104'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '260171000146104'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '260171000146104'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '260171000146104'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 9-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks only one child. Assert 9-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '260171000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '260171000146104' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '260171000146104' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-47ded2b5-6b5e-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AllergyIntolerance - Check AllergyIntolerance 10"/>
      <description value="Check if the previous operation results in a FHIR AllergyIntolerance that contains the values that are expected following Nictiz' materials (fixture .id: zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 AllergyIntolerance with properties: contains .code.coding.code = '372786004'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372786004'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372786004'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="AllergyIntolerance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(code.where(coding.where(code = '372786004'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(code.where(coding.where(code = '372786004'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AllergyIntolerance').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2"/>
            <description value="Contains .clinicalStatus 'active' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').clinicalStatus.where($this = 'active' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2-1"/>
            <description value="Contains .clinicalStatus 'active'. This assert checks only one child. Assert 10-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').clinicalStatus = 'active''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').clinicalStatus = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2-2"/>
            <description value="Contains .clinicalStatus.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/ActStatus' and .code 'active' and .display. This assert checks only one child. Assert 10-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').clinicalStatus.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'http://hl7.org/fhir/v3/ActStatus' and code = 'active' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-3"/>
            <description value="Contains .verificationStatus 'confirmed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').verificationStatus = 'confirmed''-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').verificationStatus = 'confirmed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '372786004' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372786004' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '372786004' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-6"/>
            <description value="Contains .onsetDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').onset.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is AllergyIntolerance).where(id = '${zib-AllergyIntolerance-msz-f55ada79-6a9b-11ec-0000-2-id}').onset.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="15-serve-MedicationUse">
      <name value="Scenario 1.2 - MedicationUse"/>
      <description value="Serve MedicationStatement resource(s) including the medication for HCIM MedicationUse"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="MedicationStatement"/>
            <description value="Test Server to serve MedicationStatement resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;category=urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3|6&amp;_include=MedicationStatement:medication"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-15-serve-MedicationUse"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationUse - Check MedicationStatement"/>
      <description value="Check if the previous operation results in a FHIR MedicationStatement that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationStatement"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationStatement resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-AsAgreedIndicator' with .valueBoolean 'true'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-AsAgreedIndicator').value.ofType(boolean) = true'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-AsAgreedIndicator').value.where($this is boolean) = true"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Author' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Author').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Author').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .category with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3' and .code '6' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3' and code = '6' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').category.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.20.77.5.3' and code = '6' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .dateAsserted"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').dateAsserted.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').dateAsserted.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .taken 'y'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').taken = 'y''-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').taken = 'y'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12"/>
            <description value="Contains .dosage with .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').dosage.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationStatement).where(id = '${zib-MedicationUse-msz-6614c2cf-6b3c-11ec-0000-2-id}').dosage.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationUse - Check Medication"/>
      <description value="Check if the previous operation results in a FHIR Medication that contains the values that are expected following Nictiz' materials (fixture .id: zib-Product-msz-445bf61a-6b38-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Medication"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Medication).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Medication resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Product'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-445bf61a-6b38-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-445bf61a-6b38-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .code with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.10' and .code '5274' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-445bf61a-6b38-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '5274' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-445bf61a-6b38-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '5274' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="16-serve-MedicationAgreement">
      <name value="Scenario 1.2 - MedicationAgreement"/>
      <description value="Serve MedicationRequest resource(s) including the medication for HCIM MedicationAgreement"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="MedicationRequest"/>
            <description value="Test Server to serve MedicationRequest resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;category=http://snomed.info/sct|16076005&amp;_include=MedicationRequest:medication"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-16-serve-MedicationAgreement"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationAgreement - Check MedicationRequest 1"/>
      <description value="Check if the previous operation results in a FHIR MedicationRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationRequest with properties: contains .medicationReference with reference to medication with code.coding.code = '129933'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129933'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129933'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129933'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129933'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .intent 'order'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').intent = 'order''-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').intent = 'order'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '16076005' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .authoredOn"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').authoredOn.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').authoredOn.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .requester with .agent with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .dosageInstruction with .additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .timing with .repeat with .frequency '1' and .period '1' and .periodUnit 'wk', and .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display, and .doseQuantity with .value '1' and .unit and .system 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and .code 'ST'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and timing.repeat.where(frequency = 1 and period = 1 and periodUnit = 'wk') and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display) and dose.ofType(Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and timing.repeat.where(frequency = 1 and period = 1 and periodUnit = 'wk') and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display) and dose.where($this is Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-1"/>
            <description value="Contains .dosageInstruction.additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-2"/>
            <description value="Contains .dosageInstruction.additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-3"/>
            <description value="Contains .dosageInstruction.timing with .repeat with .frequency '1' and .period '1' and .periodUnit 'wk'. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 1 and period = 1 and periodUnit = 'wk').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 1 and period = 1 and periodUnit = 'wk').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-4"/>
            <description value="Contains .dosageInstruction.route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-5"/>
            <description value="Contains .dosageInstruction.doseQuantity with .value '1' and .unit and .system 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and .code 'ST'. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(dose.ofType(Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-e245ea05-6b45-11ec-0000-2-id}').dosageInstruction.where(dose.where($this is Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationAgreement - Check MedicationRequest 2"/>
      <description value="Check if the previous operation results in a FHIR MedicationRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationRequest with properties: contains .medicationReference with reference to medication with code.coding.code = '5274'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '5274'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '5274'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '5274'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '5274'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Duration' with .valueDuration with .value '10' and .unit with a value and .system and .code 'd'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Duration').value.ofType(Duration).where(value = 10 and unit.hasValue() and system and code = 'd').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Duration').value.where($this is Duration).where(value = 10 and unit.hasValue() and system and code = 'd').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .intent 'order'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').intent = 'order''-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').intent = 'order'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '16076005' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .authoredOn"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').authoredOn.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').authoredOn.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Contains .requester with .agent with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10"/>
            <description value="Contains .dosageInstruction with .sequence '1', and .additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .timing with .repeat with .frequency '3' and .period '1' and .periodUnit 'd', and .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display, and .doseQuantity with .value '1' and .unit and .system 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and .code 'ST'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(sequence = 1 and additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and timing.repeat.where(frequency = 3 and period = 1 and periodUnit = 'd') and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display) and dose.ofType(Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(sequence = 1 and additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and timing.repeat.where(frequency = 3 and period = 1 and periodUnit = 'd') and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display) and dose.where($this is Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-1"/>
            <description value="Contains .dosageInstruction.sequence '1'. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(sequence = 1).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(sequence = 1).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-2"/>
            <description value="Contains .dosageInstruction.additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-3"/>
            <description value="Contains .dosageInstruction.additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-4"/>
            <description value="Contains .dosageInstruction.timing with .repeat with .frequency '3' and .period '1' and .periodUnit 'd'. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 3 and period = 1 and periodUnit = 'd').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 3 and period = 1 and periodUnit = 'd').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-5"/>
            <description value="Contains .dosageInstruction.route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-6"/>
            <description value="Contains .dosageInstruction.doseQuantity with .value '1' and .unit and .system 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and .code 'ST'. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(dose.ofType(Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-7d094b76-6b19-11ec-0000-2-id}').dosageInstruction.where(dose.where($this is Quantity).where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationAgreement - Check MedicationRequest 3"/>
      <description value="Check if the previous operation results in a FHIR MedicationRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationRequest with properties: contains .medicationReference with reference to medication with code.coding.code = '129224'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129224'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129224'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129224'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '129224'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .intent 'order'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').intent = 'order''-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').intent = 'order'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '16076005' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .authoredOn"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').authoredOn.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').authoredOn.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .requester with .agent with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-9"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10"/>
            <description value="Contains .dosageInstruction with .additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .asNeededCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value, and .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '53' and .display, and .maxDosePerPeriod with .numerator with .value '1' and .unit and .system 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and .code 'ST' and .denominator with .value '1' and .unit and .system 'http://unitsofmeasure.org' and .code 'd'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and asNeeded.ofType(CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '53' and display) and maxDosePerPeriod.where(numerator.where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST') and denominator.where(value = 1 and unit and system = 'http://unitsofmeasure.org' and code = 'd'))).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and asNeeded.where($this is CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()) and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '53' and display) and maxDosePerPeriod.where(numerator.where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST') and denominator.where(value = 1 and unit and system = 'http://unitsofmeasure.org' and code = 'd'))).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10-1"/>
            <description value="Contains .dosageInstruction.additionalInstruction with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 3-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(additionalInstruction.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10-2"/>
            <description value="Contains .dosageInstruction.asNeededCodeableConcept with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value. This assert checks only one child. Assert 3-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(asNeeded.ofType(CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(asNeeded.where($this is CodeableConcept).where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10-3"/>
            <description value="Contains .dosageInstruction.route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '53' and .display. This assert checks only one child. Assert 3-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '53' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '53' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10-4"/>
            <description value="Contains .dosageInstruction.maxDosePerPeriod with .numerator with .value '1' and .unit and .system 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and .code 'ST' and .denominator with .value '1' and .unit and .system 'http://unitsofmeasure.org' and .code 'd'. This assert checks only one child. Assert 3-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(maxDosePerPeriod.where(numerator.where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST') and denominator.where(value = 1 and unit and system = 'http://unitsofmeasure.org' and code = 'd')).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-11ec08cd-6ab2-11ec-0000-2-id}').dosageInstruction.where(maxDosePerPeriod.where(numerator.where(value = 1 and unit and system = 'urn:oid:2.16.840.1.113883.2.4.4.1.900.2' and code = 'ST') and denominator.where(value = 1 and unit and system = 'http://unitsofmeasure.org' and code = 'd')).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationAgreement - Check MedicationRequest 4"/>
      <description value="Check if the previous operation results in a FHIR MedicationRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationRequest with properties: contains .medicationReference with reference to medication with code.coding.code = '58807'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '58807'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '58807'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '58807'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(medicationReference.resolve().code.where(coding.where(code = '58807'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationAgreement').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription' with .valueString with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.ofType(string).hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Medication-InstructionsForUseDescription').value.where($this is string).hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .intent 'order'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').intent = 'order''-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').intent = 'order'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '16076005' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '16076005' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .authoredOn"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').authoredOn.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').authoredOn.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Contains .requester with .agent with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-9"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10"/>
            <description value="Contains .dosageInstruction with .timing with .repeat with .frequency '1' and .period '2' and .periodUnit 'd', and .route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 1 and period = 2 and periodUnit = 'd') and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 1 and period = 2 and periodUnit = 'd') and route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10-1"/>
            <description value="Contains .dosageInstruction.timing with .repeat with .frequency '1' and .period '2' and .periodUnit 'd'. This assert checks only one child. Assert 4-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 1 and period = 2 and periodUnit = 'd').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').dosageInstruction.where(timing.repeat.where(frequency = 1 and period = 2 and periodUnit = 'd').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10-2"/>
            <description value="Contains .dosageInstruction.route with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.9' and .code '9' and .display. This assert checks only one child. Assert 4-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationRequest).where(id = '${zib-MedicationAgreement-msz-88e57969-6b11-11ec-0000-2-id}').dosageInstruction.where(route.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.9' and code = '9' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationAgreement - Check Medication 1"/>
      <description value="Check if the previous operation results in a FHIR Medication that contains the values that are expected following Nictiz' materials (fixture .id: zib-Product-msz-dd3ff04f-6b55-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Medication with properties: contains .code.coding.code = '129933'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '129933'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '129933'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Medication resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '129933'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '129933'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Product'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-dd3ff04f-6b55-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-dd3ff04f-6b55-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .code with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.10' and .code '129933' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-dd3ff04f-6b55-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '129933' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-dd3ff04f-6b55-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '129933' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationAgreement - Check Medication 2"/>
      <description value="Check if the previous operation results in a FHIR Medication that contains the values that are expected following Nictiz' materials (fixture .id: zib-Product-msz-6150d14f-6aa4-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Medication with properties: contains .code.coding.code = '129224'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '129224'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '129224'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Medication resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '129224'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '129224'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Product'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-6150d14f-6aa4-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-6150d14f-6aa4-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .code with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.10' and .code '129224' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-6150d14f-6aa4-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '129224' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-6150d14f-6aa4-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '129224' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicationAgreement - Check Medication 3"/>
      <description value="Check if the previous operation results in a FHIR Medication that contains the values that are expected following Nictiz' materials (fixture .id: zib-Product-msz-65a08885-6abd-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Medication with properties: contains .code.coding.code = '58807'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '58807'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '58807'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Medication resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(code.where(coding.where(code = '58807'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(code.where(coding.where(code = '58807'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Product'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-65a08885-6abd-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-65a08885-6abd-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .code with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.10' and .code '58807' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-65a08885-6abd-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '58807' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-65a08885-6abd-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.10' and code = '58807' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="17-serve-AdministrationAgreement">
      <name value="Scenario 1.2 - AdministrationAgreement"/>
      <description value="Serve MedicationDispense resource(s) including the medication for HCIM AdministrationAgreement"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="MedicationDispense"/>
            <description value="Test Server to serve MedicationDispense resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;category=http://snomed.info/sct|422037009&amp;_include=MedicationDispense:medication"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-17-serve-AdministrationAgreement"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AdministrationAgreement - Check MedicationDispense"/>
      <description value="Check if the previous operation results in a FHIR MedicationDispense that contains the values that are expected following Nictiz' materials (fixture .id: zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 MedicationDispense"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="MedicationDispense resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-AdministrationAgreement').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Duration' with .valueDuration with .value '6' and .unit with a value and .system and .code 'd'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Duration').value.ofType(Duration).where(value = 6 and unit.hasValue() and system and code = 'd').exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicationUse-Duration').value.where($this is Duration).where(value = 6 and unit.hasValue() and system and code = 'd').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '422037009' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '422037009' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '422037009' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .medicationReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').medication.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').medication.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is MedicationDispense).where(id = '${zib-AdministrationAgreement-msz-4b49fd51-6a98-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - AdministrationAgreement - Check Medication"/>
      <description value="Check if the previous operation results in a FHIR Medication that contains the values that are expected following Nictiz' materials (fixture .id: zib-Product-msz-81f63c4f-6ac8-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Medication"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Medication).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Medication resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Product'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-81f63c4f-6ac8-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-81f63c4f-6ac8-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Product').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .code with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.4.7' and .code '3071197' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Medication).where(id = '${zib-Product-msz-81f63c4f-6ac8-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.7' and code = '3071197' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Medication).where(id = '${zib-Product-msz-81f63c4f-6ac8-11ec-0000-2-id}').code.coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.4.7' and code = '3071197' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="18-serve-MedicalDevice">
      <name value="Scenario 1.2 - MedicalDevice"/>
      <description value="Serve DeviceUseStatement resource(s) including the device for HCIM MedicalDevice"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="DeviceUseStatement"/>
            <description value="Test Server to serve DeviceUseStatement resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;_include=DeviceUseStatement:device"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-18-serve-MedicalDevice"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicalDevice - Check DeviceUseStatement"/>
      <description value="Check if the previous operation results in a FHIR DeviceUseStatement that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 DeviceUseStatement"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="DeviceUseStatement resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice').exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .extension with url 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice-Organization' with .valueReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice-Organization').value.ofType(Reference).where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDevice-Organization').value.where($this is Reference).where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .whenUsed with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').whenUsed.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').whenUsed.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .device with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').device.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').device.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .bodySite with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '24028007' and .display and .coding with .system 'http://snomed.info/sct' and .code '53120007' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display) and coding.where(system = 'http://snomed.info/sct' and code = '53120007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display) and coding.where(system = 'http://snomed.info/sct' and code = '53120007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .bodySite.extension with url 'http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '24028007' and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').bodySite.extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').bodySite.extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-1"/>
            <description value="Contains .bodySite with .coding with .system 'http://snomed.info/sct' and .code '53120007' and .display. This assert checks only one child. Assert 1-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '53120007' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '53120007' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is DeviceUseStatement).where(id = '${zib-MedicalDevice-msz-4781d9e6-6b37-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - MedicalDevice - Check Device"/>
      <description value="Check if the previous operation results in a FHIR Device that contains the values that are expected following Nictiz' materials (fixture .id: zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Device"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Device).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Device resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDeviceProduct'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDeviceProduct').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-MedicalDeviceProduct').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .type with .coding with .system 'http://snomed.info/sct' and .code '1137330008' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').type.coding.where(system = 'http://snomed.info/sct' and code = '1137330008' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').type.coding.where(system = 'http://snomed.info/sct' and code = '1137330008' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Device).where(id = '${zib-MedicalDeviceProduct-msz-4781d9e6-6b37-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="19-serve-Vaccination">
      <name value="Scenario 1.2 - Vaccination"/>
      <description value="Serve Immunization resource(s) for HCIM Vaccination"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Immunization"/>
            <description value="Test Server to serve Immunization resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;status=completed"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-19-serve-Vaccination"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 1"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07BN01' and date = '2024-10-02'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2024-10-02')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2024-10-02')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2024-10-02')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2024-10-02')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07BN01' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .doseQuantity with .value '0.3' and .unit and .system 'http://unitsofmeasure.org' and .code 'mL'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').doseQuantity.where(value = 0.3 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-1a0fe60d-6aeb-11ec-0000-2-id}').doseQuantity.where(value = 0.3 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 2"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07AL01'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07AL01'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07AL01'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07AL01'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07AL01'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07AL01' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07AL01' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07AL01' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .doseQuantity with .value '0.5' and .unit and .system 'http://unitsofmeasure.org' and .code 'mL'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').doseQuantity.where(value = 0.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').doseQuantity.where(value = 0.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-68f0a65d-6ac9-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 3"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07BN01' and date = '2022-10-01'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2022-10-01')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2022-10-01')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2022-10-01')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2022-10-01')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07BN01' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-c4ee4f0f-6b5a-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 4"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07BN01'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-05-20')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-05-20')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-05-20')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-05-20')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07BN01' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7d93924f-6ac5-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 5"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07BN01' and date.where(value = '2023-10-03')"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2023-10-03')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2023-10-03')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2023-10-03')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2023-10-03')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07BN01' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-8"/>
            <description value="Contains .doseQuantity with .value '0.3' and .unit and .system 'http://unitsofmeasure.org' and .code 'mL'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').doseQuantity.where(value = 0.3 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-310d6e85-6acc-11ec-0000-2-id}').doseQuantity.where(value = 0.3 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 6"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07BC02'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BC02'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BC02'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BC02'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BC02'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07BC02' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BC02' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BC02' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-8"/>
            <description value="Contains .doseQuantity with .value '0.50' and .unit and .system 'http://unitsofmeasure.org' and .code 'mL'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').doseQuantity.where(value = 0.50 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').doseQuantity.where(value = 0.50 and unit and system = 'http://unitsofmeasure.org' and code = 'mL').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-9"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-ca0f208f-6b06-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 7"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07AM01'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07AM01'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07AM01'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07AM01'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07AM01'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07AM01' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07AM01' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07AM01' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-8"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-7a1ae842-6b01-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Vaccination - Check Immunization 8"/>
      <description value="Check if the previous operation results in a FHIR Immunization that contains the values that are expected following Nictiz' materials (fixture .id: zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Immunization with properties: contains .vaccineCode.coding.code = 'J07BN01' and date.where(value = '2021-07-03')"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-07-03')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-07-03')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Immunization resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-07-03')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(vaccineCode.where(coding.where(code = 'J07BN01')) and date.where(value = '2021-07-03')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Vaccination').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2"/>
            <description value="Contains .status 'completed'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').status = 'completed''-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').status = 'completed'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3"/>
            <description value="Contains .notGiven 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').notGiven = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').notGiven = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-4"/>
            <description value="Contains .vaccineCode with .coding with .system 'http://www.whocc.no/atc' and .code 'J07BN01' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').vaccineCode.coding.where(system = 'http://www.whocc.no/atc' and code = 'J07BN01' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-5"/>
            <description value="Contains .patient with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').patient.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-6"/>
            <description value="Contains .date"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').date.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').date.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-7"/>
            <description value="Contains .primarySource 'false'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').primarySource = false'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').primarySource = false"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8"/>
            <description value="Contains .note with .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').note.where(text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Immunization).where(id = '${zib-Vaccination-msz-bd3b998f-6b2c-11ec-0000-2-id}').note.where(text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="20-serve-BloodPressure">
      <name value="Scenario 1.2 - BloodPressure"/>
      <description value="Serve Observation resource(s) for HCIM BloodPressure"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="/$lastn?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;code=http://loinc.org|85354-9"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-20-serve-BloodPressure"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - BloodPressure - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BloodPressure').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '85354-9' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '85354-9' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '85354-9' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .bodySite with .coding with .system 'http://snomed.info/sct' and .code '368208006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').bodySite.coding.where(system = 'http://snomed.info/sct' and code = '368208006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').bodySite.coding.where(system = 'http://snomed.info/sct' and code = '368208006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .method with .coding with .system 'http://snomed.info/sct' and .code '22762002' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').method.coding.where(system = 'http://snomed.info/sct' and code = '22762002' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').method.coding.where(system = 'http://snomed.info/sct' and code = '22762002' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8480-6' and .display, and .valueQuantity with .value '128' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display) and value.ofType(Quantity).where(value = 128 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display) and value.where($this is Quantity).where(value = 128 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8480-6' and .display. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8480-6' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9-2"/>
            <description value="Contains .component.valueQuantity with .value '128' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks only one child. Assert 1-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.ofType(Quantity).where(value = 128 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.where($this is Quantity).where(value = 128 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8462-4' and .display, and .valueQuantity with .value '85' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display) and value.ofType(Quantity).where(value = 85 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display) and value.where($this is Quantity).where(value = 85 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]')).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8462-4' and .display. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8462-4' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-2"/>
            <description value="Contains .component.valueQuantity with .value '85' and .unit and .system 'http://unitsofmeasure.org' and .code 'mm[Hg]'. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.ofType(Quantity).where(value = 85 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.where($this is Quantity).where(value = 85 and unit and system = 'http://unitsofmeasure.org' and code = 'mm[Hg]').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8358-4' and .display, and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and .code 'STD' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8358-4' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8358-4' and display) and value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8358-4' and .display. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8358-4' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8358-4' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and .code 'STD' and .display. This assert checks only one child. Assert 1-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '70665002' and .display, and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and .code 'STD' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '70665002' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '70665002' and display) and value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '70665002' and .display. This assert checks only one child. Assert 1-12 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '70665002' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '70665002' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and .code 'STD' and .display. This assert checks only one child. Assert 1-12 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.15.1' and code = 'STD' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-13"/>
            <description value="Contains .component with .code with .coding with .system 'http://snomed.info/sct' and .code '424724000' and .display, and .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '33586001' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '424724000' and display) and value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '424724000' and display) and value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-13-1"/>
            <description value="Contains .component.code with .coding with .system 'http://snomed.info/sct' and .code '424724000' and .display. This assert checks only one child. Assert 1-13 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '424724000' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://snomed.info/sct' and code = '424724000' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-13-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '33586001' and .display. This assert checks only one child. Assert 1-13 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-14"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8361-8' and .display, and .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '33586001' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8361-8' and display) and value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8361-8' and display) and value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-14-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8361-8' and .display. This assert checks only one child. Assert 1-14 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8361-8' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8361-8' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-14-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '33586001' and .display. This assert checks only one child. Assert 1-14 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BloodPressure-msz-a0edd1cf-6b69-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '33586001' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="21-serve-BodyWeight">
      <name value="Scenario 1.2 - BodyWeight"/>
      <description value="Serve Observation resource(s) for last known HCIM BodyWeight"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="/$lastn?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;code=http://loinc.org|29463-7"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-21-serve-BodyWeight"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - BodyWeight - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '29463-7' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .valueQuantity with .value '95' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').value.ofType(Quantity).where(value = 95 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').value.where($this is Quantity).where(value = 95 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display, and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display) and value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks only one child. Assert 1-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyWeight-msz-dbf77082-6b27-11ec-0000-2-id}').component.where(value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="22-serve-BodyHeight">
      <name value="Scenario 1.2 - BodyHeight"/>
      <description value="Serve Observation resource(s) for last known HCIM BodyHeight"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="/$lastn?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;code=http://loinc.org|8302-2,http://loinc.org|8306-3,http://loinc.org|8308-9"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-22-serve-BodyHeight"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - BodyHeight - Check Observation"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display and .coding with .system 'http://loinc.org' and .code '8308-9' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').code.where(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://loinc.org' and code = '8308-9' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').code.where(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://loinc.org' and code = '8308-9' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .valueQuantity with .value '171' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').value.ofType(Quantity).where(value = 171 and unit and system = 'http://unitsofmeasure.org' and code = 'cm').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-BodyHeight-msz-7626b9dd-6b3d-11ec-0000-2-id}').value.where($this is Quantity).where(value = 171 and unit and system = 'http://unitsofmeasure.org' and code = 'cm').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="23-serve-LaboratoryTestResult">
      <name value="Scenario 1.2 - LaboratoryTestResult"/>
      <description value="Serve Observation resource(s) for HCIM LaboratoryTestResult"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Observation"/>
            <description value="Test Server to serve Observation resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;category=http://snomed.info/sct|49581000146104&amp;_include=Observation:related-target"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-23-serve-LaboratoryTestResult"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '789-8' and .valueQuantity.value = '5.1'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '789-8')) and value.ofType(Quantity).value = 5.1).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '789-8')) and value.where($this is Quantity).value = 5.1).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '789-8')) and value.ofType(Quantity).value = 5.1).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '789-8')) and value.where($this is Quantity).value = 5.1).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 1-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '789-8' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '789-8' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '789-8' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .valueQuantity with .value '5.1' and .unit and .system 'http://unitsofmeasure.org' and .code '10*12/L'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').value.ofType(Quantity).where(value = 5.1 and unit and system = 'http://unitsofmeasure.org' and code = '10*12/L').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eefacdc0-6ac3-11ec-0000-2-id}').value.where($this is Quantity).where(value = 5.1 and unit and system = 'http://unitsofmeasure.org' and code = '10*12/L').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '59467-1' and .valueQuantity.value = '22'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59467-1')) and value.ofType(Quantity).value = 22).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59467-1')) and value.where($this is Quantity).value = 22).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59467-1')) and value.ofType(Quantity).value = 22).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59467-1')) and value.where($this is Quantity).value = 22).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 2-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '59467-1' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '59467-1' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '59467-1' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .valueQuantity with .value '22' and .unit and .system 'http://unitsofmeasure.org' and .code 'mmol/L'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').value.ofType(Quantity).where(value = 22 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-6bfc1234-6b59-11ec-0000-2-id}').value.where($this is Quantity).where(value = 22 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 3"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '6690-2' and .valueQuantity.value = '10.6'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '6690-2')) and value.ofType(Quantity).value = 10.6).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '6690-2')) and value.where($this is Quantity).value = 10.6).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '6690-2')) and value.ofType(Quantity).value = 10.6).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '6690-2')) and value.where($this is Quantity).value = 10.6).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 3-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '6690-2' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '6690-2' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '6690-2' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .valueQuantity with .value '10.6' and .unit and .system 'http://unitsofmeasure.org' and .code '10*9/L'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').value.ofType(Quantity).where(value = 10.6 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-156c6601-6b1b-11ec-0000-2-id}').value.where($this is Quantity).where(value = 10.6 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 4"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '59260-0' and .valueQuantity.value = '8.20'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59260-0')) and value.ofType(Quantity).value = 8.20).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59260-0')) and value.where($this is Quantity).value = 8.20).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59260-0')) and value.ofType(Quantity).value = 8.20).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59260-0')) and value.where($this is Quantity).value = 8.20).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 4-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '59260-0' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '59260-0' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '59260-0' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .valueQuantity with .value '8.20' and .unit and .system 'http://unitsofmeasure.org' and .code 'mmol/L'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').value.ofType(Quantity).where(value = 8.20 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').value.where($this is Quantity).where(value = 8.20 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Contains .referenceRange with .low with .value '7.5' and .unit and .system 'http://unitsofmeasure.org' and .code 'mmol/L', and .high with .value '10' and .unit and .system 'http://unitsofmeasure.org' and .code 'mmol/L', and .type with .coding with .system 'http://hl7.org/fhir/referencerange-meaning' and .code 'normal' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(low.where(value = 7.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L') and high.where(value = 10 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L') and type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(low.where(value = 7.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L') and high.where(value = 10 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L') and type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8-1"/>
            <description value="Contains .referenceRange.low with .value '7.5' and .unit and .system 'http://unitsofmeasure.org' and .code 'mmol/L'. This assert checks only one child. Assert 4-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(low.where(value = 7.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(low.where(value = 7.5 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8-2"/>
            <description value="Contains .referenceRange.high with .value '10' and .unit and .system 'http://unitsofmeasure.org' and .code 'mmol/L'. This assert checks only one child. Assert 4-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(high.where(value = 10 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(high.where(value = 10 and unit and system = 'http://unitsofmeasure.org' and code = 'mmol/L').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8-3"/>
            <description value="Contains .referenceRange.type with .coding with .system 'http://hl7.org/fhir/referencerange-meaning' and .code 'normal' and .display. This assert checks only one child. Assert 4-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-282c3358-6b50-11ec-0000-2-id}').referenceRange.where(type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 5"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '787-2' and .valueQuantity.value = '90'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '787-2')) and value.ofType(Quantity).value = 90).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '787-2')) and value.where($this is Quantity).value = 90).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '787-2')) and value.ofType(Quantity).value = 90).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '787-2')) and value.where($this is Quantity).value = 90).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 5-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '787-2' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '787-2' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '787-2' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .valueQuantity with .value '90' and .unit and .system 'http://unitsofmeasure.org' and .code 'fL'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').value.ofType(Quantity).where(value = 90 and unit and system = 'http://unitsofmeasure.org' and code = 'fL').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-2107b74f-6b71-11ec-0000-2-id}').value.where($this is Quantity).where(value = 90 and unit and system = 'http://unitsofmeasure.org' and code = 'fL').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 6"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '59468-9' and .valueQuantity.value = '1.8'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59468-9')) and value.ofType(Quantity).value = 1.8).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59468-9')) and value.where($this is Quantity).value = 1.8).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '59468-9')) and value.ofType(Quantity).value = 1.8).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '59468-9')) and value.where($this is Quantity).value = 1.8).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 6-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '59468-9' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '59468-9' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '59468-9' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-7"/>
            <description value="Contains .valueQuantity with .value '1.8' and .unit and .system 'http://unitsofmeasure.org' and .code 'fmol'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').value.ofType(Quantity).where(value = 1.8 and unit and system = 'http://unitsofmeasure.org' and code = 'fmol').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-43294c24-6af6-11ec-0000-2-id}').value.where($this is Quantity).where(value = 1.8 and unit and system = 'http://unitsofmeasure.org' and code = 'fmol').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 7"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '4544-3' and .valueQuantity.value = '0.42'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '4544-3')) and value.ofType(Quantity).value = 0.42).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '4544-3')) and value.where($this is Quantity).value = 0.42).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '4544-3')) and value.ofType(Quantity).value = 0.42).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '4544-3')) and value.where($this is Quantity).value = 0.42).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 7-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 7-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '4544-3' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '4544-3' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '4544-3' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-7"/>
            <description value="Contains .valueQuantity with .value '0.42' and .unit and .system 'http://unitsofmeasure.org' and .code 'L/L'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').value.ofType(Quantity).where(value = 0.42 and unit and system = 'http://unitsofmeasure.org' and code = 'L/L').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d1ea45f8-6b28-11ec-0000-2-id}').value.where($this is Quantity).where(value = 0.42 and unit and system = 'http://unitsofmeasure.org' and code = 'L/L').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 8"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '777-3' and .valueQuantity.value = '170'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '777-3')) and value.ofType(Quantity).value = 170).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '777-3')) and value.where($this is Quantity).value = 170).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '777-3')) and value.ofType(Quantity).value = 170).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '777-3')) and value.where($this is Quantity).value = 170).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 8-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 8-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '777-3' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '777-3' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '777-3' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-6"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').effective.ofType(dateTime).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').effective.where($this is dateTime).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-7"/>
            <description value="Contains .valueQuantity with .value '170' and .unit and .system 'http://unitsofmeasure.org' and .code '10*9/L'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').value.ofType(Quantity).where(value = 170 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').value.where($this is Quantity).where(value = 170 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8"/>
            <description value="Contains .referenceRange with .low with .value '150' and .unit and .system 'http://unitsofmeasure.org' and .code '10*9/L', and .high with .value '400' and .unit and .system 'http://unitsofmeasure.org' and .code '10*9/L', and .type with .coding with .system 'http://hl7.org/fhir/referencerange-meaning' and .code 'normal' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(low.where(value = 150 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L') and high.where(value = 400 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L') and type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(low.where(value = 150 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L') and high.where(value = 400 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L') and type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8-1"/>
            <description value="Contains .referenceRange.low with .value '150' and .unit and .system 'http://unitsofmeasure.org' and .code '10*9/L'. This assert checks only one child. Assert 8-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(low.where(value = 150 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(low.where(value = 150 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8-2"/>
            <description value="Contains .referenceRange.high with .value '400' and .unit and .system 'http://unitsofmeasure.org' and .code '10*9/L'. This assert checks only one child. Assert 8-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(high.where(value = 400 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(high.where(value = 400 and unit and system = 'http://unitsofmeasure.org' and code = '10*9/L').exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="8-8-3"/>
            <description value="Contains .referenceRange.type with .coding with .system 'http://hl7.org/fhir/referencerange-meaning' and .code 'normal' and .display. This assert checks only one child. Assert 8-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-d3d0014c-6ae6-11ec-0000-2-id}').referenceRange.where(type.coding.where(system = 'http://hl7.org/fhir/referencerange-meaning' and code = 'normal' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 9"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '97326-3' and comment = 'Positief'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Positief')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Positief')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Positief')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Positief')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 9-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 9-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '19851009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '19851009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '19851009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '97326-3' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '97326-3' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '97326-3' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="9-7"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-b8d452c5-6b76-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 10"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '58410-2'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '58410-2'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '58410-2'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '58410-2'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '58410-2'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 10-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 10-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-4"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '58410-2' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '58410-2' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '58410-2' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-6"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-6-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-6-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-6 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-7"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-7-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-7-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-7 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-8"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-8-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-8-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-8 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-9"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-9-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-9-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-10"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-10-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-10-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-11"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-11-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-11-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-11 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-12"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-12-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-12 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-12-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-12 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-13"/>
            <description value="Contains .related with .type 'has-member', and .target with either .reference or .identifier and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member' and target.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-13-1"/>
            <description value="Contains .related.type 'has-member'. This assert checks only one child. Assert 10-13 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(type = 'has-member').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="10-13-2"/>
            <description value="Contains .related.target with either .reference or .identifier and .display. This assert checks only one child. Assert 10-13 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-60dc6b25-6b17-11ec-0000-2-id}').related.where(target.where((reference or identifier) and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - LaboratoryTestResult - Check Observation 11"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Observation with properties: contains .code.coding.code = '97326-3' and comment = 'Negatief'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Negatief')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Negatief')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Negatief')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(code.where(coding.where(code = '97326-3')) and comment.where(value = 'Negatief')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-LaboratoryTestResult-Observation').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2"/>
            <description value="Contains .status 'final' and with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').status.where($this = 'final' and extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2-1"/>
            <description value="Contains .status 'final'. This assert checks only one child. Assert 11-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').status = 'final''-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').status = 'final'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-2-2"/>
            <description value="Contains .status.extension with url 'http://nictiz.nl/fhir/StructureDefinition/code-specification' with .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and .code 'final' and .display. This assert checks only one child. Assert 11-2 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').status.extension('http://nictiz.nl/fhir/StructureDefinition/code-specification').value.where($this is CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.16.1' and code = 'final' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-3"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '49581000146104' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '49581000146104' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-4"/>
            <description value="Contains .category with .coding with .system 'http://snomed.info/sct' and .code '19851009' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '19851009' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').category.where(coding.where(system = 'http://snomed.info/sct' and code = '19851009' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '97326-3' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '97326-3' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').code.coding.where(system = 'http://loinc.org' and code = '97326-3' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="11-7"/>
            <description value="Contains .comment with a value. This assert only checks existence of a value, because string comparisons can have many possible caveats"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').comment.hasValue()'-->
            <expression value="Bundle.entry.resource.where($this is Observation).where(id = '${zib-LabTestResult-msz-eb78f385-6b39-11ec-0000-2-id}').comment.hasValue()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test id="24-serve-ProcedureRequest">
      <name value="Scenario 1.2 - ProcedureRequest"/>
      <description value="Serve ProcedureRequest resource(s) for HCIM Procedure"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="ProcedureRequest"/>
            <description value="Test Server to serve ProcedureRequest resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;status=active"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-24-serve-ProcedureRequest"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - ProcedureRequest - Check ProcedureRequest 1"/>
      <description value="Check if the previous operation results in a FHIR ProcedureRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 ProcedureRequest with properties: contains .bodySite.coding.code = '6007000'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(bodySite.where(coding.where(code = '6007000'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(bodySite.where(coding.where(code = '6007000'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="ProcedureRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(bodySite.where(coding.where(code = '6007000'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(bodySite.where(coding.where(code = '6007000'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'unknown'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').status = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').status = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .intent 'plan'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').intent = 'plan''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').intent = 'plan'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .occurrencePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').occurrence.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').occurrence.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .bodySite with .coding with .system 'http://snomed.info/sct' and .code '6007000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '6007000' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-dd3e81ae-6b6a-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '6007000' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - ProcedureRequest - Check ProcedureRequest 2"/>
      <description value="Check if the previous operation results in a FHIR ProcedureRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 ProcedureRequest with properties: contains .code.coding.code = '172043006'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '172043006'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '172043006'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="ProcedureRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '172043006'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '172043006'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'unknown'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').status = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').status = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .intent 'plan'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').intent = 'plan''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').intent = 'plan'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '172043006' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '172043006' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '172043006' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .occurrencePeriod with .start and .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').occurrence.ofType(Period).where(start and end).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').occurrence.where($this is Period).where(start and end).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .requester with .agent with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').performer.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').performer.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Contains .bodySite with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '24028007' and .display and .coding with .system 'http://snomed.info/sct' and .code '361715005' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display) and coding.where(system = 'http://snomed.info/sct' and code = '361715005' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display) and coding.where(system = 'http://snomed.info/sct' and code = '361715005' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9-1"/>
            <description value="Contains .bodySite.extension with url 'http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier' with .valueCodeableConcept with .coding with .system 'http://snomed.info/sct' and .code '24028007' and .display. This assert checks only one child. Assert 2-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.ofType(CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display).exists()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').bodySite.where(extension('http://nictiz.nl/fhir/StructureDefinition/BodySite-Qualifier').value.where($this is CodeableConcept).coding.where(system = 'http://snomed.info/sct' and code = '24028007' and display).exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9-1"/>
            <description value="Contains .bodySite with .coding with .system 'http://snomed.info/sct' and .code '361715005' and .display. This assert checks only one child. Assert 2-9 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '361715005' and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-a1d62acf-6ac3-11ec-0000-2-id}').bodySite.where(coding.where(system = 'http://snomed.info/sct' and code = '361715005' and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - ProcedureRequest - Check ProcedureRequest 3"/>
      <description value="Check if the previous operation results in a FHIR ProcedureRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 ProcedureRequest with properties: contains .code.coding.code = '126071000146105'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '126071000146105'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '126071000146105'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="ProcedureRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '126071000146105'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '126071000146105'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .status 'unknown'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').status = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').status = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .intent 'plan'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').intent = 'plan''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').intent = 'plan'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '126071000146105' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '126071000146105' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '126071000146105' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .occurrencePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').occurrence.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').occurrence.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .requester with .agent with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').performer.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-604d7acf-6b10-11ec-0000-2-id}').performer.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - ProcedureRequest - Check ProcedureRequest 4"/>
      <description value="Check if the previous operation results in a FHIR ProcedureRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 ProcedureRequest with properties: contains .code.coding.code = '102161000146108'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '102161000146108'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '102161000146108'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="ProcedureRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '102161000146108'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '102161000146108'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .status 'unknown'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').status = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').status = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .intent 'plan'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').intent = 'plan''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').intent = 'plan'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '102161000146108' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '102161000146108' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '102161000146108' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .occurrencePeriod with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').occurrence.ofType(Period).start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-296d542e-6b61-11ec-0000-2-id}').occurrence.where($this is Period).start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - ProcedureRequest - Check ProcedureRequest 5"/>
      <description value="Check if the previous operation results in a FHIR ProcedureRequest that contains the values that are expected following Nictiz' materials (fixture .id: zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 ProcedureRequest with properties: contains .code.coding.code = '77381000146102'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '77381000146102'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '77381000146102'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="ProcedureRequest resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(code.where(coding.where(code = '77381000146102'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(code.where(coding.where(code = '77381000146102'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-ProcedureRequest').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Contains .status 'unknown'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').status = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').status = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Contains .intent 'plan'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').intent = 'plan''-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').intent = 'plan'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Contains .code with .coding with .system 'http://snomed.info/sct' and .code '77381000146102' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '77381000146102' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').code.coding.where(system = 'http://snomed.info/sct' and code = '77381000146102' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Contains .occurrencePeriod with .start and .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').occurrence.ofType(Period).where(start and end).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').occurrence.where($this is Period).where(start and end).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Contains .requester with .agent with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').requester.agent.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-8"/>
            <description value="Contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').performer.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is ProcedureRequest).where(id = '${zib-ProcedureRequest-msz-afedfeb5-6b24-11ec-0000-2-id}').performer.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="25-serve-Contact">
      <name value="Scenario 1.2 - Contact"/>
      <description value="Serve Encounter resource(s) for HCIM Contact"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Encounter"/>
            <description value="Test Server to serve Encounter resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-25-serve-Contact"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Contact - Check Encounter 1"/>
      <description value="Check if the previous operation results in a FHIR Encounter that contains the values that are expected following Nictiz' materials (fixture .id: zib-Encounter-msz-156fc48f-6b11-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Encounter with properties: contains .class.code = 'AMB'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'AMB').count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'AMB').count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Encounter resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'AMB').id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'AMB').id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'unknown'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').status = 'unknown''-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').status = 'unknown'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .class with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'AMB' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'AMB' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .period with .start"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').period.start.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').period.start.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .diagnosis with .condition with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .hospitalization with .admitSource with .coding with .system 'http://hl7.org/fhir/v3/NullFlavor' and .code 'OTH' and .display and .text with a value"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').hospitalization.admitSource.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').hospitalization.admitSource.where(coding.where(system = 'http://hl7.org/fhir/v3/NullFlavor' and code = 'OTH' and display) and text.hasValue()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .serviceProvider with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').serviceProvider.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-156fc48f-6b11-11ec-0000-2-id}').serviceProvider.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Contact - Check Encounter 2"/>
      <description value="Check if the previous operation results in a FHIR Encounter that contains the values that are expected following Nictiz' materials (fixture .id: zib-Encounter-msz-db354652-6a95-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Encounter with properties: contains .class.code = 'EMER'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'EMER').count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'EMER').count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Encounter resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(class.code = 'EMER').id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(class.code = 'EMER').id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Encounter').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .status 'finished'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').status = 'finished''-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').status = 'finished'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .class with .system 'http://hl7.org/fhir/v3/ActCode' and .code 'EMER' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'EMER' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').class.where(system = 'http://hl7.org/fhir/v3/ActCode' and code = 'EMER' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .period with .start and .end"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').period.where(start and end).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').period.where(start and end).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .diagnosis with .condition with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').diagnosis.where(condition.where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .hospitalization with .dischargeDisposition with .coding with .system 'http://snomed.info/sct' and .code '80522000' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').hospitalization.dischargeDisposition.coding.where(system = 'http://snomed.info/sct' and code = '80522000' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Encounter).where(id = '${zib-Encounter-msz-db354652-6a95-11ec-0000-2-id}').hospitalization.dischargeDisposition.coding.where(system = 'http://snomed.info/sct' and code = '80522000' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="26-serve-Careteam">
      <name value="Scenario 1.1 - Careteam"/>
      <description value="Serve Careteam resource(s)"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="CareTeam"/>
            <description value="Test Server to serve CareTeam resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259&amp;status=active&amp;_include=CareTeam:participant"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-26-serve-Careteam"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 1 CareTeam resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(CareTeam)).count() = 1"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Careteam - Check CareTeam 1"/>
      <description value="Check if the previous operation results in a FHIR CareTeam that contains the values that are expected following Nictiz' materials (fixture .id: nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 CareTeam with properties: contains .managingOrganization with reference to organization with identifier = '20000002'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(managingOrganization.resolve().where(identifier = '20000002')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(managingOrganization.resolve().where(identifier = '20000002')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="CareTeam resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(managingOrganization.resolve().where(identifier = '20000002')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(managingOrganization.resolve().where(identifier = '20000002')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-careteam'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-careteam').exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-careteam').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .status 'active'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').status = 'active''-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').status = 'active'"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .participant with .member with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .participant with .member with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .participant with .member with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .managingOrganization with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').managingOrganization.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-1a755a29-6b59-11ec-0000-2-id}').managingOrganization.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.1 - Careteam - Check CareTeam 2"/>
      <description value="Check if the previous operation results in a FHIR CareTeam that contains the values that are expected following Nictiz' materials (fixture .id: nl-core-careteam-msz-f7211495-6aff-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 CareTeam with properties: contains .managingOrganization with reference to organization with identifier = '20000007'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(managingOrganization.resolve().where(identifier = '20000007')).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(managingOrganization.resolve().where(identifier = '20000007')).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="CareTeam resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(managingOrganization.resolve().where(identifier = '20000007')).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(managingOrganization.resolve().where(identifier = '20000007')).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://fhir.nl/fhir/StructureDefinition/nl-core-careteam'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-careteam').exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').meta.profile.where($this = 'http://fhir.nl/fhir/StructureDefinition/nl-core-careteam').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').subject.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .participant with .member with .extension with url 'http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference' with .valueReference with either .reference or .identifier and .display, and with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.ofType(Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').participant.where(member.where(extension('http://nictiz.nl/fhir/StructureDefinition/practitionerrole-reference').value.where($this is Reference).where((reference or identifier) and display) and (reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .managingOrganization with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').managingOrganization.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is CareTeam).where(id = '${nl-core-careteam-msz-f7211495-6aff-11ec-0000-2-id}').managingOrganization.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test id="27-serve-Provenance">
      <name value="Scenario 1.2 - Provenance"/>
      <description value="Serve Provenance resource(s)"/>
      <action>
         <operation>
            <type>
               <system value="http://hl7.org/fhir/restful-interaction"/>
               <code value="search"/>
            </type>
            <resource value="Provenance"/>
            <description value="Test Server to serve Provenance resources."/>
            <accept value="xml"/>
            <destination value="1"/>
            <encodeRequestUrl value="true"/>
            <origin value="1"/>
            <params value="?patient.identifier=http://fhir.nl/fhir/NamingSystem/bsn|999911259"/>
            <requestHeader>
               <field value="Authorization"/>
               <value value="${patient-token-id}"/>
            </requestHeader>
            <responseId value="fixture-27-serve-Provenance"/>
         </operation>
      </action>
      <action>
         <assert>
            <description value="Confirm that the operation was successful"/>
            <operator value="in"/>
            <responseCode value="200,201"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned resource type is Bundle."/>
            <direction value="response"/>
            <resource value="Bundle"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle type is searchset."/>
            <direction value="response"/>
            <expression value="Bundle.type"/>
            <operator value="equals"/>
            <stopTestOnFail value="false"/>
            <value value="searchset"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources contain an Resource.id except when temporary ids are used in the Bundle. The only time that a resource does not have an id is when it is being submitted to the server using a create operation: https://www.hl7.org/fhir/STU3/resource-definitions.html#Resource.id "/>
            <direction value="response"/>
            <expression value="Bundle.entry.all( $this.fullUrl.matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or $this.fullUrl.matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or $this.resource.id.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all returned resources except OperationOutcome and Binary contain a meta.profile tag."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.where(is(OperationOutcome).not()).where(is(Binary).not()).where(meta.profile.empty()).empty()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl does not disagree with the id in the resource, see http://hl7.org/fhir/stu3/bundle-definitions.html#Bundle.entry.fullUrl"/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(fullUrl.exists() and resource.id.exists()).all($this.fullUrl.endsWith($this.resource.id))"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the fullUrl is an absolute URL, an uuid or an oid."/>
            <direction value="response"/>
            <expression value="Bundle.entry.fullUrl.all( startsWith('http://') or startsWith('https://') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') )"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle conforms to the base FHIR specification and the resources to the stated profiles in the meta.profile tag."/>
            <direction value="response"/>
            <stopTestOnFail value="false"/>
            <validateProfileId value="Bundle-profile"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Coding elements contain both a .system and a .code."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Coding)).all(system.exists() and code.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the OID of the zib valueset is not used for the system of a coding element."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(coding)).where(system.startsWith('urn:oid:2.16.840.1.113883.2.4.3.11.60.40.2')).exists().not()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all CodeableConcept elements contain either a coding.display or a text value if no Coding exists or has an extension (e.g. a nullFlavor or data-absent-reason extension). For more information see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3Use_of_coded_concepts."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(CodeableConcept)) .all(coding.display.exists() or text.exists() or extension.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all References have a display value, see https://informatiestandaarden.nictiz.nl/wiki/FHIR:V1.0_FHIR_IG_STU3#Use_of_the_reference_datatype."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Reference)).all(display.exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason').exists() or extension.where(url = 'http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor').exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that all Identifiers have both a .system and a .value. In rare cases where a general category of identifiers can be used, .type can replace .system. Edge cases for both .system and .type to be unknown are not applicable to Nictiz. For more information, see https://www.hl7.org/fhir/stu3/datatypes.html#Identifier."/>
            <direction value="response"/>
            <expression value="Bundle.descendants().where($this.is(Identifier)).all((system.exists() or type.exists()) and value.exists())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle total value matches or is less than the number of entries in the Bundle. The included resources should not be counted as entries in the Bundle.total."/>
            <direction value="response"/>
            <expression value="Bundle.total.exists() implies (Bundle.total.toInteger() &lt;= Bundle.entry.where(search.empty() or search.mode = 'match').count())"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the returned Bundle contains a self link."/>
            <direction value="response"/>
            <expression value="Bundle.link.where(relation = 'self' and url.exists()).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <extension url="http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript-assert-rule">
               <extension url="ruleId">
                  <valueId value="assert-response-queryParamsInSelfLink"/>
               </extension>
            </extension>
            <description value="Confirm that the parameters in the request URL are all handled by the server, by inspecting the self link."/>
            <stopTestOnFail value="false"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Confirm that the response Bundle contains 4 Provenance resource(s). "/>
            <direction value="response"/>
            <expression value="Bundle.entry.where(resource.is(Provenance)).count() = 4"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Provenance - Check Provenance 1"/>
      <description value="Check if the previous operation results in a FHIR Provenance that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Provenance with properties: contains .target with reference to Observation with code.coding.code = '85354-9'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '85354-9'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '85354-9'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Provenance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '85354-9'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '85354-9'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .target with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .recorded"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').recorded.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').recorded.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .activity with .system 'http://hl7.org/fhir/v3/DataOperation' and .code 'CREATE' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .agent with .whoReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').agent.where(who.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-06d229cf-6b5e-11ec-0000-2-id}').agent.where(who.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Provenance - Check Provenance 2"/>
      <description value="Check if the previous operation results in a FHIR Provenance that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Provenance with properties: contains .target with reference to Observation with code.coding.code = '29463-7'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '29463-7'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '29463-7'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Provenance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '29463-7'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '29463-7'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .target with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .recorded"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').recorded.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').recorded.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .activity with .system 'http://hl7.org/fhir/v3/DataOperation' and .code 'CREATE' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .agent with .whoReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').agent.where(who.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-a5dd5982-6b11-11ec-0000-2-id}').agent.where(who.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Provenance - Check Provenance 3"/>
      <description value="Check if the previous operation results in a FHIR Provenance that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Provenance with properties: contains .target with reference to Observation with valueCodeableConcept.coding.code = 'OTH'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().valueCodeableConcept.where(coding.where(code = 'OTH'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().valueCodeableConcept.where(coding.where(code = 'OTH'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Provenance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().valueCodeableConcept.where(coding.where(code = 'OTH'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().valueCodeableConcept.where(coding.where(code = 'OTH'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .target with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .recorded"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').recorded.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').recorded.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .activity with .system 'http://hl7.org/fhir/v3/DataOperation' and .code 'CREATE' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .agent with .whoReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').agent.where(who.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-b8e76196-6b7d-11ec-0000-2-id}').agent.where(who.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 1.2 - Provenance - Check Provenance 4"/>
      <description value="Check if the previous operation results in a FHIR Provenance that contains the values that are expected following Nictiz' materials (fixture .id: BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2)"/>
      <action>
         <assert>
            <description value="Response Bundle contains exactly 1 Provenance with properties: contains .target with reference to Observation with code.coding.code = '8302-2'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '8302-2'))).count() = 1'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '8302-2'))).count() = 1"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Provenance resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(target.resolve().code.where(coding.where(code = '8302-2'))).id.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(target.resolve().code.where(coding.where(code = '8302-2'))).id.exists()"/>
            <stopTestOnFail value="true"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata'"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/BgZ-Metadata').exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .target with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').target.where((reference or identifier) and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .recorded"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').recorded.exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').recorded.exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .activity with .system 'http://hl7.org/fhir/v3/DataOperation' and .code 'CREATE' and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').activity.where(system = 'http://hl7.org/fhir/v3/DataOperation' and code = 'CREATE' and display).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .agent with .whoReference with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <!--FHIRPath expressions with .ofType(...) are poorly supported at the moment, so it was rewritten. Original expression: 'Bundle.entry.resource.ofType(Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').agent.where(who.ofType(Reference).where((reference or identifier) and display)).exists()'-->
            <expression value="Bundle.entry.resource.where($this is Provenance).where(id = '${BgZ-Metadata-msz-dc03c5d2-6ad5-11ec-0000-2-id}').agent.where(who.where($this is Reference).where((reference or identifier) and display)).exists()"/>
            <stopTestOnFail value="false"/>
            <warningOnly value="false"/>
         </assert>
      </action>
   </test>
</TestScript>
