<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://hl7.org/fhir/STU3/testscript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns="http://hl7.org/fhir"
            xmlns:nts="http://nictiz.nl/xsl/testscript"
            nts:scenario="server">
   <id value="xis-1-7-serve-bodyweight"/>
   <version value="stu3-2.0"/>
   <name value="SelfMeasurements - XIS Server - Test Scenario 7.X - Serve bodyweight Observation resources"/>
   <description value="Scenario 7.X - Serve all bodyweight Observation resources"/>
   <nts:authToken patientResourceId="selfmeasurements-Patient-XXX-Smorenburg"/>
   <nts:includeDateT value="yes"/>
   <test id="scenario7-1-serve-all-bodyweight">
        
        
        
        
        
        <name value="Scenario 7.1"/>
        <description value="Serve all bodyweight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|29463-7"
                   responseId="fixture-scenario7-1-serve-all-bodyweight"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="4"/>
    </test>
   <test>
      <name value="Scenario 7.1 - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-kwalificatie1)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation that contains valueQuantity.value = '81'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=81)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=81)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-kwalificatie1-id"/>
         <description value="Resource.id for Observation 1"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=81)).id"/>
         <sourceId value="fixture-scenario7-1-serve-all-bodyweight"/>
      </variable>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').identifier.where(system and value).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '29463-7' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').subject.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').effective.ofType(dateTime).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7-checkDateTime"/>
            <description value="Contains .effectiveDateTime with a value that equals T-date - 22 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').effective.ofType(dateTime) ~ @${T} - 22 days"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').performer.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Contains .valueQuantity with .value '81' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').value.ofType(Quantity).where(value = 81 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks only one child. Assert 1-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display).exists()).exists()"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 7.1 - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-kwalificatie2)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation that contains valueQuantity.value = '82.5'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=82.5)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=82.5)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-kwalificatie2-id"/>
         <description value="Resource.id for Observation 2"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=82.5)).id"/>
         <sourceId value="fixture-scenario7-1-serve-all-bodyweight"/>
      </variable>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').identifier.where(system and value).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '29463-7' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').subject.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').effective.ofType(dateTime).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7-checkDateTime"/>
            <description value="Contains .effectiveDateTime with a value that equals T-date - 78 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').effective.ofType(dateTime) ~ @${T} - 78 days"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').performer.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Contains .valueQuantity with .value '82.5' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').value.ofType(Quantity).where(value = 82.5 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks only one child. Assert 2-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie2-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display).exists()).exists()"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 7.1 - Check Observation 3"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-kwalificatie3)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation that contains valueQuantity.value = '84'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=84)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=84)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-kwalificatie3-id"/>
         <description value="Resource.id for Observation 3"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=84)).id"/>
         <sourceId value="fixture-scenario7-1-serve-all-bodyweight"/>
      </variable>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').identifier.where(system and value).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '29463-7' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').subject.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').effective.ofType(dateTime).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7-checkDateTime"/>
            <description value="Contains .effectiveDateTime with a value that equals T-date - 234 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').effective.ofType(dateTime) ~ @${T} - 234 days"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').performer.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-9"/>
            <description value="Contains .valueQuantity with .value '84' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').value.ofType(Quantity).where(value = 84 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display. This assert checks only one child. Assert 3-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks only one child. Assert 3-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie3-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display).exists()).exists()"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 7.1 - Check Observation 4"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-kwalificatie4)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation that contains valueQuantity.value = '90'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=90)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=90)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-kwalificatie4-id"/>
         <description value="Resource.id for Observation 4"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=90)).id"/>
         <sourceId value="fixture-scenario7-1-serve-all-bodyweight"/>
      </variable>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').meta.profile.where($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyWeight').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').identifier.where(system and value).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Contains .code with .coding with .system 'http://loinc.org' and .code '29463-7' and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').code.coding.where(system = 'http://loinc.org' and code = '29463-7' and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').subject.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Contains .effectiveDateTime"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').effective.ofType(dateTime).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7-checkDateTime"/>
            <description value="Contains .effectiveDateTime with a value that equals T-date - 452 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').effective.ofType(dateTime) ~ @${T} - 452 days"/>
            <warningOnly value="true"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').performer.where((reference or identifier) and display).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-9"/>
            <description value="Contains .valueQuantity with .value '90' and .unit and .system 'http://unitsofmeasure.org' and .code 'kg'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').value.ofType(Quantity).where(value = 90 and unit and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10"/>
            <description value="Contains .component with .code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display and .valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display) and value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display)).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10-1"/>
            <description value="Contains .component.code with .coding with .system 'http://loinc.org' and .code '8352-7' and .display. This assert checks only one child. Assert 4-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').component.where(code.coding.where(system = 'http://loinc.org' and code = '8352-7' and display).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10-2"/>
            <description value="Contains .component.valueCodeableConcept with .coding with .system 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and .code 'MINIMAL' and .display. This assert checks only one child. Assert 4-10 checks if all children are present in the same parent"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie4-id}').component.where(value.ofType(CodeableConcept).coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display).exists()).exists()"/>
         </assert>
      </action>
   </test>
</TestScript>
