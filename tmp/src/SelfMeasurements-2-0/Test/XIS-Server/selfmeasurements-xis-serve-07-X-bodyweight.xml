<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://hl7.org/fhir/STU3/testscript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns="http://hl7.org/fhir"
            xmlns:nts="http://nictiz.nl/xsl/testscript"
            nts:scenario="server">
   <id value="xis-1-7-serve-bodyweight"/>
   <version value="stu3-2.0"/>
   <name value="SelfMeasurements - XIS Server - Test Scenario 7.X - Serve bodyweight Observation resources"/>
   <description value="Scenario 7.X - Serve all bodyweight Observation resources"/>
   <nts:authToken patientResourceId="selfmeasurements-Patient-XXX-Smorenburg"/>
   <nts:includeDateT value="yes"/>
   <test id="scenario7-1-serve-all-bodyweight">
        
        
        <name value="Scenario 7.1"/>
        <description value="Serve all bodyweight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|29463-7"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="4"/>
    </test>
   <test>
      <name value="check-selfmeasurements-kwalificatie1"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains 1 Observation resource that contains code '29463-7|http://loinc.org' and contains valueQuantity '81|kg'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(code.coding.code='29463-7' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=81 and code='kg').count() = 1.count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(code.coding.code='29463-7' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=81 and code='kg').count() = 1.id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-kwalificatie1-id"/>
         <description value="Resource.id for Observation X"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(code.coding.code='29463-7' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=81 and code='kg').count() = 1.id"/>
      </variable>
      <action>
         <assert>
            <description value="Observation X contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').identifier.where(system.exists() and value.exists())"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .status with value 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .category with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .code with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').code.where(coding.where(system = 'http://loinc.org' and code = '29463-7' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .subject with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').subject.where((reference.where( startsWith('http://') or startsWith('https://') or startsWith('#') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or (startsWith('urn:').not() and startsWith('#').not() and matches('^[A-Za-z]{3,}/[^/]+$')) ).exists() or identifier.exists()) and display.exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .effectiveDateTime with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').effective ~ @${T} - 22 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .performer with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').performer.where((reference.where( startsWith('http://') or startsWith('https://') or startsWith('#') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or (startsWith('urn:').not() and startsWith('#').not() and matches('^[A-Za-z]{3,}/[^/]+$')) ).exists() or identifier.exists()) and display.exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .valueQuantity with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').value.where(value = 81 and unit.exists() and system = 'http://unitsofmeasure.org' and code = 'kg').exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .component with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-kwalificatie1-id}').component.where(code.where(coding.where(system = 'http://loinc.org' and code = '8352-7' and display.exists())).exists() and value.where(coding.where(system = 'urn:oid:2.16.840.1.113883.2.4.3.11.60.40.4.8.1' and code = 'MINIMAL' and display.exists())).exists()).exists()"/>
         </assert>
      </action>
   </test>
   <test id="scenario7-2-serve-all-bodyweight">
        <name value="Scenario 7.2"/>
        <description value="Serve latest bodyweight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="/$lastn?code=http://loinc.org|29463-7"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="1"/>

        <action>
            <assert>
                <description value="Confirm that the latest observation resource has the correct bodyweight value"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(code.coding.code='29463-7' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=81 and code='kg').exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario7-3-serve-all-bodyweights">
        <name value="Scenario 7.3"/>
        <description value="Serve period bodyweight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|29463-7&amp;date=ge${DATE, T, D,-250}&amp;date=le${DATE, T, D,-75}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="2"/>

        <action>
            <assert>
                <description value="Confirm that resources contain the correct values"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(code.coding.code='29463-7' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=82.5 and code='kg').exists()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that resources contain the correct values"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(code.coding.code='29463-7' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=84 and code='kg').exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario7-4-serve-all-bodyweights">
        <name value="Scenario 7.4"/>
        <description value="Serve period bodyweight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|29463-7&amp;date=ge${DATE, T, D,-50}&amp;date=le${DATE, T, D,-25}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="0"/>
    </test>
</TestScript>
