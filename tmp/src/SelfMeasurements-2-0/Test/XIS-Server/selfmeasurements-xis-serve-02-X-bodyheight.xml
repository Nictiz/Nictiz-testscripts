<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://hl7.org/fhir/STU3/testscript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns="http://hl7.org/fhir"
            xmlns:nts="http://nictiz.nl/xsl/testscript"
            nts:scenario="server">
   <id value="xis-1-2-serve-bodyheight"/>
   <version value="stu3-2.0"/>
   <name value="SelfMeasurements - XIS Server - Test Scenario 2.X - Serve bodyheight Observation resources"/>
   <description value="Scenario 2.X - Serve all bodyheight Observation resources"/>
   <nts:authToken patientResourceId="selfmeasurements-Patient-XXX-Smorenburg"/>
   <nts:includeDateT value="yes"/>
   <test id="scenario2-1-serve-all-bodyheight">
        <name value="Scenario 2.1"/>
        <description value="Serve all bodyheight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|8302-2"
                   responseId="fixture-scenario2-1-serve-all-bodyheight"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="7"/>
        
        
        
        
        
        
        
        
    </test>
   <test>
      <name value="Scenario 2.1 - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyHeight1)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '187'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=187)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=187)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyHeight1-id"/>
         <description value="Resource.id for Observation 1"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=187)).id"/>
         <sourceId value="fixture-scenario2-1-serve-all-bodyheight"/>
      </variable>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Observation 1 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Observation 1 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Observation 1 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Observation 1 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Observation 1 contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display) and .coding with .system 'http://snomed.info/sct' and .code '10904000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '10904000' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Observation 1 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Observation 1 contains .effectiveDateTime with a value that equals T-date - 14 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').effective.ofType(dateTime) ~ @${T} - 14 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Observation 1 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Observation 1 contains .valueQuantity with .value '187' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight1-id}').value.ofType(Quantity).exists(value = 187 and unit and system = 'http://unitsofmeasure.org' and code = 'cm')"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 2.1 - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyHeight2)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '182'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=182)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=182)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyHeight2-id"/>
         <description value="Resource.id for Observation 2"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=182)).id"/>
         <sourceId value="fixture-scenario2-1-serve-all-bodyheight"/>
      </variable>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Observation 2 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Observation 2 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Observation 2 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Observation 2 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Observation 2 contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display) and .coding with .system 'http://snomed.info/sct' and .code '10904000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '10904000' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Observation 2 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Observation 2 contains .effectiveDateTime with a value that equals T-date - 350 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').effective.ofType(dateTime) ~ @${T} - 350 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Observation 2 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Observation 2 contains .valueQuantity with .value '182' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight2-id}').value.ofType(Quantity).exists(value = 182 and unit and system = 'http://unitsofmeasure.org' and code = 'cm')"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 2.1 - Check Observation 3"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyHeight3)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '173'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=173)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=173)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyHeight3-id"/>
         <description value="Resource.id for Observation 3"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=173)).id"/>
         <sourceId value="fixture-scenario2-1-serve-all-bodyheight"/>
      </variable>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Observation 3 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Observation 3 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Observation 3 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Observation 3 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Observation 3 contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display) and .coding with .system 'http://snomed.info/sct' and .code '10904000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '10904000' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Observation 3 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Observation 3 contains .effectiveDateTime with a value that equals T-date - 783 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').effective.ofType(dateTime) ~ @${T} - 783 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Observation 3 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-9"/>
            <description value="Observation 3 contains .valueQuantity with .value '173' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight3-id}').value.ofType(Quantity).exists(value = 173 and unit and system = 'http://unitsofmeasure.org' and code = 'cm')"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 2.1 - Check Observation 4"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyHeight4)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '165'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=165)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=165)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyHeight4-id"/>
         <description value="Resource.id for Observation 4"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=165)).id"/>
         <sourceId value="fixture-scenario2-1-serve-all-bodyheight"/>
      </variable>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Observation 4 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Observation 4 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Observation 4 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Observation 4 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Observation 4 contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display) and .coding with .system 'http://snomed.info/sct' and .code '10904000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '10904000' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Observation 4 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Observation 4 contains .effectiveDateTime with a value that equals T-date - 1125 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').effective.ofType(dateTime) ~ @${T} - 1125 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Observation 4 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-9"/>
            <description value="Observation 4 contains .valueQuantity with .value '165' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').value.ofType(Quantity).exists(value = 165 and unit and system = 'http://unitsofmeasure.org' and code = 'cm')"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10"/>
            <description value="Observation 4 contains .comment 'Inclusief schoenen'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight4-id}').comment.replace('.', '') ~ 'Inclusief schoenen'"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 2.1 - Check Observation 5"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyHeight5)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '151'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=151)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=151)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyHeight5-id"/>
         <description value="Resource.id for Observation 5"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=151)).id"/>
         <sourceId value="fixture-scenario2-1-serve-all-bodyheight"/>
      </variable>
      <action>
         <assert>
            <label value="5-1"/>
            <description value="Observation 5 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-2"/>
            <description value="Observation 5 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-3"/>
            <description value="Observation 5 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-4"/>
            <description value="Observation 5 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-5"/>
            <description value="Observation 5 contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display) and .coding with .system 'http://snomed.info/sct' and .code '10904000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '10904000' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-6"/>
            <description value="Observation 5 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-7"/>
            <description value="Observation 5 contains .effectiveDateTime with a value that equals T-date - 1568 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').effective.ofType(dateTime) ~ @${T} - 1568 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-8"/>
            <description value="Observation 5 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="5-9"/>
            <description value="Observation 5 contains .valueQuantity with .value '151' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight5-id}').value.ofType(Quantity).exists(value = 151 and unit and system = 'http://unitsofmeasure.org' and code = 'cm')"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 2.1 - Check Observation 6"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyHeight6)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '140'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=140)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=140)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyHeight6-id"/>
         <description value="Resource.id for Observation 6"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=140)).id"/>
         <sourceId value="fixture-scenario2-1-serve-all-bodyheight"/>
      </variable>
      <action>
         <assert>
            <label value="6-1"/>
            <description value="Observation 6 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-2"/>
            <description value="Observation 6 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-3"/>
            <description value="Observation 6 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-4"/>
            <description value="Observation 6 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-5"/>
            <description value="Observation 6 contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display) and .coding with .system 'http://snomed.info/sct' and .code '10904000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '10904000' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-6"/>
            <description value="Observation 6 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-7"/>
            <description value="Observation 6 contains .effectiveDateTime with a value that equals T-date - 1937 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').effective.ofType(dateTime) ~ @${T} - 1937 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-8"/>
            <description value="Observation 6 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="6-9"/>
            <description value="Observation 6 contains .valueQuantity with .value '140' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight6-id}').value.ofType(Quantity).exists(value = 140 and unit and system = 'http://unitsofmeasure.org' and code = 'cm')"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 2.1 - Check Observation 7"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyHeight7)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '56'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=56)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=56)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyHeight7-id"/>
         <description value="Resource.id for Observation 7"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=56)).id"/>
         <sourceId value="fixture-scenario2-1-serve-all-bodyheight"/>
      </variable>
      <action>
         <assert>
            <label value="7-1"/>
            <description value="Observation 7 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyHeight'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-2"/>
            <description value="Observation 7 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-3"/>
            <description value="Observation 7 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-4"/>
            <description value="Observation 7 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-5"/>
            <description value="Observation 7 contains .code with .coding with .system 'http://loinc.org' and .code '8302-2' and .display) and .coding with .system 'http://snomed.info/sct' and .code '102538003' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8302-2' and display) and coding.where(system = 'http://snomed.info/sct' and code = '102538003' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-6"/>
            <description value="Observation 7 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-7"/>
            <description value="Observation 7 contains .effectiveDateTime with a value that equals T-date - 2738 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').effective.ofType(dateTime) ~ @${T} - 2738 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-8"/>
            <description value="Observation 7 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="7-9"/>
            <description value="Observation 7 contains .valueQuantity with .value '56' and .unit and .system 'http://unitsofmeasure.org' and .code 'cm'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyHeight7-id}').value.ofType(Quantity).exists(value = 56 and unit and system = 'http://unitsofmeasure.org' and code = 'cm')"/>
         </assert>
      </action>
   </test>
   <test id="scenario2-2-serve-all-bodyheight">
        <name value="Scenario 2.2"/>
        <description value="Serve latest bodyheight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="/$lastn?code=http://loinc.org|8302-2"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="1"/>

        <action>
            <assert>
                <description value="Confirm that the correct Observation is returned"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=187)).exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario2-3-serve-all-bodyheights">
        <name value="Scenario 2.3"/>
        <description value="Serve period bodyheight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|8302-2&amp;date=ge${DATE, T, D,-1200}&amp;date=le${DATE, T, D,-250}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="3"/>

        <action>
            <assert>
                <description value="Confirm that the correct Observation is returned"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=182)).exists()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the correct Observation is returned"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=173)).exists()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that the correct Observation is returned"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=165)).exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario2-4-serve-all-bodyheights">
        <name value="Scenario 2.4"/>
        <description value="Serve period bodyheight Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|8302-2&amp;date=ge${DATE, T, D,-50}&amp;date=le${DATE, T, D,-21}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="0"/>
    </test>
</TestScript>
