<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://hl7.org/fhir/STU3/testscript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns="http://hl7.org/fhir"
            xmlns:nts="http://nictiz.nl/xsl/testscript"
            nts:scenario="server">
   <id value="xis-1-3-serve-all-bodyTemperature"/>
   <version value="stu3-2.0"/>
   <name value="SelfMeasurements - XIS Server - Test Scenario 3.X - Serve bodyTemperature Observation resources"/>
   <description value="Scenario 3.X - Serve all bodyTemperature Observation resources"/>
   <nts:authToken patientResourceId="selfmeasurements-Patient-XXX-Smorenburg"/>
   <nts:includeDateT value="yes"/>
   <test id="scenario3-1-serve-all-bodyTemperature">
        <name value="Scenario 3.1"/>
        <description value="Serve all bodyTemperature Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|8310-5"
                   responseId="fixture-scenario3-1-serve-all-bodyTemperature"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="4"/>
        
        
        
        
        
    </test>
   <test>
      <name value="Scenario 3.1 - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyTemperature1)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '37.2'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=37.2)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=37.2)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyTemperature1-id"/>
         <description value="Resource.id for Observation 1"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=37.2)).id"/>
         <sourceId value="fixture-scenario3-1-serve-all-bodyTemperature"/>
      </variable>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Observation 1 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Observation 1 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Observation 1 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Observation 1 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Observation 1 contains .code with .coding with .system 'http://loinc.org' and .code '8310-5' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8310-5' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Observation 1 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Observation 1 contains .effectiveDateTime with a value that equals T-date - 14 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').effective.ofType(dateTime) ~ @${T} - 14 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Observation 1 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Observation 1 contains .valueQuantity with .value '37.2' and .unit and .system 'http://unitsofmeasure.org' and .code 'Cel'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').value.ofType(Quantity).exists(value = 37.2 and unit and system = 'http://unitsofmeasure.org' and code = 'Cel')"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Observation 1 contains .method with .coding with .system 'http://snomed.info/sct' and .code '415945006' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature1-id}').method.exists(coding.where(system = 'http://snomed.info/sct' and code = '415945006' and display))"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 3.1 - Check Observation 2"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyTemperature2)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '36.7'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=36.7)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=36.7)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyTemperature2-id"/>
         <description value="Resource.id for Observation 2"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=36.7)).id"/>
         <sourceId value="fixture-scenario3-1-serve-all-bodyTemperature"/>
      </variable>
      <action>
         <assert>
            <label value="2-1"/>
            <description value="Observation 2 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-2"/>
            <description value="Observation 2 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-3"/>
            <description value="Observation 2 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-4"/>
            <description value="Observation 2 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-5"/>
            <description value="Observation 2 contains .code with .coding with .system 'http://loinc.org' and .code '8310-5' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8310-5' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-6"/>
            <description value="Observation 2 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-7"/>
            <description value="Observation 2 contains .effectiveDateTime with a value that equals T-date - 23 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').effective.ofType(dateTime) ~ @${T} - 23 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-8"/>
            <description value="Observation 2 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-9"/>
            <description value="Observation 2 contains .valueQuantity with .value '36.7' and .unit and .system 'http://unitsofmeasure.org' and .code 'Cel'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').value.ofType(Quantity).exists(value = 36.7 and unit and system = 'http://unitsofmeasure.org' and code = 'Cel')"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="2-10"/>
            <description value="Observation 2 contains .method with .coding with .system 'http://snomed.info/sct' and .code '415882003' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature2-id}').method.exists(coding.where(system = 'http://snomed.info/sct' and code = '415882003' and display))"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 3.1 - Check Observation 3"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyTemperature3)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '38.3'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=38.3)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=38.3)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyTemperature3-id"/>
         <description value="Resource.id for Observation 3"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=38.3)).id"/>
         <sourceId value="fixture-scenario3-1-serve-all-bodyTemperature"/>
      </variable>
      <action>
         <assert>
            <label value="3-1"/>
            <description value="Observation 3 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-2"/>
            <description value="Observation 3 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-3"/>
            <description value="Observation 3 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-4"/>
            <description value="Observation 3 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-5"/>
            <description value="Observation 3 contains .code with .coding with .system 'http://loinc.org' and .code '8310-5' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8310-5' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-6"/>
            <description value="Observation 3 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-7"/>
            <description value="Observation 3 contains .effectiveDateTime with a value that equals T-date - 28 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').effective.ofType(dateTime) ~ @${T} - 28 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-8"/>
            <description value="Observation 3 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-9"/>
            <description value="Observation 3 contains .valueQuantity with .value '38.3' and .unit and .system 'http://unitsofmeasure.org' and .code 'Cel'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').value.ofType(Quantity).exists(value = 38.3 and unit and system = 'http://unitsofmeasure.org' and code = 'Cel')"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-10"/>
            <description value="Observation 3 contains .comment 'Verhoging'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').comment.replace('.', '') ~ 'Verhoging'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="3-11"/>
            <description value="Observation 3 contains .method with .coding with .system 'http://snomed.info/sct' and .code '415922000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature3-id}').method.exists(coding.where(system = 'http://snomed.info/sct' and code = '415922000' and display))"/>
         </assert>
      </action>
   </test>
   <test>
      <name value="Scenario 3.1 - Check Observation 4"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-BodyTemperature4)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle contains exactly 1 Observation resource that contains valueQuantity.value = '37.4'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=37.4)).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=37.4)).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-BodyTemperature4-id"/>
         <description value="Resource.id for Observation 4"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=37.4)).id"/>
         <sourceId value="fixture-scenario3-1-serve-all-bodyTemperature"/>
      </variable>
      <action>
         <assert>
            <label value="4-1"/>
            <description value="Observation 4 contains .meta with .profile 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-BodyTemperature'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-2"/>
            <description value="Observation 4 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-3"/>
            <description value="Observation 4 contains .status 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-4"/>
            <description value="Observation 4 contains .category with .coding with .system 'http://hl7.org/fhir/observation-category' and .code 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').category.exists(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-5"/>
            <description value="Observation 4 contains .code with .coding with .system 'http://loinc.org' and .code '8310-5' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').code.exists(coding.where(system = 'http://loinc.org' and code = '8310-5' and display))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-6"/>
            <description value="Observation 4 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-7"/>
            <description value="Observation 4 contains .effectiveDateTime with a value that equals T-date - 50 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').effective.ofType(dateTime) ~ @${T} - 50 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-8"/>
            <description value="Observation 4 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-9"/>
            <description value="Observation 4 contains .valueQuantity with .value '37.4' and .unit and .system 'http://unitsofmeasure.org' and .code 'Cel'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').value.ofType(Quantity).exists(value = 37.4 and unit and system = 'http://unitsofmeasure.org' and code = 'Cel')"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="4-10"/>
            <description value="Observation 4 contains .method with .coding with .system 'http://snomed.info/sct' and .code '415922000' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-BodyTemperature4-id}').method.exists(coding.where(system = 'http://snomed.info/sct' and code = '415922000' and display))"/>
         </assert>
      </action>
   </test>
   <test id="scenario3-2-serve-all-bodyTemperature">
        <name value="Scenario 3.2"/>
        <description value="Serve latest bodyTemperature Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="/$lastn?code=http://loinc.org|8310-5"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="1"/>

        <action>
            <assert>
                <description value="Confirm that the latest observation resource has the correct bodyTemperature value"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=37.2)).exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario3-3-serve-all-bodyTemperatures">
        <name value="Scenario 3.3"/>
        <description value="Serve period bodyTemperature Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|8310-5&amp;date=ge${DATE, T, D,-30}&amp;date=le${DATE, T, D,-20}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="2"/>

        <action>
            <assert>
                <description value="Confirm that resources contain the correct values"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=36.7)).exists()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that resources contain the correct values"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).where(value.ofType(Quantity).where(value=38.3)).exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario3-4-serve-all-bodyTemperatures">
        <name value="Scenario 3.4"/>
        <description value="Serve period bodyTemperature Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://loinc.org|8310-5&amp;date=ge${DATE, T, D,-45}&amp;date=le${DATE, T, D,-30}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="0"/>
    </test>
</TestScript>
