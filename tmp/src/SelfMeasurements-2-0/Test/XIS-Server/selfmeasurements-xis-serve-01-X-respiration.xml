<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://hl7.org/fhir/STU3/testscript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns="http://hl7.org/fhir"
            xmlns:nts="http://nictiz.nl/xsl/testscript"
            nts:scenario="server">
   <id value="xis-1-1-serve-respiration"/>
   <version value="stu3-2.0"/>
   <name value="SelfMeasurements - XIS Server - Test Scenario 1.X - Serve respiration Observation resources"/>
   <description value="Scenario 1.X - Serve all respiration Observation resources"/>
   <nts:authToken patientResourceId="selfmeasurements-Patient-XXX-Smorenburg"/>
   <nts:includeDateT value="yes"/>
   <test id="scenario1-1-serve-all-respiration">
        
        
        <name value="Scenario 1.1"/>
        <description value="Serve all respiration Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://snomed.info/sct|422834003"
                   responseId="fixture-scenario1-1-serve-all-respiration"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="5"/>
    </test>
   <test>
      <name value="Scenario 1.1 - Check Observation 1"/>
      <description value="Check if the previous operation results in a FHIR Observation that contains the values that are expected following Nictiz' materials (fixture .id: selfmeasurements-Respiration2)"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle "/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=22 and code.matches('^\\{.+\\}/min$'))).count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=22 and code.matches('^\\{.+\\}/min$'))).id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-Respiration2-id"/>
         <description value="Resource.id for Observation 1"/>
         <expression value="Bundle.entry.resource.ofType(Observation).where(component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=22 and code.matches('^\\{.+\\}/min$'))).id"/>
         <sourceId value="fixture-scenario1-1-serve-all-respiration"/>
      </variable>
      <action>
         <assert>
            <label value="1-1"/>
            <description value="Observation 1 contains .meta with .profile with value 'http://nictiz.nl/fhir/StructureDefinition/zib-Respiration'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').meta.exists(profile.exists($this = 'http://nictiz.nl/fhir/StructureDefinition/zib-Respiration'))"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2"/>
            <description value="Observation 1 contains .extension with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Respiration-AdministeredOxygen').where(extension('extraOxygenAdministration').where(value = true).exists() and extension('fiO2').where(value.where(value = 0.3 and unit.exists() and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}$')).exists()).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-1"/>
            <description value="Observation 1 contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-Respiration-AdministeredOxygen').extension with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Respiration-AdministeredOxygen').extension('extraOxygenAdministration').where(value = true).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-2-2"/>
            <description value="Observation 1 contains .extension('http://nictiz.nl/fhir/StructureDefinition/zib-Respiration-AdministeredOxygen').extension with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').extension('http://nictiz.nl/fhir/StructureDefinition/zib-Respiration-AdministeredOxygen').extension('fiO2').where(value.where(value = 0.3 and unit.exists() and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}$')).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-3"/>
            <description value="Observation 1 contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').identifier.exists(system and value)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-4"/>
            <description value="Observation 1 contains .status with value 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-5"/>
            <description value="Observation 1 contains .category with .coding with .system with value 'http://hl7.org/fhir/observation-category' and .code with value 'vital-signs' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-6"/>
            <description value="Observation 1 contains .code with .coding with .system with value 'http://snomed.info/sct' and .code with value '422834003' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').code.where(coding.where(system = 'http://snomed.info/sct' and code = '422834003' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-7"/>
            <description value="Observation 1 contains .subject with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').subject.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-8"/>
            <description value="Observation 1 contains .effectiveDateTime with a value that equals T-date - 5 days"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').effective ~ @${T} - 5 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-9"/>
            <description value="Observation 1 contains .performer with either .reference or .identifier and .display"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').performer.exists((reference or identifier) and display)"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-10"/>
            <description value="Observation 1 contains .comment with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').comment = 'na het traplopen'"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11"/>
            <description value="Observation 1 contains .component with specific contents. This asserts checks both if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.where(code.where(coding.where(system = 'http://loinc.org' and code = '9279-1' and display.exists())).exists() and value.where(value = 22 and unit.exists() and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}/min$')).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-1"/>
            <description value="Observation 1 contains .component.code with .coding with .system with value 'http://loinc.org' and .code with value '9279-1' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.code.where(coding.where(system = 'http://loinc.org' and code = '9279-1' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-11-2"/>
            <description value="Observation 1 contains .component.valueQuantity with .value with value '22' and .unit and .system with value 'http://unitsofmeasure.org' and .code matching regex '^\\{.+\\}/min$'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.value.where(value = 22 and unit.exists() and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}/min$')).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12"/>
            <description value="Observation 1 contains .component with specific contents. This asserts checks both if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.where(code.where(coding.where(system = 'http://snomed.info/sct' and code = '48064009' and display.exists())).exists() and value.where(coding.where(system = 'http://snomed.info/sct' and code = '5467003' and display.exists())).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12-1"/>
            <description value="Observation 1 contains .component.code with .coding with .system with value 'http://snomed.info/sct' and .code with value '48064009' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.code.where(coding.where(system = 'http://snomed.info/sct' and code = '48064009' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-12-2"/>
            <description value="Observation 1 contains .component.valueCodeableConcept with .coding with .system with value 'http://snomed.info/sct' and .code with value '5467003' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.value.where(coding.where(system = 'http://snomed.info/sct' and code = '5467003' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-13"/>
            <description value="Observation 1 contains .component with specific contents. This asserts checks both if all children exist (if applicable with their specific values) and if they are present within one element. Following asserts check if individual children exist to help you debug if this assert fails"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.where(code.where(coding.where(system = 'http://snomed.info/sct' and code = '271626009' and display.exists())).exists() and value.where(coding.where(system = 'http://snomed.info/sct' and code = '386616007' and display.exists())).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-13-1"/>
            <description value="Observation 1 contains .component.code with .coding with .system with value 'http://snomed.info/sct' and .code with value '271626009' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.code.where(coding.where(system = 'http://snomed.info/sct' and code = '271626009' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <label value="1-13-2"/>
            <description value="Observation 1 contains .component.valueCodeableConcept with .coding with .system with value 'http://snomed.info/sct' and .code with value '386616007' and .display)"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration2-id}').component.value.where(coding.where(system = 'http://snomed.info/sct' and code = '386616007' and display.exists())).exists()"/>
         </assert>
      </action>
   </test>
</TestScript>
