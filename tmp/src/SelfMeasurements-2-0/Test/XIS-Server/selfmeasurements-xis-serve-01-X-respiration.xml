<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://hl7.org/fhir/STU3/testscript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns="http://hl7.org/fhir"
            xmlns:nts="http://nictiz.nl/xsl/testscript"
            nts:scenario="server">
   <id value="xis-1-1-serve-respiration"/>
   <version value="stu3-2.0"/>
   <name value="SelfMeasurements - XIS Server - Test Scenario 1.X - Serve respiration Observation resources"/>
   <description value="Scenario 1.X - Serve all respiration Observation resources"/>
   <nts:authToken patientResourceId="selfmeasurements-Patient-XXX-Smorenburg"/>
   <nts:includeDateT value="yes"/>
   <test id="scenario1-1-serve-all-respiration">
        
        
        <name value="Scenario 1.1"/>
        <description value="Serve all respiration Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://snomed.info/sct|422834003"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="5"/>
    </test>
   <test>
      <name value="check-selfmeasurements-Respiration1"/>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Response Bundle "/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=15 and code.matches('^\\{.+\\}/min$')).exists().count() = 1"/>
         </assert>
      </action>
      <action>
         <assert nts:stopTestOnFail="true">
            <description value="Observation resource evaluated in the previous assert contains an .id"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=15 and code.matches('^\\{.+\\}/min$')).exists().id.exists()"/>
         </assert>
      </action>
      <variable>
         <name value="selfmeasurements-Respiration1-id"/>
         <description value="Resource.id for Observation X"/>
         <expression value="Bundle.entry.resource.ofType(Observation).component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=15 and code.matches('^\\{.+\\}/min$')).exists().id"/>
      </variable>
      <action>
         <assert>
            <description value="Observation X contains .identifier with .system and .value"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').identifier.where(system.exists() and value.exists())"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .status with value 'final'"/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').status = 'final'"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .category with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').category.where(coding.where(system = 'http://hl7.org/fhir/observation-category' and code = 'vital-signs' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .code with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').code.where(coding.where(system = 'http://snomed.info/sct' and code = '422834003' and display.exists())).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .subject with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').subject.where((reference.where( startsWith('http://') or startsWith('https://') or startsWith('#') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or (startsWith('urn:').not() and startsWith('#').not() and matches('^[A-Za-z]{3,}/[^/]+$')) ).exists() or identifier.exists()) and display.exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .effectiveDateTime with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').effective ~ @${T} - 3 days"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .performer with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').performer.where((reference.where( startsWith('http://') or startsWith('https://') or startsWith('#') or matches('^urn:oid:[0-2](\\.(0|[1-9]\\d*))*$') or matches('^urn:uuid:[A-Fa-f\\d]{8}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{4}-[A-Fa-f\\d]{12}$') or (startsWith('urn:').not() and startsWith('#').not() and matches('^[A-Za-z]{3,}/[^/]+$')) ).exists() or identifier.exists()) and display.exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .component with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').component.where(code.where(coding.where(system = 'http://loinc.org' and code = '9279-1' and display.exists())).exists() and value.where(value = 15 and unit.exists() and system = 'http://unitsofmeasure.org' and code.matches('^\\{.+\\}/min$')).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .component with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').component.where(code.where(coding.where(system = 'http://snomed.info/sct' and code = '48064009' and display.exists())).exists() and value.where(coding.where(system = 'http://snomed.info/sct' and code = '5467003' and display.exists())).exists()).exists()"/>
         </assert>
      </action>
      <action>
         <assert>
            <description value="Observation X contains .component with ..."/>
            <direction value="response"/>
            <expression value="Bundle.entry.resource.ofType(Observation).where(id = '${selfmeasurements-Respiration1-id}').component.where(code.where(coding.where(system = 'http://snomed.info/sct' and code = '271626009' and display.exists())).exists() and value.where(coding.where(system = 'http://snomed.info/sct' and code = '301284009' and display.exists())).exists()).exists()"/>
         </assert>
      </action>
   </test>
   <test id="scenario1-2-serve-all-respiration">
        <name value="Scenario 1.2"/>
        <description value="Serve latest respiration Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="/$lastn?code=http://snomed.info/sct|422834003"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="1"/>

        <action>
            <assert>
                <description value="Confirm that the latest observation resource has the correct respiration value"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=15 and code.matches('^\\{.+\\}/min$')).exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario1-3-serve-all-respirations">
        <name value="Scenario 1.3"/>
        <description value="Serve period respiration Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://snomed.info/sct|422834003&amp;date=ge${DATE, T, D,-14}&amp;date=le${DATE, T, D,-5}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="2"/>

        <action>
            <assert>
                <description value="Confirm that resources contain the correct values"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=22 and code.matches('^\\{.+\\}/min$')).exists()"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Confirm that resources contain the correct values"/>
                <direction value="response"/>
                <expression value="Bundle.entry.resource.ofType(Observation).component.where(code.coding.code='9279-1' and code.coding.system='http://loinc.org').value.ofType(Quantity).where(value=14 and code.matches('^\\{.+\\}/min$')).exists()"/>
            </assert>
        </action>
    </test>
   <test id="scenario1-4-serve-all-respirations">
        <name value="Scenario 1.4"/>
        <description value="Serve period respiration Observation resources"/>
        <nts:include value="medmij/test.xis.successfulSearch"
                   scope="common"
                   resource="Observation"
                   params="?code=http://snomed.info/sct|422834003&amp;date=ge${DATE, T, D,-12}&amp;date=le${DATE, T, D,-6}"/>
        <nts:include value="assert.response.numResources"
                   scope="common"
                   resource="Observation"
                   count="0"/>
    </test>
</TestScript>
