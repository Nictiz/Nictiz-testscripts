<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="bootstrapFromGithub" default="build">
    <!-- 
        ANT build script to start the build from the lib cache or, if that doesn't exist yet, download the tools from
        Github first. It is assumed that this is a Nictiz repo.
        The following parameters need to be present:
        * tool.reponame - The name of the repository
        * tool.name     - Basically the relevant folder name within the repository
        * tool.version  - The version of the tool (as understood by git, so any tag, release, branch or commit will
                          do). Scripts that include this file can override this property by setting a property called
                          [including project name].tool.version.
        * tool.antfile  - The complete path to the antfile to call
    -->
    <property name="tool.localdir" value=""/>

    <!-- Relative paths turn out to be a nightmare to get right, so lets convert it to an absolute path -->
    <property name="tool.localdir.abs" location="${tool.localdir}"/>

    <!-- Tell the main build script where to find common asserts and place the build scripts -->
    <property name="lib.dir" location="${basedir}/lib"/>

    <!-- Some magic to overide the tool.version property with the value set by [including project name].tool.version -->
    <macrodef name="overrideprop">
        <attribute name="name"/>
        <attribute name="from"/>
        <attribute name="else"/>
        <sequential>
            <condition property="@{name}" value="${@{from}}" else="${@{else}}">
                <isset property="@{from}"/>
            </condition>
        </sequential>
    </macrodef>
    <overrideprop name="tool.version.actual" from="${ant.project.name}.tool.version" else="tool.version"/>
    
    <!-- Construct the path to the test scripts, either the locally defined dir or a new dir under "lib" -->
    <property name="testscripttools.repo.dir" location="${lib.dir}/${tool.reponame}/${tool.name}/${tool.version.actual}"/>
    <condition property="testscripttools.dir" value="${tool.localdir.abs}" else="${testscripttools.repo.dir}">
        <length string="${tool.localdir}" trim="true" when="greater" length="0"/>
    </condition>
    
    <!-- Check if we need to download the testscript tools repo from Github, which is needed if we don't have it
         already and if we didn't specify to use a local copy (we never download anything when using a local copy so we
         cannot accidentally override it). -->
    <target name="checkForRepoDownload">
        <condition property="download.repo">
            <and>
                <length string="${tool.localdir}" trim="true" when="equal" length="0"/>
                <not>
                    <available file="${testscripttools.dir}"/>
                </not>               
            </and>
        </condition>
    </target>
    
    <!-- Download and extract the Nictiz testscript tools from Github if we don't have them already --> 
    <target name="get.toolrepo" depends="checkForRepoDownload" if="download.repo">
        <sequential>
            <echo>Downloading the testscript tools repo from Github</echo>
            <echo>If you want to use a local copy for debugging, specifiy it with the -Dtestscripttools.local=... parameter</echo>
            <echo/>
            <mkdir dir="${testscripttools.dir}/"/>
            <local name="zip.name"/>
            <property name="zip.name" value="${testscripttools.dir}/package.zip"/>
            <get src="https://github.com/Nictiz/${tool.reponame}/archive/${tool.version.actual}.zip"
                dest="${zip.name}"/>
            <unzip src="${zip.name}" dest="${testscripttools.dir}" failOnEmptyArchive="true">
                <patternset>
                    <include name="*/${tool.name}/**"/>
                </patternset>
                <mapper type="regexp" from="^.*?/${tool.name}/(.*)" to="\1"/>
            </unzip>
            <delete file="${zip.name}"/>
            <property name="hastestscripttools" value="true" />
        </sequential>
    </target>

    <!-- Handover control to the build file in the lib cache. -->
    <target name="build" depends="get.toolrepo">
        <ant antfile="${testscripttools.dir}/${tool.antfile}" inheritAll="true" inheritRefs="true"/>
    </target>
        
</project>
