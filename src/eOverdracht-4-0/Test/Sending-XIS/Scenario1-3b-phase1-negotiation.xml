<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../general/schematron/NictizTestScript.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TestScript xmlns="http://hl7.org/fhir" xmlns:nts="http://nictiz.nl/xsl/testscript"
    nts:scenario="server" nts:numOrigins="2" nts:numDestinations="2" >
    
    <id value="Sending-XIS-scenario1.1b-negotiation"/>
    <version value="stu3-4.0"/>
    <name value="Sending-XIS-scenario1.1b-negotiation"/>
    <description value="Scenario 1.3b for eOverdracht sending systems. This test focuses on the negotiation phase ('aanmeldfase') where the receiving xis proposes an alternative transfer date, but the sending xis doesn't agree to this. The result of the negotion will be that the Patient is not transferred. Hence, there is no subsequent test for the transfer phase ('overdrachtfase')."/>
    
    <nts:includeDateT value="yes"/>
    <nts:authToken patientResourceId="nl-core-patient-eov-test-1-3b-01"/>

    <!--
        EOVDR-444/KT-384: Declare a (unused) fixture as a workaround for a Touchstone bug.
        The line below should be put back in the setup once KT-384 has been resolved.
    -->
    <nts:fixture
        id="initial-task-fixture"
        href="resources/resources-specific/eOverdracht-Task-eov-test-1_3b-REQUESTED.xml"/>

    <setup nts:in-targets="Nictiz-only">
        <nts:include value="setup.general.initializeTask"
            task-fixture-id="initial-task-fixture"
            description="At the sending XIS, a new Task is created in status 'requested'."/>
    </setup>

    <nts:include value="action.sendingxis.sendNotification"
        name="Notify new Task"
        description="The sending XIS should send a notification to the receiving XIS because a new Task has been created with status 'requested'."/>
    
    <test>
        <name value="Serve 'requested' Task"/>
        <description value="The sending XIS should serve the Task specified in the notification."/>
        
        <nts:include value="test.sendingxis.serveTask"
            taskStatus="requested"
            responseId="requested-task-response"/>

        <nts:include value="rewrite.response.taskWithAlternativeDate"
            fixtureId="on-hold-task-fixture"
            newDate="${DATE, T, d, 2}"/>

        <nts:include nts:in-targets="Nictiz-only" value="rewrite.response.taskStatus" scope="common"
            newStatus="cancelled"
            fixtureId="cancelled-task-fixture"/>
    </test>
    
    <test>
        <name value="Serve advance notice"/>
        <description value="After reading the Task, the receiving XIS performs a read operation on the advance notice Composition that is referenced on Task.input."/>
        
        <nts:include value="test.sendingxis.serveComposition"
            taskFixtureId="requested-task-response"
            sliceSystem="http://snomed.info/sct" sliceCode="721915006"
            validateWarningOnly="true" />
    </test>
    
    <test>
        <name value="Alternative date proposed"/>
        <description value="The sending XIS should handle an update to the Task where the status is set to 'on-hold' and the Task.output:alternativeDate slice is filled out to signal that the receiving XIS is able to transfer the patient only at some alternative date and time. This should be an update operation where the original Task is sent, with only the status and output elements changed."/>
        
        <nts:include value="test.sendingxis.handleTaskUpdate"
            taskStatus="on-hold"
            taskFixtureId="on-hold-task-fixture"/>
    </test>
    
    <test nts:in-targets="Nictiz-only">
        <name value="Set Task to 'cancelled'"/>
        <description value="The sending XIS now sets the status of the Task to 'cancelled' to signal the receiving XIS that the patient will not be transferred."/>
        
        <nts:include value="action.general.updateTaskBySendingXis"
            task-fixture-id="cancelled-task-fixture"
            description="Set the eOverdracht Task resource to 'in-progress'."/>
    </test>
    
    <nts:include value="action.sendingxis.sendNotification"
        name="Notify 'cancelled' Task"
        description="The sending XIS should now sends a notification to the receiving XIS because the Task has been set to status 'in-progress'."/>
    
    <test>
        <name value="Serve 'cancelled' Task"/>
        <description value="The sending XIS should serve the Task with status 'cancelled'."/>
        
        <nts:include value="test.sendingxis.serveTask"
            taskStatus="cancelled"/>
    </test>
</TestScript>
