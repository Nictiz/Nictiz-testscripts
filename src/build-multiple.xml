<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="buildMultiple" basedir=".." default="build">
     <!-- DEPENDENCY MANAGEMENT -->
    
     <!-- Tell the main build script where to find common asserts and place the build scripts -->
    <property name="lib.dir" location="${basedir}/lib"/>

    <property name="dependency.dir" value="${lib.dir}/ant-dependencies"/>
   
    <property name="ivy.install.version" value="2.5.0-rc1" />
    <property name="ivy.jar.file" value="${ant.library.dir}/ivy.jar" />
    <property name="ivy.local.jar.file" value="${dependency.dir}/ivy.jar" />
    <property name="ivy.dep.file" value="src/ivy.xml" />
    
    <target name="check-ivy">
        <condition property="ivy.exists">
            <or>
                <available file="${ivy.jar.file}" type="file"/>
                <available file="${ivy.local.jar.file}" type="file"/>
            </or>
        </condition>
        <mkdir dir="${dependency.dir}"/>
    </target>
    
    <target name="download-ivy" depends="check-ivy" unless="ivy.exists">
        <echo message="Installing Ivy"/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.local.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" unless="ivy.exists, ivy.loaded">
        <path id="ivy.lib.path">
            <fileset dir="${dependency.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <property name="ivy.loaded" value="true" />
    </target>
    
    <target name="retrieve-dependencies" depends="check-ivy, install-ivy">
        <ivy:retrieve pattern="${dependency.dir}/[type]/[artifact]-[revision].[ext]"/>
        <ivy:artifactproperty name="[module].[artifact]" value="${dependency.dir}/[type]/[artifact]-[revision].[ext]" />
        <ivy:artifactproperty name="[artifact].[type]" value="${dependency.dir}/[type]/[artifact]-[revision].[ext]" />
    </target>
    
    <target name="load-ant-contrib" depends="retrieve-dependencies" unless="ant.contrib.loaded">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${ant-contrib.ant-contrib}" />
            </classpath>
        </taskdef>
        <property name="ant.contrib.loaded" value="true" />
    </target>

    <target name="get-input-dirs">
        <dirset id="input.dirset" dir="${basedir}" includes="${input.dirs}"/>
    </target>

    <!-- Unfortunately, there doesn't seem to be a native way in ANT to simply loop over a set of directory's and do
         something, so we need to bring in ant-contrib first. -->
    <target name="build" depends="load-ant-contrib, get-input-dirs">
        <sequential>
            <tempfile property="convert.to.json.file" deleteonexit="true"/>

            <!--
                For the NTS step, there's a special script to transform multiple directories, which will save the list
                of fixtures to convert across all transformations to a single file. This has a huge performance benefit
                for the build-convertFixtures step later on.
             -->
            <ant antfile="src/build-nts-multiple.xml" inheritall="true"/>

            <!--
                For generating narratives and the Conformancelab properties files, we simply loop over the input.dirs
                and apply the build files on each of them.
            -->
            <for param="input.dir">
                <dirset refid="input.dirset"/>
                <sequential>
                    <ant antfile="src/build-addNarratives.xml" dir="${basedir}" inheritAll="false">
                        <property file="@{input.dir}/build.properties"/>
                        <property name="lib.dir" value="${lib.dir}"/>
                        <property name="ant.contrib.loaded" value="true"/>
                        <property name="ivy.exists" value="true"/>
                        <property name="ivy.loaded" value="true"/>
                    </ant>
                    <ant antFile="src/build-CLPropertiesFiles.xml" inheritall="false">
                        <property file="@{input.dir}/build.properties"/>
                    </ant>
                </sequential>
            </for>

            <!-- Finally, convert all fixtures that need to be converted from XML to JSON. -->
            <ant antfile="src/build-convertFixtures.xml">
                <property name="convert.to.json.file" value="${convert.to.json.file}"/>
            </ant>
        </sequential>
    </target>
</project>
